"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[36313],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),h=a,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return t?i.createElement(m,r(r({ref:n},c),{},{components:t})):i.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,r[1]=l;for(var d=2;d<o;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},55893:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=t(87462),a=(t(67294),t(3905));const o={description:"Develop with Ubidots",title:"Ubidots Usage",keywords:["SenseCap"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/13/2023",author:"shuxu hu"}},r="Develop with Ubidots",l={unversionedId:"Network/SenseCAP_K1100/Wi-Fi-Network_Application/Cloud_Service/Getting_started_with_Ubidots",id:"Network/SenseCAP_K1100/Wi-Fi-Network_Application/Cloud_Service/Getting_started_with_Ubidots",title:"Ubidots Usage",description:"Develop with Ubidots",source:"@site/docs/Network/SenseCAP_K1100/Wi-Fi-Network_Application/Cloud_Service/Getting_started_with_Ubidots.md",sourceDirName:"Network/SenseCAP_K1100/Wi-Fi-Network_Application/Cloud_Service",slug:"/Network/SenseCAP_K1100/Wi-Fi-Network_Application/Cloud_Service/Getting_started_with_Ubidots",permalink:"/docusaurus_wiki/zh-CN/Network/SenseCAP_K1100/Wi-Fi-Network_Application/Cloud_Service/Getting_started_with_Ubidots",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Network/SenseCAP_K1100/Wi-Fi-Network_Application/Cloud_Service/Getting_started_with_Ubidots.md",tags:[],version:"current",lastUpdatedBy:"shuxu hu",lastUpdatedAt:1673568e3,formattedLastUpdatedAt:"2023\u5e741\u670813\u65e5",frontMatter:{description:"Develop with Ubidots",title:"Ubidots Usage",keywords:["SenseCap"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/13/2023",author:"shuxu hu"}},sidebar:"ProductSidebar",previous:{title:"Advanced WiFi Usage",permalink:"/docusaurus_wiki/zh-CN/Network/SenseCAP_K1100/Wi-Fi-Network_Application/Wio-Terminal-Advanced-WiFi"},next:{title:"Blynk Usage",permalink:"/docusaurus_wiki/zh-CN/Network/SenseCAP_K1100/Wi-Fi-Network_Application/Cloud_Service/Quick-Start-to-using-Blynk"}},s={},d=[{value:"Preliminary Preparation",id:"preliminary-preparation",level:2},{value:"Connection",id:"connection",level:3},{value:"Software preparation",id:"software-preparation",level:3},{value:"Operation Steps",id:"operation-steps",level:2},{value:"Send built-in sensors Data to Ubidots",id:"send-built-in-sensors-data-to-ubidots",level:3},{value:"Send Grove Soil Moisture Sensor Data to Ubidots",id:"send-grove-soil-moisture-sensor-data-to-ubidots",level:3},{value:"Send Grove VOC and eCO2 Gas Sensor Data to Ubidots",id:"send-grove-voc-and-eco2-gas-sensor-data-to-ubidots",level:3},{value:"Send Grove Temp&amp;Humi Sensor Data to Ubidots",id:"send-grove-temphumi-sensor-data-to-ubidots",level:3},{value:"Send Grove Vision Ai Module Data to Ubidots",id:"send-grove-vision-ai-module-data-to-ubidots",level:3},{value:"Ubidots Panels",id:"ubidots-panels",level:3},{value:"Resources",id:"resources",level:2},{value:"Tech Support",id:"tech-support",level:2},{value:"Statement",id:"statement",level:2}],c={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"develop-with-ubidots"},"Develop with Ubidots"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ubidots")," is a systems integrators, IoT Entrepreneurs and OEMs effortlessly self-construct Internet of Things (IoT) applications and connected services with Ubidots\u2019 data collection, analysis, and visualization tools. In the planning of the kit, we choose Ubidots platform as an alternative without LoRaWAN\xae, you can use the WiFi function that comes with Wio Terminal to get the data presentation in Ubidots dashboard with the sensor data you need through MQTT protocol."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/1.png"})),(0,a.kt)("p",null,"In this chapter we will show you how to send data from sensors to Ubidots by means of Arduino programming."),(0,a.kt)("h2",{id:"preliminary-preparation"},"Preliminary Preparation"),(0,a.kt)("h3",{id:"connection"},"Connection"),(0,a.kt)("p",null,"The sensors inside the SeseCAP - K1100 Kit can all be connected to the Grove connector under the Wio Terminal via the Grove cable. The following table describes the location of the Grove connector to which each sensor is connected."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:500,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/2.png"})),(0,a.kt)("table",{align:"center"},(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("th",{align:"center"},"Sensor Type"),(0,a.kt)("th",{align:"center"},"Communication Protocol"),(0,a.kt)("th",{align:"center"},"Connected Grove Interface")),(0,a.kt)("tr",null,(0,a.kt)("td",{align:"center"},"Grove Temp&Humi Sensor (SHT40)"),(0,a.kt)("td",{align:"center"},"I2C"),(0,a.kt)("td",{align:"center"},"Wio Terminal ",(0,a.kt)("strong",null,"left")," Grove interface")),(0,a.kt)("tr",null,(0,a.kt)("td",{align:"center"},"Grove VOC and eCO2 Gas Sensor (SGP30)"),(0,a.kt)("td",{align:"center"},"I2C"),(0,a.kt)("td",{align:"center"},"Wio Terminal ",(0,a.kt)("strong",null,"left")," Grove interface")),(0,a.kt)("tr",null,(0,a.kt)("td",{align:"center"},"Grove Vision AI Module"),(0,a.kt)("td",{align:"center"},"I2C"),(0,a.kt)("td",{align:"center"},"Wio Terminal ",(0,a.kt)("strong",null,"left")," Grove interface")),(0,a.kt)("tr",null,(0,a.kt)("td",{align:"center"},"Grove Soil Moisture Sensor"),(0,a.kt)("td",{align:"center"},"ADC"),(0,a.kt)("td",{align:"center"},"Wio Terminal ",(0,a.kt)("strong",null,"right")," Grove interface")))),(0,a.kt)("h3",{id:"software-preparation"},"Software preparation"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1.")," You need to Install an Arduino Software."),(0,a.kt)("div",null,(0,a.kt)("p",{style:{}},(0,a.kt)("a",{href:"https://www.arduino.cc/en/Main/Software",target:"_blank"})),(0,a.kt)("div",{align:"center"},(0,a.kt)("a",{href:"https://www.arduino.cc/en/Main/Software",target:"_blank"},(0,a.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/Seeeduino_Stalker_V3_1/images/Download_IDE.png"}))),(0,a.kt)("p",null)),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2.")," Launch the Arduino application."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/seeed_logo/arduino.jpg"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3.")," Add Wio Terminal to the Arduino IDE."),(0,a.kt)("p",null,"Open your Arduino IDE, click on ",(0,a.kt)("inlineCode",{parentName:"p"},"File > Preferences"),", and copy below url to Additional Boards Manager URLs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json\n")),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/Boardurl.png"})),(0,a.kt)("p",null,"Click on ",(0,a.kt)("inlineCode",{parentName:"p"},"Tools > Board > Board Manager")," and Search ",(0,a.kt)("strong",{parentName:"p"},"Wio Terminal")," in the Boards Manager."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/addBoard.png"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4.")," Select your board and port"),(0,a.kt)("p",null,"You'll need to select the entry in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tools > Board")," menu that corresponds to your Arduino. Selecting the ",(0,a.kt)("strong",{parentName:"p"},"Wio Terminal"),"."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/selectBoard.png"})),(0,a.kt)("p",null,"Select the serial device of the Wio Terminal board from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tools -> Port")," menu. This is likely to be COM3 or higher (COM1 and COM2 are usually reserved for hardware serial ports). To find out, you can disconnect your Wio Terminal board and re-open the menu; the entry that disappears should be the Arduino board. Reconnect the board and select that serial port."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"For Mac User, it will be something like ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/cu.usbmodem141401"),".")),(0,a.kt)("p",null," If you are not able to upload the sketch, mostly it's because Arduino IDE was not able to put Wio Terminal to bootloader mode. (Because MCU was halted or your program handling USB) Workaround is putting your Wio Terminal to bootloader mode manually."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:400,src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/Wio-Terminal-Bootloader.png"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 5.")," Install the library required for the sensor of your choice"),(0,a.kt)("table",{align:"center"},(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("th",{align:"center"},"Sensor Type"),(0,a.kt)("th",{align:"center"},"Link 1"),(0,a.kt)("th",{align:"center"},"Link 2")),(0,a.kt)("tr",null,(0,a.kt)("td",{align:"center"},"Wio Terminal IMU Sensor"),(0,a.kt)("td",{align:"center"},(0,a.kt)("a",{href:"https://github.com/Seeed-Studio/Seeed_Arduino_LIS3DHTR/tree/master",target:"_blank"},"Download")),(0,a.kt)("td",{align:"center"},"-")),(0,a.kt)("tr",null,(0,a.kt)("td",{align:"center"},"Grove Temp&Humi Sensor (SHT40)"),(0,a.kt)("td",{align:"center"},(0,a.kt)("a",{href:"https://github.com/Sensirion/arduino-i2c-sht4x",target:"_blank"},"Download")),(0,a.kt)("td",{align:"center"},(0,a.kt)("a",{href:"https://github.com/Sensirion/arduino-core",target:"_blank"},"Download"))),(0,a.kt)("tr",null,(0,a.kt)("td",{align:"center"},"Grove VOC and eCO2 Gas Sensor (SGP30)"),(0,a.kt)("td",{align:"center"},(0,a.kt)("a",{href:"https://github.com/Seeed-Studio/SGP30_Gas_Sensor",target:"_blank"},"Download")),(0,a.kt)("td",{align:"center"},"-")),(0,a.kt)("tr",null,(0,a.kt)("td",{align:"center"},"Grove Vision AI Module"),(0,a.kt)("td",{align:"center"},(0,a.kt)("a",{href:"https://github.com/limengdu/Seeed-Grove-Vision-AI-Moudle",target:"_blank"},"Download")),(0,a.kt)("td",{align:"center"},"-")))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"}," Sensors not listed in the table above indicate that a separate library download is not required.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 6.")," Needed Libraries for Wi-Fi"),(0,a.kt)("p",null,"We need the following libraries to get started with Wi-Fi on the Wio Terminal. You can search for these libraries by typing the library name in the search box of Arduino Library Manager."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/20.png"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Seeed_Arduino_rpcWiFi"},(0,a.kt)("strong",{parentName:"a"},"Seeed_Arduino_rpcWiFi"))," - search for ",(0,a.kt)("inlineCode",{parentName:"li"},"seeed rpcwifi"))),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/21.png"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Seeed_Arduino_rpcUnified"},(0,a.kt)("strong",{parentName:"a"},"Seeed_Arduino_rpcUnified"))," - search for ",(0,a.kt)("inlineCode",{parentName:"li"},"seeed rpcunified"))),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/23.png"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Seeed_Arduino_mbedtls"},(0,a.kt)("strong",{parentName:"a"},"Seeed_Arduino_mbedtls"))," - search for ",(0,a.kt)("inlineCode",{parentName:"li"},"seeed mbedtls"))),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/24.png"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Seeed_Arduino_FS"},(0,a.kt)("strong",{parentName:"a"},"Seeed_Arduino_FS"))," - search for ",(0,a.kt)("inlineCode",{parentName:"li"},"seeed fs"))),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/25.png"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Seeed_Arduino_SFUD"},(0,a.kt)("strong",{parentName:"a"},"Seeed_Arduino_SFUD"))," - search for ",(0,a.kt)("inlineCode",{parentName:"li"},"seeed sfud"))),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/26.png"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/knolleary/pubsubclient"},(0,a.kt)("strong",{parentName:"a"},"PubSubClinet"))," - search for ",(0,a.kt)("inlineCode",{parentName:"li"},"PubSubClient"))),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/22.png"})),(0,a.kt)("h2",{id:"operation-steps"},"Operation Steps"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1.")," Register and login to Ubidots"),(0,a.kt)("p",null,"If this is your first time using Ubidots, please go to the ",(0,a.kt)("a",{parentName:"p",href:"https://ubidots.com/"},"Ubidots website")," and register an account of your own."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/3.png"})),(0,a.kt)("p",null,"Once you have registered, please login to Ubidots using your registered account."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2.")," Assign your unique ",(0,a.kt)("strong",{parentName:"p"},"Ubidots TOKEN")),(0,a.kt)("p",null,"Every request to Ubidots requires a TOKEN. The easiest way to get yours is clicking on \u201cAPI Credentials\u201d from the user dropdown."),(0,a.kt)("p",null,"Go to you user dropdown and click on API credentials:"),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:250,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/4.png"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tokens"),": Temporary and revocable keys to be used in your API requests. Please save the TOKEN for now, we will use it later."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/5.png"})),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"}," All API calls only accept your ",(0,a.kt)("strong",{parentName:"p"},"TOKEN"),". Don\u2019t try to use your API Key, it won\u2019t work! You can also access all of your Ubidots API Keys section of the My Profile settings in your User Dropdown. Select ",(0,a.kt)("strong",{parentName:"p"},"My Profile")," \u2013> ",(0,a.kt)("strong",{parentName:"p"},"API Credentials")," to review the list of API TOKENS relating to your specific Ubidots Account.")),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/6.png"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3.")," Be prepared with the necessary information"),(0,a.kt)("p",null,"To establish an MQTT connection, we will need to prepare the following information in advance."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"WiFi SSID"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Fill in the WiFi SSID to which Wio Terminal can connect. Wio Terminal will search for WiFi within its surroundings and try to connect to it."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Password for WiFi SSID"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Fill in the password for the WiFi SSID to which Wio Terminal can connect."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ubidots TOKEN"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This is the TOKEN generated in ",(0,a.kt)("strong",{parentName:"li"},"step 2"),"."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Variable label"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This is the name of the sensor value provided by the user to Ubidots. Ubidots are matched to different data based on this name provided by the user. If the Variable label don\u2019t exist before the first dot is sent, Ubidots will create them automatically."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Device label"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This is the name of the device and the name of the device provided by the user will be used by Ubidots to identify the device. If the Device label don\u2019t exist before the first dot is sent, Ubidots will create them automatically."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"MQTT client name"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This is special because it is the ID with which your device will be identified by the broker so it ",(0,a.kt)("strong",{parentName:"li"},"MUST")," be unique. If your device tries to connect with the same ID that has already been taken by another device, the connection will be refused. Please create your own all alphanumeric 8-12+ character MQTT client name and input into the code accordingly.\nNeed some help creating a unique MQTT client name, check out this ",(0,a.kt)("a",{parentName:"li",href:"https://www.random.org/strings/"},"random ascii builder"),", or simply use the MAC address of your device as every MAC address is globally unique.")))),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/7.png"})),(0,a.kt)("p",null,"At the beginning of the program below, we will define for these requirements at the top of the code, please fill in your own information as appropriate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'//examples\n#define WIFISSID "<YOUR-WIFISSD>" // Put your WifiSSID here\n#define PASSWORD "<YOUR-WIFI-PASSWORD" // Put your wifi password here\n#define TOKEN "<YOUR-UBIDOTS-TOKEN>" // Put your Ubidots\' TOKEN\n#define VARIABLE_LABEL "light" // Assign the variable label\n#define DEVICE_LABEL "wio-terminal" // Assign the device label\n#define MQTT_CLIENT_NAME "r6y1ax7mq8" // MQTT client Name\n')),(0,a.kt)("h3",{id:"send-built-in-sensors-data-to-ubidots"},"Send built-in sensors Data to Ubidots"),(0,a.kt)("p",null,"If you want to send detection data from the Wio Terminal's built-in sensors to Ubidots, paste the complete code below into the Arduino and upload it to the Wio Terminal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'#include <PubSubClient.h>\n#include <rpcWiFi.h>\n#include <TFT_eSPI.h>\n#include"LIS3DHTR.h"\n\nLIS3DHTR<TwoWire> lis;\n\n//Required Information\n#define WIFISSID "<YOUR-WIFISSD>" // Put your WifiSSID here\n#define PASSWORD "<YOUR-WIFI-PASSWORD" // Put your wifi password here\n#define TOKEN "<YOUR-UBIDOTS-TOKEN>" // Put your Ubidots\' TOKEN\n#define VARIABLE_LABEL1 "light" // Assign the variable label\n#define VARIABLE_LABEL2 "IMUx"\n#define VARIABLE_LABEL3 "IMUy"\n#define VARIABLE_LABEL4 "IMUz"\n#define VARIABLE_LABEL5 "sound"\n#define DEVICE_LABEL "wio-terminal" // Assign the device label\n#define MQTT_CLIENT_NAME "r6y1ax7mq8" // MQTT client Name\n\nconst long interval = 100;\nunsigned long previousMillis = 0;\n\nTFT_eSPI tft;\n\nchar mqttBroker[] = "industrial.api.ubidots.com";\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\n//sensor values\nstatic int lightValue = 0;\nstatic float imuxValue = 0;\nstatic float imuyValue = 0;\nstatic float imuzValue = 0;\nstatic int soundValue = 0;\n\n// Space to store values to send\nstatic char str_light[6];\nstatic char str_imux[6];\nstatic char str_imuy[6];\nstatic char str_imuz[6];\nstatic char str_sound[6];\nchar payload[700];\nchar topic[150];\n\nvoid callback(char* topic, byte* payload, unsigned int length){\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i=0;i<length;i++) {\n    Serial.print((char)payload[i]);\n  }\n}\n\nvoid reconnect() {\n  // Loop until we\'re reconnected\n  while (!client.connected()) {\n    Serial.println("Attempting MQTT connection...");\n\n  // Attempt to connect\n  if (client.connect(MQTT_CLIENT_NAME, TOKEN,"")) {\n    Serial.println("connected");\n  }\n  else {\n    Serial.print("failed, rc=");\n    Serial.print(client.state());\n    Serial.println(" try again in 2 seconds");\n    // Wait 2 seconds before retrying\n    delay(2000);\n    }\n  }\n}\n\n//Reading built-in sensor values\nvoid read_builtin()\n{\n  lightValue = analogRead(WIO_LIGHT);\n  Serial.print("Light = ");\n  Serial.println(lightValue);\n  \n  imuxValue = lis.getAccelerationX();\n  Serial.print("IMU_x = ");\n  Serial.println(imuxValue);\n  imuyValue = lis.getAccelerationY();\n  Serial.print("IMU_y = ");\n  Serial.println(imuyValue);\n  imuzValue = lis.getAccelerationZ();\n  Serial.print("IMU_z = ");\n  Serial.println(imuzValue);\n  \n  soundValue = analogRead(WIO_MIC);\n  Serial.print("Sound = ");\n  Serial.println(soundValue);\n}\n\n//Sending data to Ubidots\nvoid send_data()\n{\n  dtostrf(lightValue, 4, 0, str_light);\n  dtostrf(imuxValue, 4, 3, str_imux);\n  dtostrf(imuyValue, 4, 3, str_imuy);\n  dtostrf(imuzValue, 4, 3, str_imuz);\n  dtostrf(soundValue, 4, 0, str_sound);\n\n  if (!client.connected()) {\n    reconnect();\n  }\n  \n  // Builds the topic\n  sprintf(topic, "%s", ""); // Cleans the topic content\n  sprintf(topic, "%s%s", "/v2.0/devices/", DEVICE_LABEL);\n\n  //Builds the payload\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL1); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_light); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL2); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_imux); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL3); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_imuy); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL4); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_imuz); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL5); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_sound); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  client.loop();\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  lis.begin(Wire1);\n  pinMode(WIO_MIC, INPUT);\n  pinMode(WIO_LIGHT, INPUT);\n\n  tft.begin();\n  tft.setRotation(3);\n  tft.setTextSize(2);\n  tft.fillScreen(TFT_BLACK);\n\n  lis.setOutputDataRate(LIS3DHTR_DATARATE_25HZ); //Data output rate\n  lis.setFullScaleRange(LIS3DHTR_RANGE_2G);\n  \n//  while(!Serial);\n\n  // Set WiFi to station mode and disconnect from an AP if it was previously connected\n  WiFi.mode(WIFI_STA);\n  WiFi.disconnect();\n  \n  tft.drawString("Connecting to WiFi...",20,120);\n  WiFi.begin(WIFISSID, PASSWORD);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    WiFi.begin(WIFISSID, PASSWORD);\n  }\n  \n  tft.fillScreen(TFT_BLACK);\n  tft.drawString("Connected to the WiFi",20,120);\n\n  delay(1000);\n  client.setServer(mqttBroker, 1883);\n  client.setCallback(callback);\n\n}\n\nvoid loop() {\n  read_builtin();   //Reading buile-in sensor values\n  send_data();   //Sending data to Ubidots\n  delay(5000);\n}\n')),(0,a.kt)("h3",{id:"send-grove-soil-moisture-sensor-data-to-ubidots"},"Send Grove Soil Moisture Sensor Data to Ubidots"),(0,a.kt)("p",null,"If you want to send Grove Soil Moisture Sensor data to Ubidots, paste the complete code below into the Arduino and upload it to the Wio Terminal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'#include <PubSubClient.h>\n#include <rpcWiFi.h>\n#include <TFT_eSPI.h>\n\n//Required Information\n#define WIFISSID "<YOUR-WIFISSD>" // Put your WifiSSID here\n#define PASSWORD "<YOUR-WIFI-PASSWORD" // Put your wifi password here\n#define TOKEN "<YOUR-UBIDOTS-TOKEN>" // Put your Ubidots\' TOKEN\n#define VARIABLE_LABEL "light" // Assign the variable label\n#define DEVICE_LABEL "wio-terminal" // Assign the device label\n#define MQTT_CLIENT_NAME "r6y1ax7mq8" // MQTT client Name\n\nconst long interval = 100;\nunsigned long previousMillis = 0;\n\nTFT_eSPI tft;\n\nchar mqttBroker[] = "industrial.api.ubidots.com";\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\n//Soil moisture pins and sensor values\nint sensorPin = A0;\nstatic int soilValue = 0;\n\n// Space to store values to send\nchar str_soil[6];\nchar payload[700];\nchar topic[150];\n\nvoid callback(char* topic, byte* payload, unsigned int length){\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i=0;i<length;i++) {\n    Serial.print((char)payload[i]);\n  }\n}\n\nvoid reconnect() {\n  // Loop until we\'re reconnected\n  while (!client.connected()) {\n    Serial.println("Attempting MQTT connection...");\n\n  // Attempt to connect\n  if (client.connect(MQTT_CLIENT_NAME, TOKEN,"")) {\n    Serial.println("connected");\n  }\n  else {\n    Serial.print("failed, rc=");\n    Serial.print(client.state());\n    Serial.println(" try again in 2 seconds");\n    // Wait 2 seconds before retrying\n    delay(2000);\n    }\n  }\n}\n\n//Reading soil moisture sensor values\nvoid read_soil()\n{\n  soilValue = analogRead(sensorPin);\n  Serial.print("Moisture = ");\n  Serial.println(soilValue);\n}\n\n//Sending data to Ubidots\nvoid send_data()\n{\n  dtostrf(soilValue, 4, 0, str_soil);\n\n  if (!client.connected()) {\n    reconnect();\n  }\n  \n  // Builds the topic\n  sprintf(topic, "%s", ""); // Cleans the topic content\n  sprintf(topic, "%s%s", "/v2.0/devices/", DEVICE_LABEL);\n\n  //Builds the payload\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_soil); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n\n  client.publish(topic, payload);\n  delay(500);\n\n  client.loop();\n}\n\n\nvoid setup() {\n  Serial.begin(115200);\n\n  tft.begin();\n  tft.setRotation(3);\n  tft.setTextSize(2);\n  tft.fillScreen(TFT_BLACK);\n\n  // Set WiFi to station mode and disconnect from an AP if it was previously connected\n  WiFi.mode(WIFI_STA);\n  WiFi.disconnect();\n  \n  tft.drawString("Connecting to WiFi...",20,120);\n  WiFi.begin(WIFISSID, PASSWORD);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    WiFi.begin(WIFISSID, PASSWORD);\n  }\n  \n  tft.fillScreen(TFT_BLACK);\n  tft.drawString("Connected to the WiFi",20,120);\n\n  delay(1000);\n  client.setServer(mqttBroker, 1883);\n  client.setCallback(callback);\n}\n\nvoid loop() {\n  read_soil();   //Reading soil moisture sensor values\n  send_data();   //Sending data to Ubidots\n  delay(5000);\n}\n')),(0,a.kt)("h3",{id:"send-grove-voc-and-eco2-gas-sensor-data-to-ubidots"},"Send Grove VOC and eCO2 Gas Sensor Data to Ubidots"),(0,a.kt)("p",null,"If you want to send Grove VOC and eCO2 Gas Sensor data to Ubidots, paste the complete code below into the Arduino and upload it to the Wio Terminal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'#include <PubSubClient.h>\n#include <rpcWiFi.h>\n#include <TFT_eSPI.h>\n#include "sensirion_common.h"\n#include "sgp30.h"\n\n#define WIFISSID "<YOUR-WIFISSD>" // Put your WifiSSID here\n#define PASSWORD "<YOUR-WIFI-PASSWORD" // Put your wifi password here\n#define TOKEN "<YOUR-UBIDOTS-TOKEN>" // Put your Ubidots\' TOKEN\n#define VARIABLE_LABEL1 "voc" // Assign the variable label\n#define VARIABLE_LABEL2 "co2"\n#define DEVICE_LABEL "wio-terminal" // Assign the device label\n#define MQTT_CLIENT_NAME "r6y1ax7mq8" // MQTT client Name\n\nconst long interval = 100;\nunsigned long previousMillis = 0;\n\nchar mqttBroker[] = "industrial.api.ubidots.com";\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nTFT_eSPI tft = TFT_eSPI();\n\nstatic unsigned short int VOC = 0;\nstatic unsigned short int CO2 = 0;\n\n// Space to store values to send\nchar str_voc[6];\nchar str_co2[6];\nchar payload[700];\nchar topic[150];\n\nvoid callback(char* topic, byte* payload, unsigned int length){\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i=0;i<length;i++) {\n    Serial.print((char)payload[i]);\n  }\n}\n\nvoid reconnect() {\n  // Loop until we\'re reconnected\n  while (!client.connected()) {\n    Serial.println("Attempting MQTT connection...");\n\n  // Attempt to connect\n  if (client.connect(MQTT_CLIENT_NAME, TOKEN,"")) {\n    Serial.println("connected");\n  }\n  else {\n    Serial.print("failed, rc=");\n    Serial.print(client.state());\n    Serial.println(" try again in 2 seconds");\n    // Wait 2 seconds before retrying\n    delay(2000);\n    }\n  }\n}\n\nvoid read_sgp30()\n{\n  s16 err = 0;\n  sgp_measure_iaq_blocking_read(&VOC, &CO2);\n  if (err == STATUS_OK) {\n      Serial.print("tVOC  Concentration:");\n      Serial.print(VOC);\n      Serial.println("ppb");\n\n      Serial.print("CO2eq Concentration:");\n      Serial.print(CO2);\n      Serial.println("ppm");\n  } else {\n      Serial.println("error reading IAQ values\\n");\n  }\n}\n\nvoid send_data()\n{\n  dtostrf(VOC, 4, 0, str_voc);\n  dtostrf(CO2, 4, 0, str_co2);\n  \n  if (!client.connected()) {\n    reconnect();\n  }\n  \n  // Builds the topic\n  sprintf(topic, "%s", ""); // Cleans the topic content\n  sprintf(topic, "%s%s", "/v2.0/devices/", DEVICE_LABEL);\n\n  //Builds the payload\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL1); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_voc); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  Serial.println(payload);\n  delay(500);\n\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL2); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_co2); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  Serial.println(payload);\n  delay(500);\n\n  client.loop();\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  while (sgp_probe() != STATUS_OK) {\n      Serial.println("SGP failed");\n  }\n  sgp_set_absolute_humidity(13000);\n  sgp_iaq_init();\n\n  tft.begin();\n  tft.setRotation(3);\n  tft.setTextSize(2);\n  tft.fillScreen(TFT_BLACK);\n  \n//  while(!Serial);\n\n  // Set WiFi to station mode and disconnect from an AP if it was previously connected\n  WiFi.mode(WIFI_STA);\n  WiFi.disconnect();\n  \n  tft.drawString("Connecting to WiFi...",20,120);\n  WiFi.begin(WIFISSID, PASSWORD);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    WiFi.begin(WIFISSID, PASSWORD);\n  }\n  \n  tft.fillScreen(TFT_BLACK);\n  tft.drawString("Connected to the WiFi",20,120);\n\n  delay(1000);\n  client.setServer(mqttBroker, 1883);\n  client.setCallback(callback);\n}\n\nvoid loop() {\n  read_sgp30();    //Reading sgp30 sensor values\n  send_data();     //Sending data to Ubidots\n  delay(5000);\n}\n')),(0,a.kt)("h3",{id:"send-grove-temphumi-sensor-data-to-ubidots"},"Send Grove Temp&Humi Sensor Data to Ubidots"),(0,a.kt)("p",null,"If you want to send Grove Temp&Humi Sensor data to Ubidots, paste the complete code below into the Arduino and upload it to the Wio Terminal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'#include <PubSubClient.h>\n#include <rpcWiFi.h>\n#include <TFT_eSPI.h>\n#include <SensirionI2CSht4x.h>\n#include <Wire.h>\n\n#define WIFISSID "<YOUR-WIFISSD>" // Put your WifiSSID here\n#define PASSWORD "<YOUR-WIFI-PASSWORD" // Put your wifi password here\n#define TOKEN "<YOUR-UBIDOTS-TOKEN>" // Put your Ubidots\' TOKEN\n#define VARIABLE_LABEL1 "temperature" // Assign the variable label\n#define VARIABLE_LABEL2 "humidity"\n#define DEVICE_LABEL "wio-terminal" // Assign the device label\n#define MQTT_CLIENT_NAME "r6y1ax7mq8" // MQTT client Name\n\nconst long interval = 100;\nunsigned long previousMillis = 0;\n\nchar mqttBroker[] = "industrial.api.ubidots.com";\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nTFT_eSPI tft = TFT_eSPI();\nSensirionI2CSht4x sht4x;\n\nstatic float temp = 0;\nstatic float humi = 0;\n\n// Space to store values to send\nchar str_temp[6];\nchar str_humi[6];\nchar payload[700];\nchar topic[150];\n\nvoid callback(char* topic, byte* payload, unsigned int length){\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i=0;i<length;i++) {\n    Serial.print((char)payload[i]);\n  }\n}\n\nvoid reconnect() {\n  // Loop until we\'re reconnected\n  while (!client.connected()) {\n    Serial.println("Attempting MQTT connection...");\n\n  // Attempt to connect\n  if (client.connect(MQTT_CLIENT_NAME, TOKEN,"")) {\n    Serial.println("connected");\n  }\n  else {\n    Serial.print("failed, rc=");\n    Serial.print(client.state());\n    Serial.println(" try again in 2 seconds");\n    // Wait 2 seconds before retrying\n    delay(2000);\n    }\n  }\n}\n\nvoid read_sht40()\n{\n  uint16_t error;\n  char errorMessage[256];\n  error = sht4x.measureHighPrecision(temp, humi);\n  if (error) {\n      Serial.print("Error trying to execute measureHighPrecision(): ");\n      errorToString(error, errorMessage, 256);\n      Serial.println(errorMessage);\n  } else {\n      Serial.print("Temperature:");\n      Serial.print(temp);\n      Serial.print("\\t");\n      Serial.print("Humidity:");\n      Serial.println(humi);\n  }\n}\n\nvoid send_data()\n{\n  dtostrf(temp, 4, 2, str_temp);\n  dtostrf(humi, 4, 2, str_humi);\n  \n  if (!client.connected()) {\n    reconnect();\n  }\n  \n  // Builds the topic\n  sprintf(topic, "%s", ""); // Cleans the topic content\n  sprintf(topic, "%s%s", "/v2.0/devices/", DEVICE_LABEL);\n\n  //Builds the payload\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL1); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_temp); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL2); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_humi); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  client.loop();\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  Wire.begin();\n  sht4x.begin(Wire);\n\n  tft.begin();\n  tft.setRotation(3);\n  tft.setTextSize(2);\n  tft.fillScreen(TFT_BLACK);\n  \n//  while(!Serial);\n\n  // Set WiFi to station mode and disconnect from an AP if it was previously connected\n  WiFi.mode(WIFI_STA);\n  WiFi.disconnect();\n  \n  tft.drawString("Connecting to WiFi...",20,120);\n  WiFi.begin(WIFISSID, PASSWORD);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    WiFi.begin(WIFISSID, PASSWORD);\n  }\n  \n  tft.fillScreen(TFT_BLACK);\n  tft.drawString("Connected to the WiFi",20,120);\n\n  delay(1000);\n  client.setServer(mqttBroker, 1883);\n  client.setCallback(callback);\n}\n\nvoid loop() {\n  read_sht40();    //Reading sht40 sensor values\n  send_data();     //Sending data to Ubidots\n  delay(5000);\n}\n')),(0,a.kt)("h3",{id:"send-grove-vision-ai-module-data-to-ubidots"},"Send Grove Vision Ai Module Data to Ubidots"),(0,a.kt)("p",null,"If you want to send Grove Vision Ai Module data to Ubidots, paste the complete code below into the Arduino and upload it to the Wio Terminal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'#include <PubSubClient.h>\n#include <rpcWiFi.h>\n#include <TFT_eSPI.h>\n#include"LIS3DHTR.h"\n#include "Seeed_Arduino_GroveAI.h"\n\n//Required Information\n#define WIFISSID "<YOUR-WIFISSD>" // Put your WifiSSID here\n#define PASSWORD "<YOUR-WIFI-PASSWORD" // Put your wifi password here\n#define TOKEN "<YOUR-UBIDOTS-TOKEN>" // Put your Ubidots\' TOKEN\n#define VARIABLE_LABEL1 "num" // Assign the variable label\n#define VARIABLE_LABEL2 "confidence"\n#define DEVICE_LABEL "wio-terminal" // Assign the device label\n#define MQTT_CLIENT_NAME "r6y1ax7mq8" // MQTT client Name\n\nconst long interval = 100;\nunsigned long previousMillis = 0;\n\nchar mqttBroker[] = "industrial.api.ubidots.com";\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nGroveAI ai(Wire);\nuint8_t state = 0;\nTFT_eSPI tft = TFT_eSPI();\n\nstatic int num = 0;\nstatic int conf = 0;\n\n// Space to store values to send\nchar str_num[6];\nchar str_conf[6];\nchar payload[700];\nchar topic[150];\n\nvoid callback(char* topic, byte* payload, unsigned int length){\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i=0;i<length;i++) {\n    Serial.print((char)payload[i]);\n  }\n}\n\nvoid reconnect() {\n  // Loop until we\'re reconnected\n  while (!client.connected()) {\n    Serial.println("Attempting MQTT connection...");\n\n  // Attempt to connect\n  if (client.connect(MQTT_CLIENT_NAME, TOKEN,"")) {\n    Serial.println("connected");\n  }\n  else {\n    Serial.print("failed, rc=");\n    Serial.print(client.state());\n    Serial.println(" try again in 2 seconds");\n    // Wait 2 seconds before retrying\n    delay(2000);\n    }\n  }\n}\n\n//Vision AI init\nvoid VisionAI_Init()\n{\n  Serial.println("begin");\n  if (ai.begin(ALGO_OBJECT_DETECTION, MODEL_EXT_INDEX_1)) // Object detection and pre-trained model 1\n  {\n    state = 1;\n  }\n  else\n  {\n    Serial.println("Algo begin failed.");\n  }\n}\n\n//Read VisionAI values: number of characters recognized, confidence level for each person\nvoid read_VisionAI()  \n{\n  if (state == 1)\n  {\n    uint32_t tick = millis();\n    if (ai.invoke()) // begin invoke\n    {\n      while (1) // wait for invoking finished\n      {\n        CMD_STATE_T ret = ai.state(); \n        if (ret == CMD_STATE_IDLE)\n        {\n          break;\n        }\n        delay(20);\n      }\n      uint8_t len = ai.get_result_len(); // receive how many people detect\n      if(len)\n      {\n         Serial.print("Number of people: ");\n\n         num = len;\n         Serial.println(num);\n\n         object_detection_t data;       //get data\n         for (int i = 0; i < len; i++)\n         {\n            ai.get_result(i, (uint8_t*)&data, sizeof(object_detection_t)); //get result\n            Serial.print("confidence:");\n            \n            conf = data.confidence;\n            Serial.println(conf);\n          }\n      }\n     else\n     {\n       Serial.println("No identification");\n       num = 0;\n       conf = 0;\n     }\n   }\n    else\n    {\n      Serial.println("Invoke Failed.");\n      num = 0;\n      conf = 0;\n      delay(1000);\n    }\n  }\n}\n\nvoid send_data()\n{\n  dtostrf(num, 4, 0, str_num);\n  dtostrf(conf, 4, 0, str_conf);\n  \n  if (!client.connected()) {\n    reconnect();\n  }\n  \n  // Builds the topic\n  sprintf(topic, "%s", ""); // Cleans the topic content\n  sprintf(topic, "%s%s", "/v2.0/devices/", DEVICE_LABEL);\n\n  //Builds the payload\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL1); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_num); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  sprintf(payload, "%s", ""); // Cleans the payload\n  sprintf(payload, "{\\"%s\\":", VARIABLE_LABEL2); // Adds the variable label\n  sprintf(payload, "%s%s", payload, str_conf); // Adds the value\n  sprintf(payload, "%s}", payload); // Closes the dictionary brackets\n  client.publish(topic, payload);\n  delay(500);\n\n  client.loop();\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  Wire.begin();\n\n  tft.begin();\n  tft.setRotation(3);\n  tft.setTextSize(2);\n  tft.fillScreen(TFT_BLACK);\n  VisionAI_Init();\n\n  // Set WiFi to station mode and disconnect from an AP if it was previously connected\n  WiFi.mode(WIFI_STA);\n  WiFi.disconnect();\n  \n  tft.drawString("Connecting to WiFi...",20,120);\n  WiFi.begin(WIFISSID, PASSWORD);\n  \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    WiFi.begin(WIFISSID, PASSWORD);\n  }\n  \n  tft.fillScreen(TFT_BLACK);\n  tft.drawString("Connected to the WiFi",20,120);\n\n  delay(1000);\n  client.setServer(mqttBroker, 1883);\n  client.setCallback(callback);\n}\n\nvoid loop() {\n  read_VisionAI(); //Reading visionai sensor values\n  send_data();     //Sending data to Ubidots\n  delay(5000);\n}\n')),(0,a.kt)("h3",{id:"ubidots-panels"},"Ubidots Panels"),(0,a.kt)("p",null,"Once the code has been uploaded, we can prepare to set up the dashboard to see how the data has been uploaded."),(0,a.kt)("p",null,"Ubidots has a very simple interface and if you want to view information about your device, you can select ",(0,a.kt)("strong",{parentName:"p"},"Devices")," right at the top of the dashboard."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/16.png"})),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/11.png"})),(0,a.kt)("p",null,"Click on your device name here to be able to see all the history tabs. This is determined by the ",(0,a.kt)("strong",{parentName:"p"},"VARIABLE_LABEL")," in the code."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/19.png"})),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The free version of Ubidots only supports the creation of ",(0,a.kt)("strong",{parentName:"p"},"one TOKEN")," and ",(0,a.kt)("strong",{parentName:"p"},"ten labels"),". Once you have more than ten labels, the labels you have uploaded as well as the data will be discarded.")),(0,a.kt)("p",null,"If you want to see the data information of your device, you can select ",(0,a.kt)("strong",{parentName:"p"},"Data"),"."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/17.png"})),(0,a.kt)("p",null,"You can also select a different dashboard screen in the top left corner of the main page. By default to start with, Ubidots will automatically create a dashboard for you called ",(0,a.kt)("strong",{parentName:"p"},"Demo Dashboard"),". Once the Wio Terminal is networked and sending data, you will be able to see a dashboard called ",(0,a.kt)("strong",{parentName:"p"},"wio terminal dashboard"),". This is defined in the code under ",(0,a.kt)("strong",{parentName:"p"},"DEVICE_LABEL"),"."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/18.png"})),(0,a.kt)("p",null,"You can add different panels under the current dashboard, which requires you to click on the ",(0,a.kt)("strong",{parentName:"p"},"+")," sign in the top right corner."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:800,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/13.png"})),(0,a.kt)("p",null,"Below is a list of the panels supported by Ubidots."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/15.png"})),(0,a.kt)("p",null,"Let's take the example of creating a line chart table. If you want to draw a line chart of IMU sensor values, then you need to create three labels and the ",(0,a.kt)("strong",{parentName:"p"},"names of the labels need to match the VARIABLE_LABEL in your code"),", then just leave everything to Ubidots and it will be generated automatically for you."),(0,a.kt)("div",{align:"center"},(0,a.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/k1100_ubidots/14.png"})),(0,a.kt)("p",null,"Ubidots also has very powerful customisation features, such as whether to display values, the name of the Y-axis and how much data to display, all of which you can play with freely."),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("p",null,"For all the codes used in this tutorial please click on the icon to access them."),(0,a.kt)("div",null,(0,a.kt)("p",{style:{}},(0,a.kt)("a",{href:"https://github.com/limengdu/K1100_Ubidots",target:"_blank"})),(0,a.kt)("div",{align:"center"},(0,a.kt)("a",{href:"https://github.com/limengdu/K1100_Ubidots",target:"_blank"},(0,a.kt)("img",{width:300,src:"https://files.seeedstudio.com/wiki/seeed_logo/github.png"}))),(0,a.kt)("p",null)),(0,a.kt)("h2",{id:"tech-support"},"Tech Support"),(0,a.kt)("p",null,"Please do not hesitate to submit the issue into our ",(0,a.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"}))),(0,a.kt)("h2",{id:"statement"},"Statement"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The LoRa\xae Mark is a trademark of Semtech Corporation or its subsidiaries."),(0,a.kt)("li",{parentName:"ul"},"LoRaWAN\xae is a mark used under license from the LoRa Alliance\xae.")))}p.isMDXComponent=!0}}]);