"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7937],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),c=i,b=p["".concat(d,".").concat(c)]||p[c]||m[c]||r;return t?a.createElement(b,o(o({ref:n},u),{},{components:t})):a.createElement(b,o({ref:n},u))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const r={description:"Rainbowduino_v3.0",title:"Rainbowduino v3.0",keywords:["Rainbowduino_v3.0"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"01/20/2023",author:"Matthew"}},o=void 0,l={unversionedId:"Seeed_Elderly/Rainbowduino/Rainbowduino_v3.0",id:"Seeed_Elderly/Rainbowduino/Rainbowduino_v3.0",title:"Rainbowduino v3.0",description:"Rainbowduino_v3.0",source:"@site/docs/Seeed_Elderly/Rainbowduino/Rainbowduino_v3.0.md",sourceDirName:"Seeed_Elderly/Rainbowduino",slug:"/Seeed_Elderly/Rainbowduino/Rainbowduino_v3.0",permalink:"/docusaurus_wiki/zh-CN/Seeed_Elderly/Rainbowduino/Rainbowduino_v3.0",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Seeed_Elderly/Rainbowduino/Rainbowduino_v3.0.md",tags:[],version:"current",lastUpdatedBy:"Matthew",lastUpdatedAt:1674172800,formattedLastUpdatedAt:"2023\u5e741\u670820\u65e5",frontMatter:{description:"Rainbowduino_v3.0",title:"Rainbowduino v3.0",keywords:["Rainbowduino_v3.0"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"01/20/2023",author:"Matthew"}},sidebar:"ProductSidebar",previous:{title:"Xadow Wearable Kit For Edison",permalink:"/docusaurus_wiki/zh-CN/Seeed_Elderly/Xadow/Xadow_Wearable_Kit_For_Edison"},next:{title:"Rainbowduino LED driver platform-ATmega328",permalink:"/docusaurus_wiki/zh-CN/Seeed_Elderly/Rainbowduino/Rainbowduino_LED_driver_platform-ATmega328"}},d={},s=[{value:"Features",id:"features",level:2},{value:"Application Ideas",id:"application-ideas",level:2},{value:"Usage",id:"usage",level:2},{value:"Hardware Setup",id:"hardware-setup",level:3},{value:"Software Setup",id:"software-setup",level:3},{value:"Programming",id:"programming",level:3},{value:"Using with RGB LED Cube",id:"using-with-rgb-led-cube",level:4},{value:"Using with RGB LED Matrix",id:"using-with-rgb-led-matrix",level:4},{value:"Schematic Online Viewer",id:"schematic-online-viewer",level:2},{value:"Resources",id:"resources",level:2},{value:"Tech Support",id:"tech-support",level:2}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbowduino_V3.0.jpg",alt:null})),(0,i.kt)("p",null,"The Rainbowduino board is an Arduino compatible controller board with professional multiplexed LED driver. It can drive an ",(0,i.kt)("strong",{parentName:"p"},"8x8 RGB Led Matrix")," or a ",(0,i.kt)("strong",{parentName:"p"},"4x4x4 RGB LED Cube")," in common Anode mode. Rainbowduino v3.0 uses two ",(0,i.kt)("strong",{parentName:"p"},"MY9221")," chips which is a ",(0,i.kt)("strong",{parentName:"p"},"12-channels")," (R/G/B x 4) constant current Adaptive Pulse Density Modulation",(0,i.kt)("strong",{parentName:"p"},"(APDM)"),". Rainbowduino v3.0 has provisions for cascading more such boards with I2C interface."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Rainbowduino v3.0")," is flashed with Arduino boot-loader and this makes it easy to program sketches using Arduino IDE. Unlike other LED drivers, this comes with a USB to UART (FT232RL) inbuilt for programming the sketches."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Rainbowduino-LED-driver-platform-Atmega-328.html?queryID=bc1228bcd9b9d4b2534accb940b86bea&objectID=2019&indexName=bazaar_retailer_products"},(0,i.kt)("img",{parentName:"a",src:"https://files.seeedstudio.com/wiki/common/Get_One_Now_Banner.png",alt:null}))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbowduino_V3.0b_board_bottom.png",alt:null}),"\n",(0,i.kt)("strong",{parentName:"p"},"Rainbowduino v3.0")," bottom"),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Constant current output"),(0,i.kt)("td",{parentName:"tr",align:null},"20.8mA")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Pin headers"),(0,i.kt)("td",{parentName:"tr",align:null},"2 x 16 for connecting multiplexed LEDs")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Maximum LEDs driving capability"),(0,i.kt)("td",{parentName:"tr",align:null},"192 (i.e 8x8x3)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Supported LED displays"),(0,i.kt)("td",{parentName:"tr",align:null},"4x4x4 RGB Cube & 8x8 RGB LED Matrix")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"USB to UART"),(0,i.kt)("td",{parentName:"tr",align:null},"FT232RL")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DC Supply"),(0,i.kt)("td",{parentName:"tr",align:null},"USB powered or External 6V~12V DC")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Inbuilt Voltage regulator"),(0,i.kt)("td",{parentName:"tr",align:null},"5V / 1A")))),(0,i.kt)("h2",{id:"application-ideas"},"Application Ideas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"General Purpose LED driver",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Connect 4x4x4 RGB Cube"),(0,i.kt)("li",{parentName:"ul"},"Connect 8x8 RGB Matrix"))),(0,i.kt)("li",{parentName:"ul"},"Create LED sign boards by chaining more than one ",(0,i.kt)("strong",{parentName:"li"},"Rainbowduino v3.0"))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"hardware-setup"},"Hardware Setup"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Always set the slide switch to ",(0,i.kt)("span",{style:{fontWeight:"bold"}},"USB")," position for programming the Rainbowduino v3.0. Setting the slide switch to ",(0,i.kt)("span",{style:{fontWeight:"bold"}},"HOST")," position makes the onboard FT232 act as UartSBee (This feature is not required for Rainbowduino v3.0 normal operation)")),(0,i.kt)("p",null,"Connecting to LED matrix is very straight forward."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Connecting RGB LED Matrix"),'\nConnect RGB Matrix 2x16 male pin header to Rainbowduino as shown below (See the back of RGB matrix, the 16 male pin header closer to "2088RGB" text marking should be connected to DRIVE - GREEN- DRIVE pin header of Rainbowduino.)')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbowduino_v3.0_with_LED_Matrix.jpg",alt:null})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Rainbowduino v3.0 connected to 8x8 RGB LED Matrix")),(0,i.kt)("p",null,"(or)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Connecting RGB LED Cube"),"\nConnect Rainbow Cube Kit 2x16 male pin header to Rainbowduino as shown below.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbow_Cube_Installation_1.jpg",alt:null})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"2x16 pin header")," positioning"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbow_Cube_Installation_2.jpg",alt:null})),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"Rainbowduino")," properly connected to ",(0,i.kt)("strong",{parentName:"p"},"Rainbow Cube kit")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Attach a USB cable to Rainbowduino for programming.")),(0,i.kt)("h3",{id:"software-setup"},"Software Setup"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'In Arduino IDE --\x3e Tools --\x3e Board menu, select "Duemilanove or Diecimila".'),(0,i.kt)("li",{parentName:"ul"},"Download and install Rainbouduino 3.0 library from the resources section.")),(0,i.kt)("h3",{id:"programming"},"Programming"),(0,i.kt)("h4",{id:"using-with-rgb-led-cube"},"Using with RGB LED Cube"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Let us get started with a simple example with RGB LED Cube:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Download Rainbowduino v3.0 Library from resources."),(0,i.kt)("li",{parentName:"ul"},"Open Cube1.ino sketch (a copy of it is reproduced below):"),(0,i.kt)("li",{parentName:"ul"},"Compile and upload the sketch, a copy of which is reproduced below:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*\n Rainbowduino v3.0 Library examples:  Cube1\n\xa0\n Sets pixels on 3D plane (4x4x4 cube)\n*/\n\xa0\n#include <Rainbowduino.h>\n\xa0\nvoid setup()\n{\n  Rb.init(); //initialize Rainbowduino driver\n}\n\xa0\nvoid loop()\n{\n  //Set (Z,X,Y):(0,0,0) pixel BLUE\n  Rb.setPixelZXY(0,0,0,0x0000FF); //uses 24bit RGB color Code\n\xa0\n  //Set (Z,X,Y):(0,3,0) pixel RED\n  Rb.setPixelZXY(0,3,0,0xFF,0,0); //uses R, G and B color bytes\n\xa0\n  //Set (Z,X,Y):(3,0,3) pixel GREEN\n  Rb.setPixelZXY(3,0,3,0x00FF00); //uses 24bit RGB color Code\n}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbow_Cube1.jpg",alt:null})),(0,i.kt)("p",null,"Cube1.pde Demo"),(0,i.kt)("p",null,"Rainbowduino v3.0 library provides many APIs for using RGB LED cube. The following section lists and describes them\xa0:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"API"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.init(void)")),(0,i.kt)("td",{parentName:"tr",align:null},"Initialize Rainbowduino driver, this should be placed inside setup()")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.setPixelZXY(unsigned char z, unsigned char x, unsigned char y, unsigned char colorR, unsigned char colorG, unsigned char colorB)")),(0,i.kt)("td",{parentName:"tr",align:null},"This sets the pixel(z,x,y)by specifying each channel(color) with 8bit number.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.setPixelZXY(unsigned char z, unsigned char x, unsigned char y, uint32_t colorRGB)")),(0,i.kt)("td",{parentName:"tr",align:null},"This sets the pixel(z,x,y)by specifying a 24bit RGB color code.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.blankDisplay(void)")),(0,i.kt)("td",{parentName:"tr",align:null},"This function is used to blank all the LEDs.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"setPixelZXY() Demo")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To understand the (Z,X,Y) pixel addressing let us see another example. In this demo, the Layer 0 (i.e Z-0) is painted Green and Layer 3 is painted Blue.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*\n Rainbowduino v3.0 Library examples:  Cube2\n\xa0\n Sets pixels on 3D plane (4x4x4 cube)\n*/\n\xa0\n#include <Rainbowduino.h>\n\xa0\nvoid setup()\n{\n  Rb.init(); //initialize Rainbowduino driver\n}\n\xa0\nunsigned int z,x,y;\n\xa0\nvoid loop()\n{\n  for(x=0;x<4;x++)\n  {\n    for(y=0;y<4;y++)\n    {\n     //Paint layer 0 Green\n     Rb.setPixelZXY(0,x,y,0x00FF00); //uses 24bit RGB color Code\n    }\n  }  \n\xa0\n  for(x=0;x<4;x++)\n  {\n    for(y=0;y<4;y++)\n    {\n     //Paint layer 3 Blue\n     Rb.setPixelZXY(3,x,y,0x0000FF); //uses 24bit RGB color Code\n    }\n  }\n}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbow_Cube2.jpg",alt:null})),(0,i.kt)("p",null,"Cube2.pde Demo"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"setPixelZXY() Random Colors Demo")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In this demo, all LEDs are painted with some random color. After five seconds of delay, the whole cube is repainted with random colors.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    /*\n     Rainbowduino v3.0 Library examples:  Cube3\n\n     Sets pixels on 3D plane (4x4x4 cube)\n    */\n\n    #include <Rainbowduino.h>\n\n    void setup()\n    {\n      Rb.init(); //initialize Rainbowduino driver\n    }\n\n    unsigned int z,x,y;\n\n    void loop()\n    {\n     for(z=0;z<4;z++)\n     { \n      for(x=0;x<4;x++)\n      {\n        for(y=0;y<4;y++)\n        {\n         //Paint random colors\n         Rb.setPixelZXY(z,x,y,random(0xFF),random(0xFF),random(0xFF)); //uses R, G and B color bytes\n        }\n      }\n     }\n    delay(5000);\n    Rb.blankDisplay(); //Clear the LEDs (make all blank)\n    }\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbow_Cube3.jpg",alt:null})),(0,i.kt)("p",null,"Cube3.pde Demo"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Night Lamp / Mood Lamp Demo")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*\n\xa0\n Rainbowduino v3.0 Library examples\xa0: Mood Lamp \n\xa0\n*/\n\xa0\n#include <Rainbowduino.h>\n\xa0\n\xa0\n// HSV to RGB array \n\xa0\nunsigned char RED[64] = {255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,238,221,204,188,171,154,137,119,102,85,\n68,51,34,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,35,52};\n\xa0\nunsigned char GREEN[64] = {0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,255,255,255,255,255,255,255,255,255,255,255,\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,238,221,204,188,170,154,136,120,102,86,68,52,34,18,0,0,0,0};\n\xa0\nunsigned char BLUE[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,34,52,68,86,102,120,136,154,170,188,\n204,221,238,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255};\n\xa0\nvoid setup()\n{\n  Rb.init(); //initialize Rainbowduino driver\n}\n\xa0\nunsigned int z,x,y;\nvoid loop()\n{\n\xa0\nfor(z=0; z<64 ;z++)\n{\n for(x=0;x<8;x++)\n {\n    for(y=0;y<8;y++)\n    {\n     //Paint random colors\n     //Rb.setPixelZXY(z,x,y,RED[i],GREEN[i],BLUE[i]); //uses R, G and B color bytes\n     Rb.setPixelXY(x,y,RED[z],GREEN[z],BLUE[z]); //uses R, G and B color bytes\n    }\n }\n delay(100);\n}\n\xa0\nfor(z=63; z > 0 ;z--)\n{\n for(x=0;x<8;x++)\n {\n    for(y=0;y<8;y++)\n    {\n     //Paint random colors\n     //Rb.setPixelZXY(z,x,y,RED[i],GREEN[i],BLUE[i]); //uses R, G and B color bytes\n     Rb.setPixelXY(x,y,RED[z],GREEN[z],BLUE[z]); //uses R, G and B color bytes\n    }\n }\n delay(100);\n}\n\xa0\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Plasma Cube")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*\n\xa0\n Rainbowduino v3.0 Library examples\xa0: 3D Plasma\n\xa0\n*/\n\xa0\n#include <Rainbowduino.h>\n\xa0\n// HSV to RGB array\n\xa0\nunsigned char RED[64] = {255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,238,221,204,188,171,154,137,119,102,85,\n68,51,34,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,35,52};\n\xa0\nunsigned char GREEN[64] = {0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,255,255,255,255,255,255,255,255,255,255,255,\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,238,221,204,188,170,154,136,120,102,86,68,52,34,18,0,0,0,0};\n\xa0\nunsigned char BLUE[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,34,52,68,86,102,120,136,154,170,188,\n204,221,238,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255};\n\xa0\nunsigned char plasma[4][4][4];\n\xa0\nvoid setup()\n{\n  Rb.init(); //initialize Rainbowduino driver\n\xa0\n  for(unsigned char x = 0; x < 4; x++)\n  {\n    for(unsigned char y = 0; y < 4; y++)\n    {\n      for(unsigned char z = 0; z < 4; z++)\n       {\n        int color = int(32.0 + (32.0 * sin(x / 1.0))+ 32.0 + (32.0 * sin(y / 1.0)) + 32.0 + (32.0 * sin(z / 1.0))) / 3;\n        plasma[x][y][z] = color;      \n       }   \n    }\n  }\n}\n\xa0\nunsigned char x,y,z,colorshift=0;\n\xa0\nvoid loop()\n{\nfor(x=0;x<4;x++)  \n{\n for(y=0;y<4;y++)  \n {\n  for(z=0;z<4;z++)\n    {\n     Rb.setPixelZXY(z,x,y,(RED[plasma[x][y][z] + colorshift]) % 256,(GREEN[plasma[x][y][z] + colorshift]) % 256,(BLUE[plasma[x][y][z] + colorshift]) % 256); //uses R, G and B color bytes\n    }\n }\n}\n delay(100);\n colorshift=  colorshift + 1;\n}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Rainbow_Cube_Plasma_demo.jpg",alt:null})),(0,i.kt)("p",null,"PlasmaCube.pde Demo"),(0,i.kt)("h4",{id:"using-with-rgb-led-matrix"},"Using with RGB LED Matrix"),(0,i.kt)("p",null,"Rainbowduino v3.0 library provides many APIs for using RGB LED matrix. The following section lists and describes them\xa0:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"API"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.init(void)")),(0,i.kt)("td",{parentName:"tr",align:null},"Initialize Rainbowduino driver, this should be placed inside setup()")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.setPixelXY(unsigned char x, unsigned char y, unsigned char colorR, unsigned char colorG, unsigned char colorB)")),(0,i.kt)("td",{parentName:"tr",align:null},"This sets the pixel(x,y)by specifying each channel(color) with 8bit number.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.setPixelXY(unsigned char x, unsigned char y, uint32_t colorRGB)")),(0,i.kt)("td",{parentName:"tr",align:null},"This sets the pixel(x,y)by specifying a 24bit RGB color code.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.blankDisplay(void)")),(0,i.kt)("td",{parentName:"tr",align:null},"This function is used to blank all the LEDs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.drawChar(unsigned char ascii, unsigned int poX, unsigned int poY, uint32_t colorRGB)")),(0,i.kt)("td",{parentName:"tr",align:null},"Draw an ASCII character of uint32_t color at (poX,poY).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.drawCircle(int poX, int poY, int r, uint32_t color)")),(0,i.kt)("td",{parentName:"tr",align:null},"Draw a uint32_t color circle of radius r at (poX,poY).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.fillCircle(int poX, int poY, int r, uint32_t color)")),(0,i.kt)("td",{parentName:"tr",align:null},"Draw a fill uint32_t color circle of radius r at (poX,poY).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.drawLine(unsigned int x0,unsigned int y0,unsigned int x1,unsigned int y1, uint32_t color)")),(0,i.kt)("td",{parentName:"tr",align:null},"Draw a line from (x0,y0) to (x1,y1).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.drawVerticalLine(unsigned int poX, unsigned int poY,unsigned int length, uint32_t color)")),(0,i.kt)("td",{parentName:"tr",align:null},"Draw a horizontal line from (poX,poY) of length pixels.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.drawRectangle(unsigned int poX, unsigned int poY, unsigned int length,unsigned int width, uint32_t color)")),(0,i.kt)("td",{parentName:"tr",align:null},"Draw a rectangle line from (poX,poY) of length and width pixels.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Rb.fillRectangle(unsigned int poX, unsigned int poY, unsigned int length, unsigned int width, uint32_t color)")),(0,i.kt)("td",{parentName:"tr",align:null},"Draw a filled rectangle line from (poX,poY) of length and width pixels.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Shapes Demo")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    /*\n     Rainbowduino v3.0 Library examples:\n\n     Print Shapes on 2D plane (8x8 matrix)\n\n    */\n\n    #include <Rainbowduino.h>\n\n    void setup()\n    {\n      Rb.init();\n    }\n\n    unsigned char x,y,z;\n\n    void loop()\n    {\n\n         Rb.drawCircle(3, 4, 3, 0xFF0000); // draw a red circle of radius 3 at (3,4).\n         delay(1000);\n         Rb.blankDisplay();\n      \n         Rb.fillCircle(3, 4, 2, 0x0000FF); // draw a filled blue circle of radius 2 at (3,4).\n         delay(1000);\n         Rb.blankDisplay();\n\n         Rb.drawLine(0, 0, 7, 7, 0x00FF00); // draw a line from (0,0) to (7,7).\n         delay(1000);\n         Rb.blankDisplay();\n\n         Rb.drawVerticalLine(0, 0, 7, random(0xFFFFFF)); // draw a vertical line from (0,0) of length 7 pixels\n         delay(1000);\n         Rb.blankDisplay();\n\n         Rb.drawHorizontalLine(0, 0, 7, random(0xFFFFFF)); // draw a horizontal line from (0,0) of length 7 pixels\n         delay(1000);\n         Rb.blankDisplay();\n\n         Rb.drawRectangle(0, 0, 4, 6, random(0xFFFFFF)); // draw a rectangle line from (0,0) of length 4 and width 6 pixels\n         delay(1000);\n         Rb.blankDisplay();\n\n         Rb.fillRectangle(0, 0, 7, 7, random(0xFFFFFF)); // draw a filled rectangle line from (0,0) of length and width 7 pixels\n         delay(1000);\n         Rb.blankDisplay();\n      \n    }\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/Shapes.jpg",alt:null})),(0,i.kt)("p",null,"Shapes"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"drawChar Demo")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/*\n Rainbowduino v3.0 Library examples:\n\n Print Chars on 2D plane (8x8 matrix)\n\n*/\n\n#include <Rainbowduino.h>\n\nvoid setup()\n{\n  Rb.init();\n}\n\nunsigned char x,y,z;\n\nvoid loop()\n{\n\n  for(int i= 0x20; i<=0x7E; i++) //generates ASCII value of all printable characters\n  {\n     Rb.drawChar(i,0,1,random(0xFFFFFF)); \n     delay(500);\n     Rb.blankDisplay();\n  }\n  \n}\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/img/CharE.jpg",alt:null})),(0,i.kt)("h2",{id:"schematic-online-viewer"},"Schematic Online Viewer"),(0,i.kt)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/res/Rainbowduino_v3.0b_EagleCADFiles.zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/res/Rainbowduino_for_Arduino1.0.zip"},"Rainbowduino V3.0 Library for Arduino IDE 1.0 & above")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/res/SnakeGame20120601.zip"},"Rainbowduino3.0 SnakeGame Library for Arduino 1.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/res/Rainbowduino_v3.0b_EagleCADFiles.zip"},"Rainbowduino V3.0 Schematic and Layout in Eagle format")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/res/Rainbowduino_V3.0b.pdf"},"Rainbowduino V3.0 Schematic in PDF")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Rainbowduino_v3.0/res/MY9221_DS_1.0.pdf"},"MY9221 LED driver Datasheet"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Other related products,resources and projects:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.seeedstudio.com/depot/rainbow-cube-kit-assembled-p-998.html?cPath=138"},"Rainbow Cube Kit (Assembled)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.seeedstudio.com/depot/rainbow-cube-kit-rgb-4x4x4-rainbowduino-compatible-p-596.html?cPath=138"},"Rainbow Cube kit- RGB 4X4X4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.seeedstudio.com/depot/60mm-square-88-led-matrix-super-bright-rgb-p-113.html?cPath=163_165"},"60mm square 8*8 LED Matrix - super bright RGB"))),(0,i.kt)("h2",{id:"tech-support"},"Tech Support"),(0,i.kt)("p",null,"Please submit any technical issue into our ",(0,i.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),". ",(0,i.kt)("br",null)),(0,i.kt)("p",{style:{textAlign:"center"}},(0,i.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"}))))}p.isMDXComponent=!0}}]);