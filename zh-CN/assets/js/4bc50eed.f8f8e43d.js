"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8421],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>h});var n=i(67294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(i),g=a,h=u["".concat(s,".").concat(g)]||u[g]||m[g]||r;return i?n.createElement(h,l(l({ref:t},d),{},{components:i})):n.createElement(h,l({ref:t},d))}));function h(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=i[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}g.displayName="MDXCreateElement"},51066:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=i(87462),a=(i(67294),i(3905));const r={description:"Grove - 4-Digit Display",title:"Grove - 4-Digit Display",keywords:["Grove"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/7/2023",author:"shuxu hu"}},l=void 0,o={unversionedId:"Sensor/Grove/Grove_Accessories/Display/Grove-4-Digit_Display",id:"Sensor/Grove/Grove_Accessories/Display/Grove-4-Digit_Display",title:"Grove - 4-Digit Display",description:"Grove - 4-Digit Display",source:"@site/docs/Sensor/Grove/Grove_Accessories/Display/Grove-4-Digit_Display.md",sourceDirName:"Sensor/Grove/Grove_Accessories/Display",slug:"/Sensor/Grove/Grove_Accessories/Display/Grove-4-Digit_Display",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Accessories/Display/Grove-4-Digit_Display",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Sensor/Grove/Grove_Accessories/Display/Grove-4-Digit_Display.md",tags:[],version:"current",lastUpdatedBy:"shuxu hu",lastUpdatedAt:1673049600,formattedLastUpdatedAt:"2023\u5e741\u67087\u65e5",frontMatter:{description:"Grove - 4-Digit Display",title:"Grove - 4-Digit Display",keywords:["Grove"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/7/2023",author:"shuxu hu"}},sidebar:"ProductSidebar",previous:{title:"Grove - Node",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Sensors_Network/Standard_Protocol/Grove-Node"},next:{title:"Grove - 0.54 inch Red Dual Alphanumeric Display",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Accessories/Display/Grove-0.54_inch_Red_Dual_Alphanumeric_Display"}},s={},p=[{value:"Version",id:"version",level:2},{value:"Features",id:"features",level:2},{value:"Specifications",id:"specifications",level:2},{value:"Application Ideas",id:"application-ideas",level:2},{value:"Platforms Supported",id:"platforms-supported",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Play With Arduino",id:"play-with-arduino",level:3},{value:"Play with Codecraft",id:"play-with-codecraft",level:3},{value:"Hardware",id:"hardware",level:4},{value:"Software",id:"software",level:4},{value:"Play With Raspberry Pi (With Grove Base Hat for Raspberry Pi)",id:"play-with-raspberry-pi-with-grove-base-hat-for-raspberry-pi",level:3},{value:"Hardware",id:"hardware-1",level:4},{value:"Software",id:"software-1",level:4},{value:"Play With Raspberry Pi (with GrovePi_Plus)",id:"play-with-raspberry-pi-with-grovepi_plus",level:3},{value:"Play with TI LaunchPad",id:"play-with-ti-launchpad",level:3},{value:"Schematic Online Viewer",id:"schematic-online-viewer",level:2},{value:"Resources",id:"resources",level:2},{value:"Projects",id:"projects",level:2},{value:"Tech Support",id:"tech-support",level:2}],d={toc:p};function u(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/depot/grove-4digital-display-p-1198.html"},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove-4-Digit_Display/img/Grove-4_digit_display.jpg",alt:"pir",width:600,height:"auto"})))),(0,a.kt)("p",null,"Grove - 4-Digit Display module is a 12-pin module. In this module, we utilise a TM1637 to scale down the number of controlling pins to 2. That is to say, it controls both the content and the luminance via only 2 digital pins of Arduino or Seeeduino. For projects that require alpha-numeric display, this can be a nice choice."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/grove-4digital-display-p-1198.html"},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/common/Get_One_Now_Banner.png",alt:"pir",width:600,height:"auto"})))),(0,a.kt)("h2",{id:"version"},"Version"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Product Version"),(0,a.kt)("th",{parentName:"tr",align:null},"Changes"),(0,a.kt)("th",{parentName:"tr",align:null},"Released Date"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Grove - 4-Digit Display V1.0"),(0,a.kt)("td",{parentName:"tr",align:null},"Initial"),(0,a.kt)("td",{parentName:"tr",align:null},"May 2012")))),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"4 digit red alpha-numeric display"),(0,a.kt)("li",{parentName:"ul"},"Grove compatible interface (3.3V/5V)"),(0,a.kt)("li",{parentName:"ul"},"8 adjustable luminance levels")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"More details about Grove modules please refer to [Grove System](https://wiki.seeedstudio.com/Grove_System/)\n"))),(0,a.kt)("h2",{id:"specifications"},"Specifications"),(0,a.kt)("table",{border:"2",cellspacing:"0",width:"58.2%"},(0,a.kt)("tr",null,(0,a.kt)("th",{scope:"col"},"Item"),(0,a.kt)("th",{scope:"col"},"Min"),(0,a.kt)("th",{scope:"col"},"Typical"),(0,a.kt)("th",{scope:"col"},"Max"),(0,a.kt)("th",{scope:"col"},"Unit")),(0,a.kt)("tr",{align:"center"},(0,a.kt)("th",{scope:"row"},"Voltage"),(0,a.kt)("td",null,"3.3"),(0,a.kt)("td",null,"5.0"),(0,a.kt)("td",null,"5.5"),(0,a.kt)("td",null,"VDC")),(0,a.kt)("tr",{align:"center"},(0,a.kt)("th",{scope:"row"},"Current"),(0,a.kt)("td",null,"0.2"),(0,a.kt)("td",null,"27"),(0,a.kt)("td",null,"80"),(0,a.kt)("td",null,"mA")),(0,a.kt)("tr",{align:"center"},(0,a.kt)("th",{scope:"row"},"Dimensions"),(0,a.kt)("td",{colspan:"3"},"42x24x14"),(0,a.kt)("td",null,"mm")),(0,a.kt)("tr",{align:"center"},(0,a.kt)("th",{scope:"row"},"Net Weight"),(0,a.kt)("td",{colspan:"3"},"7\xb11"),(0,a.kt)("td",null,"g"))),(0,a.kt)("h2",{id:"application-ideas"},"Application Ideas"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time display"),(0,a.kt)("li",{parentName:"ul"},"Stopwatch"),(0,a.kt)("li",{parentName:"ul"},"Sensors' input display")),(0,a.kt)("h2",{id:"platforms-supported"},"Platforms Supported"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Arduino"),(0,a.kt)("th",{parentName:"tr",align:null},"Raspberry Pi"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/arduino_logo.jpg",alt:"pir",width:200,height:"auto"}))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/raspberry_pi_logo.jpg",alt:"pir",width:200,height:"auto"})))))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"The platforms mentioned above as supported is/are an indication of the module's software or theoritical compatibility. We only provide software library or code examples for Arduino platform in most cases. It is not possible to provide software library / demo code for all possible MCU platforms. Hence, users have to write their own software library.\n"))),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"If this is the first time you work with Arduino, we firmly recommend you to see [Getting Started with Arduino](https://wiki.seeedstudio.com/Getting_Started_with_Arduino/) before the start.\n"))),(0,a.kt)("h3",{id:"play-with-arduino"},"Play With Arduino"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Hardware")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1.")," Prepare the below stuffs:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Seeeduino V4.2"),(0,a.kt)("th",{parentName:"tr",align:null},"Base Shield"),(0,a.kt)("th",{parentName:"tr",align:null},"Grove-4-Digit Display"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/seeeduino_v4.2.jpg",alt:"pir",width:600,height:"auto"}))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/base_shield.jpg",alt:"pir",width:600,height:"auto"}))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/image/500px-Grove_-_4_digit_display_s.jpg",alt:"pir",width:600,height:"auto"})))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Seeeduino-V4.2-p-2517.html"},"Get One Now")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Base-Shield-V2-p-1378.html"},"Get One Now")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/grove-4digital-display-p-1198.html"},"Get One Now"))))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2.")," Connect Grove-4-Digit Display to ",(0,a.kt)("strong",{parentName:"li"},"D2")," port of Grove-Base Shield."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 3.")," Plug Grove - Base Shield into Seeeduino."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 4.")," Connect Seeeduino to PC via a USB cable.")),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/image/seeeduino_digital_led.jpg",alt:"pir",width:600,height:"auto"})),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"If we don't have Grove Base Shield, We also can directly connect Grove-4-Digit Display to Seeeduino as below. We also can plug Grove-4-Digit Display to other Grove digital port.\n"))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Seeeduino"),(0,a.kt)("th",{parentName:"tr",align:null},"Grove-4-Digit Display"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"5V"),(0,a.kt)("td",{parentName:"tr",align:null},"Red")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"GND"),(0,a.kt)("td",{parentName:"tr",align:null},"Black")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"D3"),(0,a.kt)("td",{parentName:"tr",align:null},"White (DIO)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"D2"),(0,a.kt)("td",{parentName:"tr",align:null},"Yellow(CLK)")))),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"The Grove-4-Digit Display includes 4 pins, GND, VCC, DIO, CLK. We can connect DIO and CLK to any digital pin. It is not I2C protocol.   \n"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Software")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1.")," Download the  ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Grove_4Digital_Display/archive/master.zip"},"Grove-4-Digit Display Library")," and ",(0,a.kt)("a",{parentName:"li",href:"https://code.google.com/p/arduino-timerone/downloads/detail?name=TimerOne-v9.zip&can=2&q="},"TimerOne Library"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2.")," Refer ",(0,a.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/How_to_install_Arduino_Library"},"How to install library")," to install library for Arduino."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 3.")," Follow below instructions to select code into Arduino IDE and upload. If you do not know how to upload the code, please check ",(0,a.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/Upload_Code/"},"how to upload code"),". There are 3 examples as below.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Clock Display"),(0,a.kt)("li",{parentName:"ul"},"Number Flow"),(0,a.kt)("li",{parentName:"ul"},"Stop Watch")))),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/image/arduino_example.jpg",alt:"pir",width:600,height:"auto"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 4.")," We will see the Grove-4-Digit Display being turned on.")),(0,a.kt)("h3",{id:"play-with-codecraft"},"Play with Codecraft"),(0,a.kt)("h4",{id:"hardware"},"Hardware"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1.")," Connect Grove - 4-Digit Diaplsy to port D2 in a Base Shield"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2.")," Plug the Base Shield to your Seeeduino/Arduino."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3.")," Link Seeeduino/Arduino to your PC via an USB cable."),(0,a.kt)("h4",{id:"software"},"Software"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1.")," Open ",(0,a.kt)("a",{parentName:"p",href:"https://ide.chmakered.com/"},"Codecraft"),", add Arduino support, and drag a main procedure to working area."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"If this is your first time using Codecraft, see also [Guide for Codecraft using Arduino](https://wiki.seeedstudio.com/Guide_for_Codecraft_using_Arduino/).\n"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2.")," Drag blocks as picture below or open the cdc file which can be downloaded at the end of this page."),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/image/4-Digit_Display.png",alt:"pir",width:600,height:"auto"})),(0,a.kt)("p",null,"Upload the program to your Arduino/Seeeduino."),(0,a.kt)("admonition",{type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"When the code finishes uploaded, you will see number flowing from 0 to 9.\n"))),(0,a.kt)("h3",{id:"play-with-raspberry-pi-with-grove-base-hat-for-raspberry-pi"},"Play With Raspberry Pi (With Grove Base Hat for Raspberry Pi)"),(0,a.kt)("h4",{id:"hardware-1"},"Hardware"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1"),". Things used in this project:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Raspberry pi"),(0,a.kt)("th",{parentName:"tr",align:null},"Grove Base Hat for RasPi"),(0,a.kt)("th",{parentName:"tr",align:null},"Grove - 4 Digit Display"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/rasp.jpg",alt:"pir",width:600,height:"auto"}))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_Base_Hat_for_Raspberry_Pi/img/thumbnail.jpg",alt:"pir",width:600,height:"auto"}))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/image/500px-Grove_-_4_digit_display_s.jpg",alt:"pir",width:600,height:"auto"})))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Raspberry-Pi-3-Model-B-p-2625.html"},"Get ONE Now")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi-p-3186.html"},"Get ONE Now")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/grove-4digital-display-p-1198.html"},"Get ONE Now"))))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2"),". Plug the Grove Base Hat into Raspberry Pi."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 3"),". Connect the 4-digit display to port 12 of the Base Hat."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 4"),". Connect the Raspberry Pi to PC through USB cable.")),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/image/Digit_Hat.jpg",alt:"pir",width:600,height:"auto"})),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"For step 3 you are able to connect the digit to **any GPIO Port** but make sure you change the command with the corresponding port number.\n"))),(0,a.kt)("h4",{id:"software-1"},"Software"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1"),". Follow ",(0,a.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/#installation"},"Setting Software")," to configure the development environment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2"),". Download the source file by cloning the grove.py library. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd ~\ngit clone https://github.com/Seeed-Studio/grove.py\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 3"),". Excute below commands to run the code.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd grove.py/grove\npython grove_4_digit_display.py 12 13\n\n")),(0,a.kt)("p",null,"Following is the grove_4_digit_display.py code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"\nimport sys\nimport time\nfrom grove.gpio import GPIO\n\n\ncharmap = {\n    '0': 0x3f,\n    '1': 0x06,\n    '2': 0x5b,\n    '3': 0x4f,\n    '4': 0x66,\n    '5': 0x6d,\n    '6': 0x7d,\n    '7': 0x07,\n    '8': 0x7f,\n    '9': 0x6f,\n    'A': 0x77,\n    'B': 0x7f,\n    'b': 0x7C,\n    'C': 0x39,\n    'c': 0x58,\n    'D': 0x3f,\n    'd': 0x5E,\n    'E': 0x79,\n    'F': 0x71,\n    'G': 0x7d,\n    'H': 0x76,\n    'h': 0x74,\n    'I': 0x06,\n    'J': 0x1f,\n    'K': 0x76,\n    'L': 0x38,\n    'l': 0x06,\n    'n': 0x54,\n    'O': 0x3f,\n    'o': 0x5c,\n    'P': 0x73,\n    'r': 0x50,\n    'S': 0x6d,\n    'U': 0x3e,\n    'V': 0x3e,\n    'Y': 0x66,\n    'Z': 0x5b,\n    '-': 0x40,\n    '_': 0x08,\n    ' ': 0x00\n}\n\nADDR_AUTO = 0x40\nADDR_FIXED = 0x44\nSTARTADDR = 0xC0\nBRIGHT_DARKEST = 0\nBRIGHT_DEFAULT = 2\nBRIGHT_HIGHEST = 7\n\n\nclass Grove4DigitDisplay(object):\n    colon_index = 1\n\n    def __init__(self, clk, dio, brightness=BRIGHT_DEFAULT):\n        self.brightness = brightness\n\n        self.clk = GPIO(clk, direction=GPIO.OUT)\n        self.dio = GPIO(dio, direction=GPIO.OUT)\n        self.data = [0] * 4\n        self.show_colon = False\n\n    def clear(self):\n        self.show_colon = False\n        self.data = [0] * 4\n        self._show()\n\n    def show(self, data):\n        if type(data) is str:\n            for i, c in enumerate(data):\n                if c in charmap:\n                    self.data[i] = charmap[c]\n                else:\n                    self.data[i] = 0\n                if i == self.colon_index and self.show_colon:\n                    self.data[i] |= 0x80\n                if i == 3:\n                    break\n        elif type(data) is int:\n            self.data = [0, 0, 0, charmap['0']]\n            if data < 0:\n                negative = True\n                data = -data\n            else:\n                negative = False\n            index = 3\n            while data != 0:\n                self.data[index] = charmap[str(data % 10)]\n                index -= 1\n                if index < 0:\n                    break\n                data = int(data / 10)\n\n            if negative:\n                if index >= 0:\n                    self.data[index] = charmap['-']\n                else:\n                    self.data = charmap['_'] + [charmap['9']] * 3\n        else:\n            raise ValueError('Not support {}'.format(type(data)))\n        self._show()\n\n    def _show(self):\n        with self:\n            self._transfer(ADDR_AUTO)\n\n        with self:\n            self._transfer(STARTADDR)\n            for i in range(4):\n                self._transfer(self.data[i])\n\n        with self:\n            self._transfer(0x88 + self.brightness)\n\n    def update(self, index, value):\n        if index < 0 or index > 4:\n            return\n\n        if value in charmap:\n            self.data[index] = charmap[value]\n        else:\n            self.data[index] = 0\n\n        if index == self.colon_index and self.show_colon:\n            self.data[index] |= 0x80\n\n        with self:\n            self._transfer(ADDR_FIXED)\n\n        with self:\n            self._transfer(STARTADDR | index)\n            self._transfer(self.data[index])\n\n        with self:\n            self._transfer(0x88 + self.brightness)\n\n\n    def set_brightness(self, brightness):\n        if brightness > 7:\n            brightness = 7\n\n        self.brightness = brightness\n        self._show()\n\n    def set_colon(self, enable):\n        self.show_colon = enable\n        if self.show_colon:\n            self.data[self.colon_index] |= 0x80\n        else:\n            self.data[self.colon_index] &= 0x7F\n        self._show()\n\n    def _transfer(self, data):\n        for _ in range(8):\n            self.clk.write(0)\n            if data & 0x01:\n                self.dio.write(1)\n            else:\n                self.dio.write(0)\n            data >>= 1\n            time.sleep(0.000001)\n            self.clk.write(1)\n            time.sleep(0.000001)\n\n        self.clk.write(0)\n        self.dio.write(1)\n        self.clk.write(1)\n        self.dio.dir(GPIO.IN)\n\n        while self.dio.read():\n            time.sleep(0.001)\n            if self.dio.read():\n                self.dio.dir(GPIO.OUT)\n                self.dio.write(0)\n                self.dio.dir(GPIO.IN)\n        self.dio.dir(GPIO.OUT)\n\n    def _start(self):\n        self.clk.write(1)\n        self.dio.write(1)\n        self.dio.write(0)\n        self.clk.write(0)\n\n    def _stop(self):\n        self.clk.write(0)\n        self.dio.write(0)\n        self.clk.write(1)\n        self.dio.write(1)\n\n    def __enter__(self):\n        self._start()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self._stop()\n\n\nGrove = Grove4DigitDisplay\n\n\ndef main():\n    if len(sys.argv) < 3:\n        print('Usage: {} clk dio'.format(sys.argv[0]))\n        sys.exit(1)\n\n    display = Grove4DigitDisplay(int(sys.argv[1]), int(sys.argv[2]))\n\n    count = 0\n    while True:\n        t = time.strftime(\"%H%M\", time.localtime(time.time()))\n        display.show(t)\n        display.set_colon(count & 1)\n        count += 1\n        time.sleep(1)\n\n\nif __name__ == '__main__':\n    main()\n\n")),(0,a.kt)("admonition",{type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"If everything goes well, the 4-digit display will show the current time.\n"))),(0,a.kt)("p",null,"You can quit this program by simply press ++ctrl+c++."),(0,a.kt)("h3",{id:"play-with-raspberry-pi-with-grovepi_plus"},"Play With Raspberry Pi (with GrovePi_Plus)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Hardware")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1.")," Prepare the below stuffs:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Raspberry pi"),(0,a.kt)("th",{parentName:"tr",align:null},"GrovePi_Plus"),(0,a.kt)("th",{parentName:"tr",align:null},"Grove-4-Digit Display"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/rasp.jpg",alt:"pir",width:600,height:"auto"}))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/Grovepi%2B.jpg",alt:"pir",width:600,height:"auto"}))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("p",null,(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/image/500px-Grove_-_4_digit_display_s.jpg",alt:"pir",width:600,height:"auto"})))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Raspberry-Pi-3-Model-B-p-2625.html"},"Get One Now")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/GrovePi%2B-p-2241.html"},"Get One Now")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/grove-4digital-display-p-1198.html"},"Get One Now"))))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2.")," Plug the GrovePi_Plus into Raspberry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 3.")," Connect Grove-4-Digit Display to ",(0,a.kt)("strong",{parentName:"li"},"D5")," port of GrovePi_Plus."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 4.")," Connect the Raspberry to PC through USB cable.")),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/image/rpi_digital_led.jpg",alt:"pir",width:600,height:"auto"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Software")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1.")," Follow ",(0,a.kt)("a",{parentName:"li",href:"https://www.dexterindustries.com/GrovePi/get-started-with-the-grovepi/setting-software/"},"Setting Software")," to configure the development environment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2.")," Git clone the Github repository.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd ~\ngit clone https://github.com/DexterInd/GrovePi.git\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 3.")," Excute below commands to monitor the loudness.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"cd ~/GrovePi/Software/Python\npython grove_4_digit_display.py\n")),(0,a.kt)("p",null,"Here is the grove_4_digit_display.py code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# NOTE: 4x red 7 segment display with colon and 8 luminance levels, but no decimal points\n\nimport time\nimport grovepi\n\n# Connect the Grove 4 Digit Display to digital port D5\n# CLK,DIO,VCC,GND\ndisplay = 5\ngrovepi.pinMode(display,"OUTPUT")\n\n# If you have an analog sensor connect it to A0 so you can monitor it below\nsensor = 0\ngrovepi.pinMode(sensor,"INPUT")\n\ntime.sleep(.5)\n\n# 4 Digit Display methods\n# grovepi.fourDigit_init(pin)\n# grovepi.fourDigit_number(pin,value,leading_zero)\n# grovepi.fourDigit_brightness(pin,brightness)\n# grovepi.fourDigit_digit(pin,segment,value)\n# grovepi.fourDigit_segment(pin,segment,leds)\n# grovepi.fourDigit_score(pin,left,right)\n# grovepi.fourDigit_monitor(pin,analog,duration)\n# grovepi.fourDigit_on(pin)\n# grovepi.fourDigit_off(pin)\n\nwhile True:\n    try:\n        print ("Test 1) Initialise")\n        grovepi.fourDigit_init(display)\n        time.sleep(.5)\n\n        print ("Test 2) Set brightness")\n        for i in range(0,8):\n            grovepi.fourDigit_brightness(display,i)\n            time.sleep(.2)\n        time.sleep(.3)\n\n        # set to lowest brightness level\n        grovepi.fourDigit_brightness(display,0)\n        time.sleep(.5)\n\n        print ("Test 3) Set number without leading zeros")\n        leading_zero = 0\n        grovepi.fourDigit_number(display,1,leading_zero)\n        time.sleep(.5)\n        grovepi.fourDigit_number(display,12,leading_zero)\n        time.sleep(.5)\n        grovepi.fourDigit_number(display,123,leading_zero)\n        time.sleep(.5)\n        grovepi.fourDigit_number(display,1234,leading_zero)\n        time.sleep(.5)\n\n        print ("Test 4) Set number with leading zeros")\n        leading_zero = 1\n        grovepi.fourDigit_number(display,5,leading_zero)\n        time.sleep(.5)\n        grovepi.fourDigit_number(display,56,leading_zero)\n        time.sleep(.5)\n        grovepi.fourDigit_number(display,567,leading_zero)\n        time.sleep(.5)\n        grovepi.fourDigit_number(display,5678,leading_zero)\n        time.sleep(.5)\n\n        print ("Test 5) Set individual digit")\n        grovepi.fourDigit_digit(display,0,2)\n        grovepi.fourDigit_digit(display,1,6)\n        grovepi.fourDigit_digit(display,2,9)\n        grovepi.fourDigit_digit(display,3,15) # 15 = F\n        time.sleep(.5)\n\n        print ("Test 6) Set individual segment")\n        grovepi.fourDigit_segment(display,0,118) # 118 = H\n        grovepi.fourDigit_segment(display,1,121) # 121 = E\n        grovepi.fourDigit_segment(display,2,118) # 118 = H\n        grovepi.fourDigit_segment(display,3,121) # 121 = E\n        time.sleep(.5)\n\n        grovepi.fourDigit_segment(display,0,57) # 57 = C\n        grovepi.fourDigit_segment(display,1,63) # 63 = O\n        grovepi.fourDigit_segment(display,2,63) # 63 = O\n        grovepi.fourDigit_segment(display,3,56) # 56 = L\n        time.sleep(.5)\n\n        print ("Test 7) Set score")\n        grovepi.fourDigit_score(display,0,0)\n        time.sleep(.2)\n        grovepi.fourDigit_score(display,1,0)\n        time.sleep(.2)\n        grovepi.fourDigit_score(display,1,1)\n        time.sleep(.2)\n        grovepi.fourDigit_score(display,1,2)\n        time.sleep(.2)\n        grovepi.fourDigit_score(display,1,3)\n        time.sleep(.2)\n        grovepi.fourDigit_score(display,1,4)\n        time.sleep(.2)\n        grovepi.fourDigit_score(display,1,5)\n        time.sleep(.5)\n\n        print ("Test 8) Set time")\n        grovepi.fourDigit_score(display,12,59)\n        time.sleep(.5)\n\n        print ("Test 9) Monitor analog pin")\n        seconds = 10\n        grovepi.fourDigit_monitor(display,sensor,seconds)\n        time.sleep(.5)\n\n        print ("Test 10) Switch all on")\n        grovepi.fourDigit_on(display)\n        time.sleep(.5)\n\n        print ("Test 11) Switch all off")\n        grovepi.fourDigit_off(display)\n        time.sleep(.5)\n\n    except KeyboardInterrupt:\n        grovepi.fourDigit_off(display)\n        break\n    except IOError:\n        print ("Error")\n\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 4.")," We will see the Grove-4-Digit Display as below. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"pi@raspberrypi:~/GrovePi/Software/Python $ python grove_4_digit_display.py \nTest 1) Initialise\nTest 2) Set brightness\nTest 3) Set number without leading zeros\nTest 4) Set number with leading zeros\nTest 5) Set individual digit\nTest 6) Set individual segment\nTest 7) Set score\nTest 8) Set time\nTest 9) Monitor analog pin\nTest 10) Switch all on\nTest 11) Switch all off\n")),(0,a.kt)("h3",{id:"play-with-ti-launchpad"},"Play with TI LaunchPad"),(0,a.kt)("p",null,"Displaying the Numbers (4-Digital-Display)"),(0,a.kt)("p",null,"This example demonstrates how to display some digital numbers using a Grove-4-Digital Display."),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Grove-4-Digit_Display/img/4_digital_display.jpg",alt:"pir",width:600,height:"auto"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'/*\n * TM1637.cpp\n * A library for the 4 digit display\n */\n#include "TM1637.h"\n#define CLK 39 //pins definitions for TM1637 and can be changed to other ports\n#define DIO 38\nTM1637 tm1637(CLK,DIO);\nvoid setup()\n{\n    tm1637.init();\n    tm1637.set(BRIGHT_TYPICAL);//BRIGHT_TYPICAL = 2,BRIGHT_DARKEST = 0,BRIGHTEST = 7;\n}\nvoid loop()\n{\n    int8_t NumTab[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};//0~9,A,b,C,d,E,F\n    int8_t ListDisp[4];\n    unsigned char i = 0;\n    unsigned char count = 0;\n    delay(150);\n    while(1)\n    {\n        i = count;\n        count ++;\n        if(count == sizeof(NumTab)) count = 0;\n        for(unsigned char BitSelect = 0;BitSelect < 4;BitSelect ++)\n        {\n            ListDisp[BitSelect] = NumTab[i];\n            i ++;\n            if(i == sizeof(NumTab)) i = 0;\n        }\n        tm1637.display(0,ListDisp[0]);\n        tm1637.display(1,ListDisp[1]);\n        tm1637.display(2,ListDisp[2]);\n        tm1637.display(3,ListDisp[3]);\n        delay(300);\n    }\n}\n')),(0,a.kt)("h2",{id:"schematic-online-viewer"},"Schematic Online Viewer"),(0,a.kt)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/resource/Grove%20-%204-Digit%20Display%20V1.0%20eagle%20files.zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"[Eagle&PDF]")," ",(0,a.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/resource/Grove%20-%204-Digit%20Display%20V1.0%20eagle%20files.zip"},"Grove-4-Digit Display V1.0 Schematic")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"[Library]")," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Grove_4Digital_Display"},"4-Digit Display library")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"[Library]")," ",(0,a.kt)("a",{parentName:"li",href:"https://code.google.com/p/arduino-timerone/downloads/detail?name=TimerOne-v9.zip&can=2&q="},"TimerOne library")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"[Library]")," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Four_Digit_Display_Suli"},"Four-Digit Display Suli Library")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"[Library]")," ",(0,a.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_4_Digit_Display/resource/4-Digit%20Display.zip"},"CodeCraft Code")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"[Datasheet]")," ",(0,a.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove-4-Digit_Display/res/TM1637_datasheet.pdf"},"TM1637 datasheet")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"[More Reading]")," ",(0,a.kt)("a",{parentName:"li",href:"https://www.instructables.com/id/DIY-a-Wooden-Laser-Gun-As-a-Xmas-Present-for-Your-/"},"The Wooden Laser Gun"))),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Seeeduino_Lotus/img/gun.jpg",alt:"pir",width:600,height:"auto"})),(0,a.kt)("p",null,"Inspired by OVERWATCH, we have made a very cool Wooden Laser Gun toy for fun these day!"),(0,a.kt)("p",null,'The Wooden Laser Gun and the Gun Target are all based on an Arduino board called Seeeduino Lotus. The laser emitter on the Laser Gun is controlled to fire laser pulse to "activate" the Gun Target. And there are 3 light sensors on the Gun Target to detect the laser pulse. It seems very simple right? If you are interested in our project, please make one for yourself or your child! It\'s worth to spend one day DIY it as a Xmas present.    '),(0,a.kt)("h2",{id:"projects"},"Projects"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"MSP430 Alarm Clock with Grove Modules"),": Create your own alarm clock using the MSP430F5529 LaunchPad and the SeeedStudio Grove Modules."),(0,a.kt)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/carlosventura/alarm-clock-with-grove-modules-e4e9f1/embed",width:"350"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Clock - Grove 4-digit Display Using Photon"),":\u3000Your first clock with 4 components, based on Grove and TM1637"),(0,a.kt)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/ingo-lohs/clock-grove-4-digit-display-using-photon-7c4369/embed",width:"350"}),(0,a.kt)("h2",{id:"tech-support"},"Tech Support"),(0,a.kt)("p",null,"Please do not hesitate to submit the issue into our ",(0,a.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,a.kt)("br",null),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"}))))}u.isMDXComponent=!0}}]);