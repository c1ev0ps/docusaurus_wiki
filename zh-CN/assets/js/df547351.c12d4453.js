"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[78170],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),s=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,k=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return a?r.createElement(k,o(o({ref:t},c),{},{components:a})):r.createElement(k,o({ref:t},c))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:n,o[1]=p;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},46454:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=a(87462),n=(a(67294),a(3905));const i={description:"ReSpeaker 6-Mic Circular Array Kit for Raspberry Pi",title:"ReSpeaker 6-Mic Circular Array Kit for Raspberry Pi",keywords:["reSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/11/2023",author:"jianjing Huang"}},o=void 0,p={unversionedId:"Seeed_Elderly/reSpeaker/ReSpeaker_6-Mic_Circular_Array_kit_for_Raspberry_Pi",id:"Seeed_Elderly/reSpeaker/ReSpeaker_6-Mic_Circular_Array_kit_for_Raspberry_Pi",title:"ReSpeaker 6-Mic Circular Array Kit for Raspberry Pi",description:"ReSpeaker 6-Mic Circular Array Kit for Raspberry Pi",source:"@site/docs/Seeed_Elderly/reSpeaker/ReSpeaker_6-Mic_Circular_Array_kit_for_Raspberry_Pi.md",sourceDirName:"Seeed_Elderly/reSpeaker",slug:"/Seeed_Elderly/reSpeaker/ReSpeaker_6-Mic_Circular_Array_kit_for_Raspberry_Pi",permalink:"/docusaurus_wiki/zh-CN/Seeed_Elderly/reSpeaker/ReSpeaker_6-Mic_Circular_Array_kit_for_Raspberry_Pi",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Seeed_Elderly/reSpeaker/ReSpeaker_6-Mic_Circular_Array_kit_for_Raspberry_Pi.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1673395200,formattedLastUpdatedAt:"2023\u5e741\u670811\u65e5",frontMatter:{description:"ReSpeaker 6-Mic Circular Array Kit for Raspberry Pi",title:"ReSpeaker 6-Mic Circular Array Kit for Raspberry Pi",keywords:["reSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/11/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"ReSpeaker 4-Mic Linear Array Kit",permalink:"/docusaurus_wiki/zh-CN/Seeed_Elderly/reSpeaker/ReSpeaker_4-Mic_Linear_Array_Kit_for_Raspberry_Pi"},next:{title:"ReSpeaker Core",permalink:"/docusaurus_wiki/zh-CN/Seeed_Elderly/reSpeaker/ReSpeaker_Core"}},l={},s=[{value:"Features",id:"features",level:2},{value:"Specification",id:"specification",level:2},{value:"Applications",id:"applications",level:2},{value:"Hardware Overview",id:"hardware-overview",level:2},{value:"Assembly Drawing",id:"assembly-drawing",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Hardware",id:"hardware",level:3},{value:"Software",id:"software",level:3},{value:"Play with LEDs",id:"play-with-leds",level:3},{value:"Realtime Sound Source Localization and Tracking",id:"realtime-sound-source-localization-and-tracking",level:2},{value:"Extract Voice",id:"extract-voice",level:2},{value:"DOA",id:"doa",level:2},{value:"DOA with Keywords",id:"doa-with-keywords",level:3},{value:"Buton",id:"buton",level:2},{value:"FAQ",id:"faq",level:2},{value:"Resources",id:"resources",level:2},{value:"Tech Support",id:"tech-support",level:2}],c={toc:s};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/products/107990055/01.png",alt:"enter image description here"})),(0,n.kt)("p",null,"Seeed\u2019s ReSpeaker 6-Mic Circular Array Kit\nis an extension board, aka HAT designed for\nRaspberry Pi. It's a circular microphone\narray kit, comes with six microphones and\ndesigned for AI and voice applications. That\nmeans you can build a more powerful and\nflexible voice product with Raspberry Pi\nwhich can integrate Amazon Alexa Voice\nService, Google Assistant, and so on."),(0,n.kt)("p",null,"ReSpeaker 6-Mic Circular Array Kit for\nRaspberry Pi consists of two boards, one is\nvoice accessory HAT, another is six\nmicrophones circular array."),(0,n.kt)("p",null,"ReSpeaker 6-Mic Circular Array Kit for\nRaspberry Pi support 8 input & 8 output\nchannels in Raspbian system. The first 6\ninput channel for microphone recording,\nrest of 2 input channel are echo channel of\nplayback. The first 2 output channel for\nplaying, rest of 6 output channel are\ndummy."),(0,n.kt)("iframe",{width:"800",height:"450",src:"https://www.youtube.com/embed/NxZx9nz67Bc",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,n.kt)("p",{style:{textAlign:"center"}},(0,n.kt)("a",{href:"https://www.seeedstudio.com/ReSpeaker-6-Mic-Circular-Array-Kit-for-Raspberry-Pi-p-3067.html",target:"_blank"},(0,n.kt)("img",{src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/300px-Get_One_Now_Banner-ragular.png"}))),(0,n.kt)("h2",{id:"features"},"Features"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"2 ADC chips and 1 DAC chip"),(0,n.kt)("li",{parentName:"ul"},"8 input and 8 output channels"),(0,n.kt)("li",{parentName:"ul"},"Six microphones array"),(0,n.kt)("li",{parentName:"ul"},"Grove support"),(0,n.kt)("li",{parentName:"ul"},"Raspberry Pi compatible(Support Raspberry Pi Zero and Zero W, Raspberry Pi B+, Raspberry Pi 2 B, Raspberry Pi 3 B, Raspberry Pi 3 B+, Raspberry Pi 3 A+ and Raspberry Pi 4)"),(0,n.kt)("li",{parentName:"ul"},"Headset and speaker voice output")),(0,n.kt)("h2",{id:"specification"},"Specification"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"2 x X-Power AC108 ADC"),(0,n.kt)("li",{parentName:"ul"},"6 x high performance microphones"),(0,n.kt)("li",{parentName:"ul"},"1 x X-Power AC101 DAC"),(0,n.kt)("li",{parentName:"ul"},"Voice output:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"3.5mm headset audio jack"),(0,n.kt)("li",{parentName:"ul"},"Speaker jack"))),(0,n.kt)("li",{parentName:"ul"},"Compatible with Raspberry Pi 40-pin headers"),(0,n.kt)("li",{parentName:"ul"},"Microphones: MSM321A3729H9CP"),(0,n.kt)("li",{parentName:"ul"},"Sensitivity: -22 dBFS (Omnidirectional)"),(0,n.kt)("li",{parentName:"ul"},"SNR: 59 dB"),(0,n.kt)("li",{parentName:"ul"},"Max Sample Rate: 48Khz")),(0,n.kt)("h2",{id:"applications"},"Applications"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Smart speaker"),(0,n.kt)("li",{parentName:"ul"},"Intelligent voice assistant systems"),(0,n.kt)("li",{parentName:"ul"},"Voice recorders"),(0,n.kt)("li",{parentName:"ul"},"Voice conferencing system"),(0,n.kt)("li",{parentName:"ul"},"Meeting communicating equipment"),(0,n.kt)("li",{parentName:"ul"},"Voice interacting robot"),(0,n.kt)("li",{parentName:"ul"},"Car voice assistant"),(0,n.kt)("li",{parentName:"ul"},"Other scenarios need voice command")),(0,n.kt)("h2",{id:"hardware-overview"},"Hardware Overview"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"System Diagram")),(0,n.kt)("a",{href:"https://files.seeedstudio.com/wiki/ReSpeaker_4-Mics_Linear_Array_Kit/img/voice_hat_acc.png",target:"_blank"},(0,n.kt)("img",{src:"https://files.seeedstudio.com/wiki/ReSpeaker_4-Mics_Linear_Array_Kit/img/voice_hat_acc.png"})),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Interface")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker_6-Mics_Circular_Array_kit_for_Raspberry_Pi/img/hardware.jpg",alt:null})),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"After connecting, be sure to use a multimeter to determine if the conduction of the circuit is as indicated in the figure above.")),(0,n.kt)("h2",{id:"assembly-drawing"},"Assembly Drawing"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Bazaar_file/107990055/img/ab.png",alt:null})),(0,n.kt)("p",{style:{textAlign:"center"}},(0,n.kt)("img",{src:"https://files.seeedstudio.com/wiki/Bazaar_file/107990055/img/6-mic_array_assemble.gif"})),(0,n.kt)("h2",{id:"getting-started"},"Getting Started"),(0,n.kt)("h3",{id:"hardware"},"Hardware"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Prerequisites")),(0,n.kt)("p",null,"ReSpeaker 6-Mic Circular Array    x1"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Raspberry-Pi-3-Model-B%2B-p-3037.html?utm_source=homepage&utm_medium=homepagebanner&utm_campaign=hp_0605"},"Raspberry Pi 3B or 3B+"),"              x1"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Micro-USB-Cable-48cm-p-1475.html"},"Micro-USB Cable"),"                     x1"),(0,n.kt)("p",null,"PC                                  x1"),(0,n.kt)("p",null,"Earphone or Speaker                 x1"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Actually the ReSpeaker 6-Mic Circular Array support Raspberry Pi Zero, Raspberry Pi 1 B+, Raspberry Pi 2 B, Raspberry Pi 3 B, Raspberry Pi 3 model B+ , Raspberry Pi 3 A+ and Raspberry Pi 4 in this wiki we are using Raspberry Pi 3.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Connection")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Step 1."),"  Connect the ",(0,n.kt)("em",{parentName:"p"},"ReSpeaker Voice Accessory HAT")," with ",(0,n.kt)("em",{parentName:"p"},"ReSpeaker 6-Mic circular Array")," via the Ribbon Cable"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Step 2."),"  Plug the ",(0,n.kt)("em",{parentName:"p"},"ReSpeaker Voice Accessory HAT")," into the ",(0,n.kt)("em",{parentName:"p"},"Raspberry Pi")," via the 40 Pin GPIO"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Step 3."),"  Plug the ",(0,n.kt)("em",{parentName:"p"},"earphone")," into the ",(0,n.kt)("em",{parentName:"p"},"3.5mm headset audio jack")," or plug the ",(0,n.kt)("em",{parentName:"p"},"speaker")," into the ",(0,n.kt)("em",{parentName:"p"},"JST 2.0 speaker jack")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Step 4."),"  Connect the ",(0,n.kt)("em",{parentName:"p"},"Raspberry Pi")," with the ",(0,n.kt)("em",{parentName:"p"},"PC")," via the micro-USB cable"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker_6-Mics_Circular_Array_kit_for_Raspberry_Pi/img/6-mic.jpg",alt:"Pics here"})),(0,n.kt)("h3",{id:"software"},"Software"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Prerequisites")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Plan A")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html"},"PUTTY")),(0,n.kt)("p",null,"You need to use ",(0,n.kt)("em",{parentName:"p"},"Putty")," or other ",(0,n.kt)("em",{parentName:"p"},"ssh")," tools to connect with your raspberry pi. Before started, please make sure:"),(0,n.kt)("p",null,"1- Open ",(0,n.kt)("em",{parentName:"p"},"ssh")," fuction of your pi to let the putty in. If you do not know how to open ",(0,n.kt)("em",{parentName:"p"},"ssh"),", please google ",(0,n.kt)("inlineCode",{parentName:"p"},"how to setup ssh raspberry pi")),(0,n.kt)("p",null,"2- Your raspberry pi and your PC are working on the same WiFi net. If you do not know how to config WiFi, please google ",(0,n.kt)("inlineCode",{parentName:"p"},"how to setup wifi raspberry pi")),(0,n.kt)("p",null,"3- Get the ip address of your raspberry pi, if you do not know how to get the ip address please refer to ",(0,n.kt)("a",{parentName:"p",href:"https://www.raspberrypi.org/documentation/remote-access/ip-address.md"},"raspberry offical documentation")),(0,n.kt)("p",null,"4- Use the ip address to connect the raspberry pi with your PC via putty ssh serve."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker_6-Mics_Circular_Array_kit_for_Raspberry_Pi/img/putty.png",alt:"pic"})),(0,n.kt)("p",null,"Then please tap the host name and the password. the default ID is ",(0,n.kt)("inlineCode",{parentName:"p"},"pi")," and the password is ",(0,n.kt)("inlineCode",{parentName:"p"},"raspberry"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"login as: pi\npi@192.168.43.210's password:raspberry\n\n")),(0,n.kt)("p",null,"Now you are in, and you can tap the command in putty and play with your raspberry."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.realvnc.com/en/connect/download/viewer/"},"VNC Viewer")),(0,n.kt)("p",null,"To make this kit work with alexa or dueros, you need to open a web site to get the authorization. So you need to use ",(0,n.kt)("em",{parentName:"p"},"VNC Viewer")," to log in your amazon or baidu account. So please make sure you have open the ",(0,n.kt)("em",{parentName:"p"},"VNC")," service of your raspberry."),(0,n.kt)("p",null,"Or you can just consider plan B."),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Plan B")),(0,n.kt)("p",null,"If you are tired of all above, you can just use a HDMI Monitor and plug the USB Keyboard and USB mouse in to your raspberry, it works too, simple and easy."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Step 1. Install seeed-voicecard")),(0,n.kt)("p",null,"Get the seeed voice card source code. and install all linux kernel drivers."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"sudo apt-get update\nsudo apt-get upgrade\ngit clone https://github.com/respeaker/seeed-voicecard.git\ncd seeed-voicecard\nsudo ./install.sh   \nsudo reboot\n\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Step 2. Check the Sound Card")),(0,n.kt)("p",null,"Tap the command below to check the record device."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"pi@raspberrypi:~ $ arecord -L\n")),(0,n.kt)("p",null,"It should be like:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"pi@raspberrypi:~ $ arecord -L\nnull\n    Discard all samples (playback) or generate zero samples (capture)\ndefault\nac108\ndmixer\nac101\nsysdefault:CARD=seeed8micvoicec\n    seeed-8mic-voicecard,\n    Default Audio Device\ndmix:CARD=seeed8micvoicec,DEV=0\n    seeed-8mic-voicecard,\n    Direct sample mixing device\ndsnoop:CARD=seeed8micvoicec,DEV=0\n    seeed-8mic-voicecard,\n    Direct sample snooping device\nhw:CARD=seeed8micvoicec,DEV=0\n    seeed-8mic-voicecard,\n    Direct hardware device without any conversions\nplughw:CARD=seeed8micvoicec,DEV=0\n    seeed-8mic-voicecard,\n    Hardware device with all software conversions \n")),(0,n.kt)("p",null,"Use the following command to check the play device."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"pi@raspberrypi:~ $ aplay -L\n")),(0,n.kt)("p",null,"It should be like:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"pi@raspberrypi:~ $ aplay -L\nnull\n    Discard all samples (playback) or generate zero samples (capture)\ndefault\nac108\ndmixer\nac101\nsysdefault:CARD=ALSA\n    bcm2835 ALSA, bcm2835 ALSA\n    Default Audio Device\ndmix:CARD=ALSA,DEV=0\n    bcm2835 ALSA, bcm2835 ALSA\n    Direct sample mixing device\ndmix:CARD=ALSA,DEV=1\n    bcm2835 ALSA, bcm2835 IEC958/HDMI\n    Direct sample mixing device\ndsnoop:CARD=ALSA,DEV=0\n    bcm2835 ALSA, bcm2835 ALSA\n    Direct sample snooping device\ndsnoop:CARD=ALSA,DEV=1\n    bcm2835 ALSA, bcm2835 IEC958/HDMI\n    Direct sample snooping device\nhw:CARD=ALSA,DEV=0\n    bcm2835 ALSA, bcm2835 ALSA\n    Direct hardware device without any conversions\nhw:CARD=ALSA,DEV=1\n    bcm2835 ALSA, bcm2835 IEC958/HDMI\n    Direct hardware device without any conversions\nplughw:CARD=ALSA,DEV=0\n    bcm2835 ALSA, bcm2835 ALSA\n    Hardware device with all software conversions\nplughw:CARD=ALSA,DEV=1\n    bcm2835 ALSA, bcm2835 IEC958/HDMI\n    Hardware device with all software conversions\nsysdefault:CARD=seeed8micvoicec\n    seeed-8mic-voicecard,\n    Default Audio Device\ndmix:CARD=seeed8micvoicec,DEV=0\n    seeed-8mic-voicecard,\n    Direct sample mixing device\ndsnoop:CARD=seeed8micvoicec,DEV=0\n    seeed-8mic-voicecard,\n    Direct sample snooping device\nhw:CARD=seeed8micvoicec,DEV=0\n    seeed-8mic-voicecard,\n    Direct hardware device without any conversions\nplughw:CARD=seeed8micvoicec,DEV=0\n    seeed-8mic-voicecard,\n    Hardware device with all software conversions\n\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Step 3. Record and Play")),(0,n.kt)("p",null,"You can record then play, or you can record and play at the same time."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"#It will capture sound on AC108 and save as a.wav\narecord -Dac108 -f S32_LE -r 16000 -c 8 a.wav\n#Take care of that the captured mic audio is on the first 6 channels\n\n#It will play sound file a.wav on AC101\naplay -D ac101 a.wav\n#Do not use -D plughw:1,0 directly except your wave file is single channel only.\n\n#Doing capture && playback the same time\narecord -D hw:1,0 -f S32_LE -r 16000 -c 8 to_be_record.wav &\n#mono_to_play.wav is a mono channel wave file to play\naplay -D plughw:1,0 -r 16000 mono_to_play.wav\n\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Limit for developer using 6-Mic Circular Array Kit(or 4-Mics Linear Array Kit) doing capture & playback the same time:"),(0,n.kt)("p",{parentName:"admonition"},"-1. capture must be start first, or else the capture channels will possibly be disorder."),(0,n.kt)("p",{parentName:"admonition"},"-2. playback output channels must fill with 8 same channels data or 4 same stereo channels data, or else the speaker or headphone will output nothing possibly."),(0,n.kt)("p",{parentName:"admonition"},"-3. If you want to play and record at the same time, the aplay music file must be mono, or you can not use this command to play.")),(0,n.kt)("p",null,"Also you can play and record with Audacity."),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"You should open Audacity via VNC or you can just use a monitor to open it")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"sudo apt update\nsudo apt install audacity\naudacity                      // run audacity\n\n")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Respeaker_V2/img/audacity.png",alt:null})),(0,n.kt)("h3",{id:"play-with-leds"},"Play with LEDs"),(0,n.kt)("p",null,"There are 12 GRB LEDs in the 6-mic circular array, you can configure the LEDs yourself, now let's see how to light them up."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git clone --depth 1 https://github.com/respeaker/pixel_ring.git\ncd pixel_ring\npip install -U -e .\npython examples/respeaker_4mic_array.py\n\n")),(0,n.kt)("p",null,"You will see LEDs light and run. And you can refer to the ",(0,n.kt)("inlineCode",{parentName:"p"},"python examples/respeaker_4mic_array.py")," file to make your own effects."),(0,n.kt)("h2",{id:"realtime-sound-source-localization-and-tracking"},"Realtime Sound Source Localization and Tracking"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/introlab/odas"},"ODAS")," stands for Open embeddeD Audition System. This is a library dedicated to perform sound source localization, tracking, separation and post-filtering. Let's have a fun with it."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 1. Get ODAS and build it.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"sudo apt-get install libfftw3-dev libconfig-dev libasound2-dev libgconf-2-4\nsudo apt-get install cmake\ngit clone https://github.com/introlab/odas.git\nmkdir odas/build\ncd odas/build\ncmake ..\nmake\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Step 2. Get ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/introlab/odas_web/releases"},"ODAS Studio"),"  and open it.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Step 3. The odascore will be at ",(0,n.kt)("strong",{parentName:"p"},"odas/bin/odaslive"),", the ",(0,n.kt)("strong",{parentName:"p"},"config file")," is at ",(0,n.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/xiongyihui/odas/master/config/odaslive/respeaker_6_mic_array.cfg"},"here"),"."))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker_6-Mics_Circular_Array_kit_for_Raspberry_Pi/img/odas.png",alt:null})),(0,n.kt)("h2",{id:"extract-voice"},"Extract Voice"),(0,n.kt)("p",null,"We use ",(0,n.kt)("a",{parentName:"p",href:"https://people.csail.mit.edu/hubert/pyaudio/"},"PyAudio python library")," to extract voice."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 1, We need to run the following script to get the device index number of 6 Mic pi hat:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Python"},"sudo pip install pyaudio\ncd ~\nnano get_index.py\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 2, copy below code and paste on get_index.py.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Python"},"import pyaudio\n\np = pyaudio.PyAudio()\ninfo = p.get_host_api_info_by_index(0)\nnumdevices = info.get('deviceCount')\n\nfor i in range(0, numdevices):\n        if (p.get_device_info_by_host_api_device_index(0, i).get('maxInputChannels')) > 0:\n            print \"Input Device id \", i, \" - \", p.get_device_info_by_host_api_device_index(0, i).get('name')\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Step 3, press Ctrl + X to exit and press Y to save.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Step 4, run 'sudo python get_index.py' and we will see the device ID as below."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Input Device id  2  -  seeed-8mic-voicecard: - (hw:1,0)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 5, change ",(0,n.kt)("inlineCode",{parentName:"li"},"RESPEAKER_INDEX = 2")," to index number. Run python script record.py to record a speech.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Python"},'import pyaudio\nimport wave\n\nRESPEAKER_RATE = 16000\nRESPEAKER_CHANNELS = 8 \nRESPEAKER_WIDTH = 2\n# run getDeviceInfo.py to get index\nRESPEAKER_INDEX = 2  # refer to input device id\nCHUNK = 1024\nRECORD_SECONDS = 5\nWAVE_OUTPUT_FILENAME = "output.wav"\n\np = pyaudio.PyAudio()\n\nstream = p.open(\n            rate=RESPEAKER_RATE,\n            format=p.get_format_from_width(RESPEAKER_WIDTH),\n            channels=RESPEAKER_CHANNELS,\n            input=True,\n            input_device_index=RESPEAKER_INDEX,)\n\nprint("* recording")\n\nframes = []\n\nfor i in range(0, int(RESPEAKER_RATE / CHUNK * RECORD_SECONDS)):\n    data = stream.read(CHUNK)\n    frames.append(data)\n\nprint("* done recording")\n\nstream.stop_stream()\nstream.close()\np.terminate()\n\nwf = wave.open(WAVE_OUTPUT_FILENAME, \'wb\')\nwf.setnchannels(RESPEAKER_CHANNELS)\nwf.setsampwidth(p.get_sample_size(p.get_format_from_width(RESPEAKER_WIDTH)))\nwf.setframerate(RESPEAKER_RATE)\nwf.writeframes(b\'\'.join(frames))\nwf.close()\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 6. If you want to extract channel 0 data from 8 channels, please follow below code. For other channel X, please change ","[0::8]"," to ","[X::8]",".")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import pyaudio\nimport wave\nimport numpy as np\n\nRESPEAKER_RATE = 16000\nRESPEAKER_CHANNELS = 8\nRESPEAKER_WIDTH = 2\n# run getDeviceInfo.py to get index\nRESPEAKER_INDEX = 2  # refer to input device id\nCHUNK = 1024\nRECORD_SECONDS = 3\nWAVE_OUTPUT_FILENAME = "output.wav"\n\np = pyaudio.PyAudio()\n\nstream = p.open(\n            rate=RESPEAKER_RATE,\n            format=p.get_format_from_width(RESPEAKER_WIDTH),\n            channels=RESPEAKER_CHANNELS,\n            input=True,\n            input_device_index=RESPEAKER_INDEX,)\n\nprint("* recording")\n\nframes = [] \n\nfor i in range(0, int(RESPEAKER_RATE / CHUNK * RECORD_SECONDS)):\n    data = stream.read(CHUNK)\n    # extract channel 0 data from 8 channels, if you want to extract channel 1, please change to [1::8]\n    a = np.fromstring(data,dtype=np.int16)[0::8]\n    frames.append(a.tostring())\n\nprint("* done recording")\n\nstream.stop_stream()\nstream.close()\np.terminate()\n\nwf = wave.open(WAVE_OUTPUT_FILENAME, \'wb\')\nwf.setnchannels(1)\nwf.setsampwidth(p.get_sample_size(p.get_format_from_width(RESPEAKER_WIDTH)))\nwf.setframerate(RESPEAKER_RATE)\nwf.writeframes(b\'\'.join(frames))\nwf.close()\n')),(0,n.kt)("h2",{id:"doa"},"DOA"),(0,n.kt)("h3",{id:"doa-with-keywords"},"DOA with Keywords"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Requirements")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"pyaudio"),(0,n.kt)("li",{parentName:"ul"},"numpy"),(0,n.kt)("li",{parentName:"ul"},"snowboy")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Installation")),(0,n.kt)("p",null,"Install pyaudio, numpy and snowboy, use virtualenv a virtual python environment."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt install python-pyaudio python-numpy python-virtualenv\nsudo apt-get install swig python-dev libatlas-base-dev build-essential make\ngit clone --depth 1 https://github.com/Kitt-AI/snowboy.git\ncd snowboy\nvirtualenv --system-site-packages env\nsource env/bin/activate\npython setup.py build\npython setup.py bdist_wheel\npip install dist/snowboy*.whl\ngit clone https://github.com/voice-engine/voice-engine.git\ncd voice-engine\npython setup.py bdist_wheel\npip install dist/*.whl\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Let's say snowboy")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 1. Run the kws_doa.py")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"cd ~/voice-engine/examples/respeaker_6mic_array_for_pi/\npython kws_doa.py\n")),(0,n.kt)("p",null,"Here is the code of the kws_doa.py"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'"""\nSearch the keyword "snowboy".\nAfter finding the keyword, Direction Of Arrival (DOA) is estimated.\n\nHardware: ReSpeaker 6 Mic Array for Raspberry Pi\n"""\n\nimport sys\nimport time\nfrom voice_engine.source import Source\nfrom voice_engine.channel_picker import ChannelPicker\nfrom voice_engine.kws import KWS\nfrom voice_engine.doa_respeaker_6mic_array import DOA\n\n\ndef main():\n    src = Source(rate=16000, channels=8)\n    ch0 = ChannelPicker(channels=src.channels, pick=0)\n    kws = KWS(model=\'snowboy\', sensitivity=0.6, verbose=True)\n    doa = DOA(rate=16000)\n\n    src.link(ch0)\n    ch0.link(kws)\n    src.link(doa)\n\n    def on_detected(keyword):\n        print(\'detected {} at direction {}\'.format(keyword, doa.get_direction()))\n\n    kws.set_callback(on_detected)\n\n    src.recursive_start()\n    while True:\n        try:\n            time.sleep(1)\n        except KeyboardInterrupt:\n            break\n\n    src.recursive_stop()\n\n    # wait a second to allow other threads to exit\n    time.sleep(1)\n\n\nif __name__ == \'__main__\':\n    main()\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 2. Let's say snowboy and here is output of DOA.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"(env) pi@raspberrypi:~/voice-engine/examples/respeaker_6mic_array_for_pi $ python kws_doa.py \n['arecord', '-t', 'raw', '-f', 'S16_LE', '-c', '8', '-r', '16000', '-D', 'default', '-q']\n0000000000000000000000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222222222/usr/local/lib/python2.7/dist-packages/voice_engine-0.1.3-py2.7.egg/voice_engine/gcc_phat.py:22: RuntimeWarning: invalid value encountered in divide\n  cc = np.fft.irfft(R / np.abs(R), n=(interp * n))\ndetected 1 at direction 283.32811392\n3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222222222detected 1 at direction 210.0\n30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222222222detected 1 at direction 62.5448292531\n30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222222222222detected 1 at direction 62.5448292531\n300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222222detected 1 at direction 223.32811392\n300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022222222222222222222222222222222222222222222222222detected 1 at direction 223.32811392\n30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222222222222222222222222222222222222222detected 1 at direction 283.32811392\n300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002222222222222222222222222222222222222222222detected 1 at direction 237.455170747\n")),(0,n.kt)("h2",{id:"buton"},"Buton"),(0,n.kt)("p",null,"if you want to check that your respeaker_6-Mic is installed correctly on raspberry . The Buton is a good idea. we can use the below code to check."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\nimport RPi.GPIO as GPIO\nimport time\n\nBUTTON = 26\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(BUTTON, GPIO.IN)\n\nwhile True:\n    state = GPIO.input(BUTTON)\n    if state:\n        print("off")\n    else:\n        print("on")\n    time.sleep(1)\n')),(0,n.kt)("h2",{id:"faq"},"FAQ"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Q1: There are only 6 Mic in the Mic Array, how could it be 8 channels?")),(0,n.kt)("p",null,"A1: There are 2 AC108 in this array, and each AC108 chip has 4 channel output. So it comes a total of 8 channels here, 6 of which are for the microphone, and the the rest 2 are the playback channels."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Q2: If Raspberry can detect ReSpeaker 2-mics hat, but can't detect ReSpeaker 6-mics Circular array?")),(0,n.kt)("p",null,"A2: Please click raspberry -> Preferences -> Raspberry Pi Configuration, then select the Interfaces tab, make sure the 1-Wire is Disabled."),(0,n.kt)("h2",{id:"resources"},"Resources"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,n.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_6-Mics_Circular_Array_kit_for_Raspberry_Pi/reg/AC101_User_Manual_v1.1.pdf"},"AC101 Datasheet")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,n.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_6-Mics_Circular_Array_kit_for_Raspberry_Pi/reg/AC108_Datasheet_V1.2.pdf"},"AC108 Datesheet")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"[Dxf]")," ",(0,n.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_6-Mics_Circular_Array_kit_for_Raspberry_Pi/reg/ReSpeaker%20Circular%20Array%20for%20Voice%20Accessory%20HAT%20with%206%20Microphones.dxf"},"ReSpeaker Circular Array for Voice Accessory HAT with 6 Microphones case file")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"[Dxf]")," ",(0,n.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_6-Mics_Circular_Array_kit_for_Raspberry_Pi/reg/2d.zip"},"ReSpeaker Circular Array for Voice Accessory HAT with 6 Microphone 2D File")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"[Driver]")," ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/respeaker/seeed-voicecard"},"Seeed-Voice Driver")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"[Algorithms]")," ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/respeaker/mic_array"},"Algorithms includes DOA, VAD, NS")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"[Voice Engine")," ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/voice-engine/voice-engine"},"Voice Engine project, provides building blocks to create voice enabled objects")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"[Algorithms]")," ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/voice-engine/ec"},"AEC"))),(0,n.kt)("h2",{id:"tech-support"},"Tech Support"),(0,n.kt)("p",null,"Please submit any technical issue into our ",(0,n.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,n.kt)("div",null,(0,n.kt)("br",null),(0,n.kt)("p",{style:{textAlign:"center"}},(0,n.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,n.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}d.isMDXComponent=!0}}]);