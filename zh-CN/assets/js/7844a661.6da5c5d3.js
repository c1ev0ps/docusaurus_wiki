"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3370],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,h=u["".concat(o,".").concat(m)]||u[m]||c[m]||r;return t?a.createElement(h,l(l({ref:n},d),{},{components:t})):a.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85188:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={description:"2 Channel CAN BUS FD Shield for Raspberry Pi",title:"2 Channel CAN BUS FD Shield for Raspberry Pi",keywords:["Pi_HAT"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/11/2023",author:"jianjing Huang"}},l=void 0,s={unversionedId:"Top_Brand/Raspberry_Pi/Pi_HAT/two-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi",id:"Top_Brand/Raspberry_Pi/Pi_HAT/two-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi",title:"2 Channel CAN BUS FD Shield for Raspberry Pi",description:"2 Channel CAN BUS FD Shield for Raspberry Pi",source:"@site/docs/Top_Brand/Raspberry_Pi/Pi_HAT/two-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi.md",sourceDirName:"Top_Brand/Raspberry_Pi/Pi_HAT",slug:"/Top_Brand/Raspberry_Pi/Pi_HAT/two-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi",permalink:"/docusaurus_wiki/zh-CN/Top_Brand/Raspberry_Pi/Pi_HAT/two-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Top_Brand/Raspberry_Pi/Pi_HAT/two-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1673395200,formattedLastUpdatedAt:"2023\u5e741\u670811\u65e5",frontMatter:{description:"2 Channel CAN BUS FD Shield for Raspberry Pi",title:"2 Channel CAN BUS FD Shield for Raspberry Pi",keywords:["Pi_HAT"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/11/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"Grove AI HAT for Edge Computing",permalink:"/docusaurus_wiki/zh-CN/Top_Brand/Raspberry_Pi/Pi_HAT/Grove_AI_HAT_for_Edge_Computing"},next:{title:"Skeleton Box for Raspberry Pi Compute Module Development Kit",permalink:"/docusaurus_wiki/zh-CN/Top_Brand/Raspberry_Pi/Accessories/Skeleton_Box_for_Raspberry_Pi_Compute_Module_Development_Kit"}},o={},p=[{value:"Versions Declare",id:"versions-declare",level:2},{value:"Features",id:"features",level:2},{value:"Hardware Overview",id:"hardware-overview",level:2},{value:"Mounting Guide",id:"mounting-guide",level:2},{value:"Specification",id:"specification",level:2},{value:"Platforms Supported",id:"platforms-supported",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Materials required",id:"materials-required",level:3},{value:"Hardware Connection",id:"hardware-connection",level:3},{value:"Software",id:"software",level:3},{value:"Install CAN-HAT",id:"install-can-hat",level:4},{value:"Communicate with Arduino CAN BUS Shield",id:"communicate-with-arduino-can-bus-shield",level:4},{value:"CAN BUS Shield send and CAN HAT receive",id:"can-bus-shield-send-and-can-hat-receive",level:5},{value:"CAN BUS Shield receive and CAN HAT send",id:"can-bus-shield-receive-and-can-hat-send",level:5},{value:"uninstall CAN-HAT",id:"uninstall-can-hat",level:4},{value:"Using CAN-BUS Shiled with Jetson Nano",id:"using-can-bus-shiled-with-jetson-nano",level:2},{value:"Testing",id:"testing",level:3},{value:"Built-in RTC Usage",id:"built-in-rtc-usage",level:2},{value:"Using with Wio Terminal",id:"using-with-wio-terminal",level:2},{value:"Hardware Required",id:"hardware-required",level:3},{value:"Install the Seeed_Arduino_CAN Arduino Library",id:"install-the-seeed_arduino_can-arduino-library",level:3},{value:"Send Example Code",id:"send-example-code",level:3},{value:"Recevice Example Code",id:"recevice-example-code",level:3},{value:"Receive using Interrupt Example Code",id:"receive-using-interrupt-example-code",level:3},{value:"Self Send-Receive Example Code",id:"self-send-receive-example-code",level:3},{value:"Sending FD Example Code",id:"sending-fd-example-code",level:3},{value:"Schematic Online Viewer",id:"schematic-online-viewer",level:2},{value:"Resources",id:"resources",level:2},{value:"Tech Support",id:"tech-support",level:2}],d={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/MCP2518FD.png",alt:"enter image description here"})),(0,i.kt)("p",null,"This is a CAN BUS shield for Raspberry Pi(hereinafter referred to as 2 channel pi hat), 2 channel CAN BUS I/O, support ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/CAN_FD"},"CAN FD"),". CAN FD support much faster transmission speed(up to 8Mbps)"),(0,i.kt)("p",null,"Also it have two On-board 120\u03a9 terminating resistors which are controlled by the switches."),(0,i.kt)("p",{style:{textAlign:"center"}},(0,i.kt)("a",{href:"https://www.seeedstudio.com/CAN-BUS-FD-HAT-for-Raspberry-Pi-p-4742.html",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/300px-Get_One_Now_Banner-ragular.png"}))),(0,i.kt)("h2",{id:"versions-declare"},"Versions Declare"),(0,i.kt)("p",null,"There are ",(0,i.kt)("strong",{parentName:"p"},"3 versions")," of the CAN BUS shield for Raspberry Pi. All 3 versions work perfectly on Raspberry Pi platform, and may skip this section if you're using RPi platform."),(0,i.kt)("p",null,"The CAN BUS shield now also ",(0,i.kt)("strong",{parentName:"p"},"supports the Nvidia Jetson Nano platform"),", and different versions of the CAN BUS Shield ",(0,i.kt)("strong",{parentName:"p"},"do affect the functionality"),", please check the table below carefully if you're using with Jetson Nano Platform."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Product Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Chip"),(0,i.kt)("th",{parentName:"tr",align:null},"RPi State"),(0,i.kt)("th",{parentName:"tr",align:null},"Jetson Nano State"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2-Channel CAN-BUS(FD) Shield for RPi (MCP2517FD)"),(0,i.kt)("td",{parentName:"tr",align:null},"MCP2517FD"),(0,i.kt)("td",{parentName:"tr",align:null},"Two Channels"),(0,i.kt)("td",{parentName:"tr",align:null},"Single Channel(can0)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi-p-4072.html"},"2-Channel CAN-BUS(FD) Shield for RPi (MCP2517FD)")),(0,i.kt)("td",{parentName:"tr",align:null},"MCP2518FD"),(0,i.kt)("td",{parentName:"tr",align:null},"Two Channels"),(0,i.kt)("td",{parentName:"tr",align:null},"Single Channel(can0)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/CAN-BUS-FD-HAT-for-Raspberry-Pi-p-4742.html"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)")),(0,i.kt)("td",{parentName:"tr",align:null},"MCP2518FD"),(0,i.kt)("td",{parentName:"tr",align:null},"Two Channels"),(0,i.kt)("td",{parentName:"tr",align:null},"Two Channels")))),(0,i.kt)("p",null,"As you can see, there are two versions of chips used in the 2-Channel CAN-BUS(FD) Shield for RPi (MCP2517FD) and both channels work on RPi but only single channel (CAN0) works on the Jetson Nano Platform!"),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"High-speed transfer rate: 8Mbps@10m 20AWG shielded cable / 1Mbps@40m 20AWG shielded cable"),(0,i.kt)("li",{parentName:"ul"},"Stable power supply, selectable Raspberry Pi power supply or DC power supply"),(0,i.kt)("li",{parentName:"ul"},"Compatible with Raspberry Pi 2, Raspberry Pi 3, Raspberry Pi 3, Raspberry Pi 4 and Raspberry Pi Zero"),(0,i.kt)("li",{parentName:"ul"},"One-button configuration of 120\u03a9 terminating resistor"),(0,i.kt)("li",{parentName:"ul"},"Support CAN FD")),(0,i.kt)("h2",{id:"hardware-overview"},"Hardware Overview"),(0,i.kt)("div",{align:"center"},(0,i.kt)("figure",null,(0,i.kt)("a",{href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/block.jpg",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/block.jpg",alt:"Raspberry Pi CAN BUS shield",title:"hardware overview"}),(0,i.kt)("figcaption",null,(0,i.kt)("b",null,"Figure 1"),". ",(0,i.kt)("i",null,"Hardware overview(MCP2517)"))))),(0,i.kt)("div",{align:"center"},(0,i.kt)("figure",null,(0,i.kt)("a",{href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/block2.jpg",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/block2.jpg",alt:"Raspberry Pi CAN BUS shield",title:"hardware overview"}),(0,i.kt)("figcaption",null,(0,i.kt)("b",null,"Figure 2"),". ",(0,i.kt)("i",null,"Hardware overview(MCP2517)"))))),(0,i.kt)("div",{align:"center"},(0,i.kt)("figure",null,(0,i.kt)("a",{href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/block-diagram.jpg",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/block-diagram.jpg",alt:"Raspberry Pi CAN BUS shield",title:"hardware overview"}),(0,i.kt)("figcaption",null,(0,i.kt)("b",null,"Figure 3"),". ",(0,i.kt)("i",null,"Block Diagram(MCP2517)"))))),(0,i.kt)("div",{align:"center"},(0,i.kt)("figure",null,(0,i.kt)("a",{href:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/CANBUS_REVIEW.png",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/CANBUS_REVIEW.png",alt:"Raspberry Pi CAN BUS shield",title:"hardware overview"}),(0,i.kt)("figcaption",null,(0,i.kt)("b",null,"Figure 4"),". ",(0,i.kt)("i",null,"Hardware overview(MCP2518FD)"))))),(0,i.kt)("h2",{id:"mounting-guide"},"Mounting Guide"),(0,i.kt)("div",{align:"center"},(0,i.kt)("figure",null,(0,i.kt)("a",{href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/setup.jpg",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/setup.jpg",alt:"Raspberry Pi CAN BUS shield",title:"hardware overview"}),(0,i.kt)("figcaption",null,(0,i.kt)("b",null,"Figure 4"),". ",(0,i.kt)("i",null,"Mounting Guide"))))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You can see that we used nylon columns during assembly to avoid short-circuiting between the metal terminals under the CAN BUS port and the HDMI interface on the Raspberry Pi. So please be sure to assemble the nylon column as shown.")),(0,i.kt)("h2",{id:"specification"},"Specification"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Power Input"),(0,i.kt)("td",{parentName:"tr",align:null},"12V~24V DC",(0,i.kt)("br",null),"Raspberry Pi GPIO 5V")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CAN FD Controller"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/res/MCP2517-datasheet.pdf"},"MCP2517FD"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CAN FD Transceiver"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/res/MCP2557-datasheet.pdf"},"MCP2557FD"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CAN FD Channel"),(0,i.kt)("td",{parentName:"tr",align:null},"2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Transfer Rate"),(0,i.kt)("td",{parentName:"tr",align:null},"8Mbps@10m 20AWG shielded cable ",(0,i.kt)("br",null)," 1Mbps@40m 20AWG shielded cable")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Communication Interface with Pi"),(0,i.kt)("td",{parentName:"tr",align:null},"SPI")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Grove Interface"),(0,i.kt)("td",{parentName:"tr",align:null},"Grove I2C x2")))),(0,i.kt)("h2",{id:"platforms-supported"},"Platforms Supported"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Arduino"),(0,i.kt)("th",{parentName:"tr",align:null},"Raspberry Pi"),(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:"{1000}",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/arduino_logo.jpg"}))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/raspberry_pi_logo.jpg",alt:null})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/bbg_logo_n.jpg",alt:null})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/wio_logo_n.jpg",alt:null})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/linkit_logo_n.jpg",alt:null}))))),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("h3",{id:"materials-required"},"Materials required"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Raspberry pi"),(0,i.kt)("th",{parentName:"tr",align:null},"2-Channel CAN-BUS(FD) Shield"),(0,i.kt)("th",{parentName:"tr",align:null},"Arduino Board"),(0,i.kt)("th",{parentName:"tr",align:null},"CAN-BUS Shield V2"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/rasp.jpg",alt:"enter image description here"})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi-thumbnail.png",alt:"enter image description here"})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/Grove_Light_Sensor/images/gs_1.jpg",alt:"enter image description here"})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/img/CAN_BUS_Shield_V2.jpg",alt:null}))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Raspberry-Pi-3-Model-B-p-2625.html"},"Get ONE Now")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi-p-4072.html"},"Get ONE Now")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Seeeduino-V4-2-p-2517.html"},"Get ONE Now")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/CAN-BUS-Shield-V2.html"},"Get ONE Now"))))),(0,i.kt)("p",null,"Also we need to two ",(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Breadboard-Jumper-Wire-Pack-241mm-200mm-160mm-117m-p-234.html"},"male to male jumper")," and power cables to power those boards."),(0,i.kt)("h3",{id:"hardware-connection"},"Hardware Connection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Step 1"),". Follow the ",(0,i.kt)("a",{parentName:"p",href:"#mounting-guide"},"Mounting Guide")," to Plug the 2-Channel CAN-BUS(FD) Shield into Raspberry.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Step 2"),". Plug the CAN BUS Shield V2 into the Seeeduino(or Arduino) Board")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Step 3"),". Use the jumpers to connect the CAN terminal of both shield."))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"2-Channel CAN-BUS(FD) Shield"),(0,i.kt)("th",{parentName:"tr",align:null},"CAN-BUS Shield V2"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CAN_0_L"),(0,i.kt)("td",{parentName:"tr",align:null},"CANL")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CAN_0_H"),(0,i.kt)("td",{parentName:"tr",align:null},"CANH")))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"You can find the silkscreen at the back of the shield.\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Step 4"),". Power the Raspberry Pi and Seeeduino.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/Seeed-Studio/pi-hats/raw/master/images/can_hat_and_arduinno_hardware.jpg",alt:null})),(0,i.kt)("h3",{id:"software"},"Software"),(0,i.kt)("h4",{id:"install-can-hat"},"Install CAN-HAT"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Step 1"),". Open ",(0,i.kt)("strong",{parentName:"li"},"config.txt")," file")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo nano /boot/config.txt\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Step 2"),". Add the following line at the end of the file")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"dtoverlay=seeed-can-fd-hat-v2\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Step 3"),". Press ",(0,i.kt)("strong",{parentName:"p"},"Ctrl + x"),", press ",(0,i.kt)("strong",{parentName:"p"},"y")," and press ",(0,i.kt)("strong",{parentName:"p"},"Enter")," to ",(0,i.kt)("strong",{parentName:"p"},"save")," the file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Step 4"),". ",(0,i.kt)("strong",{parentName:"p"},"Reboot")," Raspberry Pi"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo reboot\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Step 5"),". Check the kernel log to see if CAN-BUS HAT was initialized successfully. You will also see ",(0,i.kt)("strong",{parentName:"li"},"can0")," and ",(0,i.kt)("strong",{parentName:"li"},"can1")," appear in the list of ifconfig results")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-C"},"pi@raspberrypi:~ $ dmesg | grep spi\n[    6.178008] mcp25xxfd spi0.0 can0: MCP2517FD rev0.0 (-RX_INT +MAB_NO_WARN +CRC_REG +CRC_RX +CRC_TX +ECC -HD m:20.00MHz r:18.50MHz e:0.00MHz) successfully initialized.\n[    6.218466] mcp25xxfd spi0.1 (unnamed net_device) (uninitialized): Failed to detect MCP25xxFD (osc=0x00000000).\n\npi@raspberrypi:~ $ ifconfig -a\ncan0: flags=128<NOARP>  mtu 16\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 10  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n        device interrupt 166\n\ncan1: flags=128<NOARP>  mtu 16\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 10  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n        device interrupt 167\n\neth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 10.0.0.13  netmask 255.255.255.0  broadcast 10.0.0.255\n        inet6 fe80::44cc:eeb8:47a0:7fce  prefixlen 64  scopeid 0x20<link>\n        ether b8:27:eb:25:d4:e0  txqueuelen 1000  (Ethernet)\n        RX packets 299  bytes 27437 (26.7 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 172  bytes 25974 (25.3 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nwlan0: flags=4098<BROADCAST,MULTICAST>  mtu 1500\n        ether b8:27:eb:70:81:b5  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Step 6"),". Set the can fd protocol, and the dbitrate can be set to 8M speed. ",(0,i.kt)("a",{parentName:"li",href:"https://www.kernel.org/doc/Documentation/networking/can.txt"},"Refer to the kernel documentation for more usage"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo ip link set can0 up type can bitrate 1000000   dbitrate 8000000 restart-ms 1000 berr-reporting on fd on\nsudo ip link set can1 up type can bitrate 1000000   dbitrate 8000000 restart-ms 1000 berr-reporting on fd on\n\nsudo ifconfig can0 txqueuelen 65536\nsudo ifconfig can1 txqueuelen 65536\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Step 7"),". Open two terminal windows and enter the following commands in the Windows to test can fd protocol.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"#send data\ncangen can0 -mv \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"#dump data\ncandump can0\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"You can test the CAN-BUS by connecting two channels by itself using jumpers: 0_L <===> 1_L, 0_H <===> 1_H.")),(0,i.kt)("h4",{id:"communicate-with-arduino-can-bus-shield"},"Communicate with Arduino CAN BUS Shield"),(0,i.kt)("p",null,"In this demo, we only use one of the two channels."),(0,i.kt)("p",null,"For Arduino CAN BUS Shield, we provide the Arduino Code, if you don't know how to use Arduino, please check ",(0,i.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Getting_Started_with_Arduino/"},"here"),"."),(0,i.kt)("p",null,"For 2 channel pi hat, there are two ways to send & receive, you can use both ",(0,i.kt)("strong",{parentName:"p"},"can-util"),"/",(0,i.kt)("strong",{parentName:"p"},"cangen")," and ",(0,i.kt)("strong",{parentName:"p"},"python code"),"."),(0,i.kt)("h5",{id:"can-bus-shield-send-and-can-hat-receive"},"CAN BUS Shield send and CAN HAT receive"),(0,i.kt)("p",null,"Arduino Code for CAN BUS Shield:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-C"},'// demo: CAN-BUS Shield, send data\n// loovee@seeed.cc\n\n#include <mcp_can.h>\n#include <SPI.h>\n\n// the cs pin of the version after v1.1 is default to D9\n// v0.9b and v1.0 is default D10\nconst int SPI_CS_PIN = 9;\n\nMCP_CAN CAN(SPI_CS_PIN);                                    // Set CS pin\n\nvoid setup()\n{\n    Serial.begin(115200);\n\n    while (CAN_OK != CAN.begin(CAN_500KBPS))              // init can bus : baudrate = 500k\n    {\n        Serial.println("CAN BUS Shield init fail");\n        Serial.println(" Init CAN BUS Shield again");\n        delay(100);\n    }\n    Serial.println("CAN BUS Shield init ok!");\n}\n\nunsigned char stmp[8] = {0, 0, 0, 0, 0, 0, 0, 0};\nvoid loop()\n{\n    //send data:  id = 0x00, standrad frame, data len = 8, stmp: data buf\n    stmp[7] = stmp[7]+1;\n    if(stmp[7] == 100)\n    {\n        stmp[7] = 0;\n        stmp[6] = stmp[6] + 1;\n        \n        if(stmp[6] == 100)\n        {\n            stmp[6] = 0;\n            stmp[5] = stmp[6] + 1;\n        }\n    }\n    \n    CAN.sendMsgBuf(0x00, 0, 8, stmp);\n    delay(100);                       // send data per 100ms\n}\n// END FILE\n\n')),(0,i.kt)("p",null,"Respberry pi setting and and you can use ",(0,i.kt)("strong",{parentName:"p"},"can-util")," to receive"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-C"},"#set 500k baudrate\npi@raspberrypi:~ $ sudo ip link set can0 up type can bitrate 500000\npi@raspberrypi:~ $ ip -details link show can0\n3: can0: <NOARP,UP,LOWER_UP,ECHO> mtu 16 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 10\n    link/can  promiscuity 0 \n    can state ERROR-ACTIVE (berr-counter tx 0 rx 0) restart-ms 0 \n   bitrate 500000 sample-point 0.875 \n   tq 25 prop-seg 34 phase-seg1 35 phase-seg2 10 sjw 1\n   mcp25xxfd: tseg1 2..256 tseg2 1..128 sjw 1..128 brp 1..256 brp-inc 1\n   mcp25xxfd: dtseg1 1..32 dtseg2 1..16 dsjw 1..16 dbrp 1..256 dbrp-inc 1\n   clock 40000000numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 \n#receive\npi@raspberrypi:~ $ candump can0\n  can0  000   [8]  00 00 00 00 00 00 00 05\n  can0  000   [8]  00 00 00 00 00 00 00 06\n  can0  000   [8]  00 00 00 00 00 00 00 07\n  can0  000   [8]  00 00 00 00 00 00 00 08\n  can0  000   [8]  00 00 00 00 00 00 00 09\n  can0  000   [8]  00 00 00 00 00 00 00 0A\n  can0  000   [8]  00 00 00 00 00 00 00 0B\n  can0  000   [8]  00 00 00 00 00 00 00 0C\n  can0  000   [8]  00 00 00 00 00 00 00 0D\n  can0  000   [8]  00 00 00 00 00 00 00 0E\n  can0  000   [8]  00 00 00 00 00 00 00 0F\n  can0  000   [8]  00 00 00 00 00 00 00 10\n  can0  000   [8]  00 00 00 00 00 00 00 11\n  can0  000   [8]  00 00 00 00 00 00 00 12\n  can0  000   [8]  00 00 00 00 00 00 00 13\n  can0  000   [8]  00 00 00 00 00 00 00 14\n  can0  000   [8]  00 00 00 00 00 00 00 15\n  can0  000   [8]  00 00 00 00 00 00 00 16\n  can0  000   [8]  00 00 00 00 00 00 00 17\n  can0  000   [8]  00 00 00 00 00 00 00 18\n  can0  000   [8]  00 00 00 00 00 00 00 19\n  can0  000   [8]  00 00 00 00 00 00 00 1A\n  can0  000   [8]  00 00 00 00 00 00 00 1B\n  can0  000   [8]  00 00 00 00 00 00 00 1C\n  can0  000   [8]  00 00 00 00 00 00 00 1D\n")),(0,i.kt)("p",null,"Or you can use ",(0,i.kt)("strong",{parentName:"p"},"python code")," to get the CAN data. To use python to receive CAN data, you should install python-can at first."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"# install python-can\nsudo pip3 install python-can\n")),(0,i.kt)("p",null,"Open a new python file and copy the following code, save as ",(0,i.kt)("strong",{parentName:"p"},"can_test.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import can\n\ncan_interface = 'can0'\nbus = can.interface.Bus(can_interface, bustype='socketcan_native')\nwhile True:\n    message = bus.recv(1.0) # Timeout in seconds.\n    if message is None:\n            print('Timeout occurred, no message.')\n    print(message)\n")),(0,i.kt)("p",null,"Run the Python code and the results are as follows :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"pi@raspberrypi:~ $ python3 can_test.py\nTimestamp: 1550471771.628215        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0e 63     Channel: can0\nTimestamp: 1550471772.629302        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 00     Channel: can0\nTimestamp: 1550471773.630658        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 01     Channel: can0\nTimestamp: 1550471774.632018        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 02     Channel: can0\nTimestamp: 1550471775.633395        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 03     Channel: can0\nTimestamp: 1550471776.634774        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 04     Channel: can0\nTimestamp: 1550471777.636135        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 05     Channel: can0\nTimestamp: 1550471778.637481        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 06     Channel: can0\nTimestamp: 1550471779.638859        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 07     Channel: can0\nTimestamp: 1550471780.640222        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 08     Channel: can0\nTimestamp: 1550471781.641602        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 09     Channel: can0\nTimestamp: 1550471782.642970        ID: 0000    S                DLC:  8    00 00 00 00 00 00 0f 0a     Channel: can0\n")),(0,i.kt)("h5",{id:"can-bus-shield-receive-and-can-hat-send"},"CAN BUS Shield receive and CAN HAT send"),(0,i.kt)("p",null,"For Raspberry Pi, you can use ",(0,i.kt)("strong",{parentName:"p"},"cangen")," to send random package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"pi@raspberrypi:~ $ cangen can0 -v \n  can0  442#14.C4.1A.1A.C2.25.79.25\n  can0  748#4E.C7.8B.0B.6E.B9.15.77\n  can0  1E4#64.D4.62.22.2F.A6.BF\n  can0  1DD#69.6F.61.33.1F.59.E4.7C\n  can0  63D#\n  can0  764#2C.C1.E3\n  can0  68B#11.9C.63.6D.EA.E9.4B\n  can0  329#DA.06.2C.34.6C\n  can0  7DD#2E.F5.E0.2A.26.77.58.38\n  can0  1BE#94.30.6E.2F.A2.7B.E3.1D\n  can0  654#D1.21.A3.58.31.E8.51.5F\n  can0  706#51.41.36.5C.43.8D.AE.5D\n  can0  34A#89.F2.DE.33.AE.52.38.6C\n  can0  6AC#C1.35.83.41.37\n  can0  38C#22.AF\n  can0  208#22.8E.97.58.E5.69.F7.2C\n")),(0,i.kt)("p",null,"For Arduino, you can use the following code to recieve CAN data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'// demo: CAN-BUS Shield, receive data with interrupt mode\n// when in interrupt mode, the data coming can\'t be too fast, must >20ms, or else you can use check mode\n// loovee, 2014-6-13\n\n#include <SPI.h>\n#include "mcp_can.h"\n\n// the cs pin of the version after v1.1 is default to D9\n// v0.9b and v1.0 is default D10\nconst int SPI_CS_PIN = 9;\n\nMCP_CAN CAN(SPI_CS_PIN);                                    // Set CS pin\n\n\nunsigned char flagRecv = 0;\nunsigned char len = 0;\nunsigned char buf[8];\nchar str[20];\n\nvoid setup()\n{\n    Serial.begin(115200);\n\n    while (CAN_OK != CAN.begin(CAN_500KBPS))              // init can bus : baudrate = 500k\n    {\n        Serial.println("CAN BUS Shield init fail");\n        Serial.println(" Init CAN BUS Shield again");\n        delay(100);\n    }\n    Serial.println("CAN BUS Shield init ok!");\n\n    attachInterrupt(0, MCP2515_ISR, FALLING); // start interrupt\n}\n\nvoid MCP2515_ISR()\n{\n    flagRecv = 1;\n}\n\nvoid loop()\n{\n    if(flagRecv) \n    {                                   // check if get data\n\n        flagRecv = 0;                   // clear flag\n\n        // iterate over all pending messages\n        // If either the bus is saturated or the MCU is busy,\n        // both RX buffers may be in use and reading a single\n        // message does not clear the IRQ conditon.\n        while (CAN_MSGAVAIL == CAN.checkReceive()) \n        {\n            // read data,  len: data length, buf: data buf\n            CAN.readMsgBuf(&len, buf);\n\n            // print the data\n            for(int i = 0; i<len; i++)\n            {\n                Serial.print(buf[i]);Serial.print("\\t");\n            }\n            Serial.println();\n        }\n    }\n}\n\n')),(0,i.kt)("p",null,"Open the ",(0,i.kt)("strong",{parentName:"p"},"Serial Monitor")," of Arduino IDE by click ",(0,i.kt)("strong",{parentName:"p"},"Tool-> Serial Monitor"),". Or tap the ",(0,i.kt)("inlineCode",{parentName:"p"},"ctrl"),"+",(0,i.kt)("inlineCode",{parentName:"p"},"shift"),"+",(0,i.kt)("inlineCode",{parentName:"p"},"m")," key at the same time. Set the baud rate to ",(0,i.kt)("strong",{parentName:"p"},"115200"),". The result should be like:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/Seeed-Studio/pi-hats/raw/master/images/arduino_receive.png",alt:null})),(0,i.kt)("p",null,"Or you can use ",(0,i.kt)("strong",{parentName:"p"},"python-can")," to send data:"),(0,i.kt)("p",null,"Python code is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import time\nimport can\n\nbustype = \'socketcan_native\'\nchannel = \'can0\'\n\ndef producer(id):\n    """:param id: Spam the bus with messages including the data id."""\n    bus = can.interface.Bus(channel=channel, bustype=bustype)\n    for i in range(10):\n        msg = can.Message(arbitration_id=0xc0ffee, data=[id, i, 0, 1, 3, 1, 4, 1], extended_id=False)\n        bus.send(msg)\n    # Issue #3: Need to keep running to ensure the writing threads stay alive. ?\n    time.sleep(1)\n\nproducer(10)\n')),(0,i.kt)("h4",{id:"uninstall-can-hat"},"uninstall CAN-HAT"),(0,i.kt)("p",null,"If you want to uninstall this CAN-HAT, just run the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"pi@raspberrypi:~/seeed-linux-dtoverlays/modules/CAN-HAT $ sudo ./uninstall.sh\n...\n------------------------------------------------------\nPlease reboot your raspberry pi to apply all settings\nThank you!\n------------------------------------------------------\n")),(0,i.kt)("h2",{id:"using-can-bus-shiled-with-jetson-nano"},"Using CAN-BUS Shiled with Jetson Nano"),(0,i.kt)("p",null,"Now the CAN-BUS Shiled also supports the Jetson Nano Platform but there are some limitations based on different versions of hardware. Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/#version-declare"},(0,i.kt)("strong",{parentName:"a"},"Version Declare"))," if you are using the Jetson Nano Platfrom!"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clone the Repo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/Seeed-Studio/seeed-linux-dtoverlays\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build dtbo & driver:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'cd seeed-linux-dtoverlays\nexport CUSTOM_MOD_LIST="CAN-HAT"; make all_jetsonnano\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install the Driver:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo -E make install_jetsonnano\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install dtbo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'sudo cp overlays/jetsonnano/2xMCP2518FD-spi0.dtbo /boot\nsudo /opt/nvidia/jetson-io/config-by-hardware.py -n "Seeed 2xMCP2518FD"\nsudo reboot\n')),(0,i.kt)("p",null,"Now you can also run the ",(0,i.kt)("inlineCode",{parentName:"p"},"dmesg | grep spi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ifconfig -a")," to check if the CAN-BUS initialised properly. Depending on your hardware, you should be able to see ",(0,i.kt)("strong",{parentName:"p"},"can0 or both can0 and can1"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The hardware used here is the ",(0,i.kt)("strong",{parentName:"p"},"latest 2-Channel CAN FD Master Hat for RPi which supports two channels on Jetson Nano Platform, if you have older versions then you will only have single channel can0"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"qqq@jetson-qqq:~$ dmesg | grep spi\n[   10.867712] mcp25xxfd spi0.0 can0: MCP2518FD rev0.0 (-RX_INT -MAB_NO_WARN +CRC_REG +CRC_RX +CRC_TX +ECC -HD m:20.00MHz r:18.50MHz e:0.00MHz) successfully initialized.\n[   10.879487] mcp25xxfd spi0.1 can1: MCP2518FD rev0.0 (-RX_INT -MAB_NO_WARN +CRC_REG +CRC_RX +CRC_TX +ECC -HD m:20.00MHz r:18.50MHz e:0.00MHz) successfully initialized.\n\nqqq@jetson-qqq:~$ ifconfig -a\ncan0: flags=128<NOARP>  mtu 16\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 10  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n        device interrupt 112\n\ncan1: flags=128<NOARP>  mtu 16\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 10  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n        device interrupt 114\n")),(0,i.kt)("h3",{id:"testing"},"Testing"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"NOTE:")," Using 2-Channel CAN FD Master Hat for RPi as hardware here.")),(0,i.kt)("p",null,"You may also connect the channels as follow to test:"),(0,i.kt)("p",null,"0_L <===> 1_L"),(0,i.kt)("p",null,"0_H <===> 1_H"),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/jetson-connect.png"})),(0,i.kt)("p",null,"Open two terminal windows and enter the following commands in the Windows to test can fd protocol."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"#send data\ncangen can0 -mv \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"#dump data\ncandump can1 \n")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/jetson-send.png"})),(0,i.kt)("h2",{id:"built-in-rtc-usage"},"Built-in RTC Usage"),(0,i.kt)("p",null,"The latest 2-Channel CAN FD Master Hat for RPi also has an on-board RTC. Follow though to install the RTC drivers on Raspberry Pi:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Update Raspberry Pi and Reboot:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt update\nsudo apt upgrade\nsudo reboot\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Instsall Dependencies")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install i2c-tools build-essential raspberrypi-kernel-headers\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Download the driver:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"curl -O -L https://github.com/dresden-elektronik/raspbee2-rtc/archive/master.zip\nunzip master.zip\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Compile the RTC Kernel module")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"cd raspbee2-rtc-master\nmake\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install the RTC Kernel module")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo make install\nsudo reboot\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Configure system time to the RTC module")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo hwclock --systohc\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Test that the RTC is working")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo hwclock --verbose\n")),(0,i.kt)("p",null,"Now you can read the RTC time using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"sudo hwclock -r\n")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/time.png"})),(0,i.kt)("h2",{id:"using-with-wio-terminal"},"Using with Wio Terminal"),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/ban-1.png"})),(0,i.kt)("p",null,"Apart from using the CAN-BUS Pi Hat with SBCs, now you can also use it the ",(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},(0,i.kt)("strong",{parentName:"a"},"Wio Terminal"))," (Arduino Compatitable Board)! And develop CAN related projects on MCU!"),(0,i.kt)("p",null,"Please check the following wikis to find out more about Wio Terminal:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/Wio-Terminal-Getting-Started/"},"Wio Terminal Getting Started"))),(0,i.kt)("h3",{id:"hardware-required"},"Hardware Required"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},(0,i.kt)("strong",{parentName:"a"},"Wio Terminal")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/40-Pin-Raspberry-Pi-Hat-Adapter-Board-For-Wio-Terminal-p-4730.html"},(0,i.kt)("strong",{parentName:"a"},"40 Pin Raspberry Pi Hat Adapter Board For Wio Terminal")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/CAN-BUS-FD-HAT-for-Raspberry-Pi-p-4742.html"},(0,i.kt)("strong",{parentName:"a"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"))))),(0,i.kt)("p",null,"For testing purpose, you may also prepare some other CAN-BUS devs components, for this example we are using the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.seeedstudio.com/CAN-BUS-Shield-V2.html"},(0,i.kt)("strong",{parentName:"a"},"CAN-BUS Shield V2 adopts MCP2515 and MCP2551"))," + ",(0,i.kt)("strong",{parentName:"li"},"Arduino Board"))),(0,i.kt)("h3",{id:"install-the-seeed_arduino_can-arduino-library"},"Install the Seeed_Arduino_CAN Arduino Library"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"Please make sure you have installed Seeed SAMD Board library and updated to the latest version!\n"))),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Visit the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_CAN"},(0,i.kt)("strong",{parentName:"a"},"Seeed_Arduino_CAN"))," repositories and download the entire repo to your local drive.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Now, the Seeed_Arduino_CAN library can be installed to the Arduino IDE. Open the Arduino IDE, and click ",(0,i.kt)("inlineCode",{parentName:"p"},"sketch")," -> ",(0,i.kt)("inlineCode",{parentName:"p"},"Include Library")," -> ",(0,i.kt)("inlineCode",{parentName:"p"},"Add .ZIP Library"),", and choose the ",(0,i.kt)("inlineCode",{parentName:"p"},"Seeed_Arduino_CAN")," file that you've have just downloaded."))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/Xnip2019-11-21_15-50-13.jpg",alt:"InstallLibrary"})),(0,i.kt)("h3",{id:"send-example-code"},"Send Example Code"),(0,i.kt)("p",null,"This is an example of using the ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD) with Wio Terminal to send CAN-BUS data")," to another CAN-BUS device(In this case, it's CAN-BUS Shield V2 adopts MCP2515 and MCP2551 + Arduino Uno)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Connect ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel 0 L")," -> ",(0,i.kt)("strong",{parentName:"p"},"CAN-BUS Shield V2"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"CANL"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Connect ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel 0 H")," -> ",(0,i.kt)("strong",{parentName:"p"},"CAN-BUS Shield V2"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"CANH"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Connect 2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD) with Wio Terminal using ",(0,i.kt)("strong",{parentName:"p"},"40 Pin Raspberry Pi Hat Adapter Board For Wio Terminal"),"."))),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/connect.png"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Code for Arduino Uno + CAN-BUS Shield V2"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include "mcp2515_can.h"\n\n/*SAMD core*/\n#ifdef ARDUINO_SAMD_VARIANT_COMPLIANCE\n    #define SERIAL SerialUSB\n#else\n    #define SERIAL Serial\n#endif\n\nconst int SPI_CS_PIN = 9;\nmcp2515_can CAN(SPI_CS_PIN);\n\nunsigned char len = 0;\nunsigned char buf[8];\n\nvoid setup() {\n    SERIAL.begin(115200);\n    while (!SERIAL) {\n        ; // wait for serial port to connect. Needed for native USB port only\n    }\n    while (CAN_OK != CAN.begin(CAN_500KBPS)) {             // init can bus : baudrate = 500k\n        // init can bus : baudrate = 500k\n        SERIAL.println("CAN BUS Shield init fail");\n        SERIAL.println(" Init CAN BUS Shield again");\n        delay(100);\n    }\n    SERIAL.println("CAN BUS Shield init ok!");\n}\n\nvoid loop() {\n        // iterate over all pending messages\n        // If either the bus is saturated or the MCU is busy,\n        // both RX buffers may be in use and reading a single\n        // message does not clear the IRQ conditon.\n        while (CAN_MSGAVAIL == CAN.checkReceive()) {\n            // read data,  len: data length, buf: data buf\n            SERIAL.println("checkReceive");\n            CAN.readMsgBuf(&len, buf);\n\n            // print the data\n            for (int i = 0; i < len; i++) {\n                SERIAL.print(buf[i]); SERIAL.print("\\t");\n            }\n            SERIAL.println();\n        }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Code for Wio Terminal + 2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include "mcp2518fd_can.h"\n\n/*SAMD core*/\n#ifdef ARDUINO_SAMD_VARIANT_COMPLIANCE\n    #define SERIAL SerialUSB\n#else\n    #define SERIAL Serial\n#endif\n\n// Set SPI CS Pin according to your hardware\n// For Wio Terminal w/ MCP2518FD RPi Hat\uff1a\n// Channel 0 SPI_CS Pin: BCM 8\n// Channel 1 SPI_CS Pin: BCM 7\n// Interupt Pin: BCM25\n// *****************************************\n// For Arduino MCP2515 Hat:\n// SPI_CS Pin: D9\n\nconst int SPI_CS_PIN = BCM8;\nmcp2518fd CAN(SPI_CS_PIN); // Set CS pin\n\nvoid setup() {\n    SERIAL.begin(115200);\n    while(!Serial){};\n\n    while (0 != CAN.begin((byte)CAN_500K_1M)) {            // init can bus : baudrate = 500k\n        SERIAL.println("CAN BUS Shield init fail");\n        SERIAL.println(" Init CAN BUS Shield again");\n        delay(100);\n    }\n    SERIAL.println("CAN BUS Shield init ok!");\n}\n\nunsigned char stmp[8] = {0, 0, 0, 0, 0, 0, 0, 0};\nvoid loop() {\n    // send data:  id = 0x00, standrad frame, data len = 8, stmp: data buf\n    stmp[7] = stmp[7] + 1;\n    if (stmp[7] == 100) {\n        stmp[7] = 0;\n        stmp[6] = stmp[6] + 1;\n\n        if (stmp[6] == 100) {\n            stmp[6] = 0;\n            stmp[5] = stmp[6] + 1;\n        }\n    }\n\n    CAN.sendMsgBuf(0x00, 0, 8, stmp);\n    delay(100);                       // send data per 100ms\n    SERIAL.println("CAN BUS sendMsgBuf ok!");\n}\n')),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/Send.png"})),(0,i.kt)("h3",{id:"recevice-example-code"},"Recevice Example Code"),(0,i.kt)("p",null,"This is an example of using the ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD) with Wio Terminal to receive CAN-BUS data")," from another CAN-BUS device(In this case, it's CAN-BUS Shield V2 adopts MCP2515 and MCP2551 + Arduino Uno)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("p",null,"Same conncection as the above Send Example."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Code for Arduino Uno + CAN-BUS Shield V2"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include "mcp2515_can.h"\n\n/*SAMD core*/\n#ifdef ARDUINO_SAMD_VARIANT_COMPLIANCE\n    #define SERIAL SerialUSB\n#else\n    #define SERIAL Serial\n#endif\n\nconst int SPI_CS_PIN = 9;\nmcp2515_can CAN(SPI_CS_PIN); // Set CS pin\n\n\nvoid setup() {\n    SERIAL.begin(115200);\n    while(!Serial){};\n\n    while (CAN_OK != CAN.begin(CAN_500KBPS)) {             // init can bus : baudrate = 500k\n        SERIAL.println("CAN BUS Shield init fail");\n        SERIAL.println(" Init CAN BUS Shield again");\n        delay(100);\n    }\n    SERIAL.println("CAN BUS Shield init ok!");\n}\n\nunsigned char stmp[8] = {0, 0, 0, 0, 0, 0, 0, 0};\nvoid loop() {\n    // send data:  id = 0x00, standrad frame, data len = 8, stmp: data buf\n    stmp[7] = stmp[7] + 1;\n    if (stmp[7] == 100) {\n        stmp[7] = 0;\n        stmp[6] = stmp[6] + 1;\n\n        if (stmp[6] == 100) {\n            stmp[6] = 0;\n            stmp[5] = stmp[6] + 1;\n        }\n    }\n\n    CAN.sendMsgBuf(0x00, 0, 8, stmp);\n    delay(100);                       // send data per 100ms\n    SERIAL.println("CAN BUS sendMsgBuf ok!");\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Code for Wio Terminal + 2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include "mcp2518fd_can.h"\n\n/*SAMD core*/\n#ifdef ARDUINO_SAMD_VARIANT_COMPLIANCE\n    #define SERIAL SerialUSB\n#else\n    #define SERIAL Serial\n#endif\n\n// Set SPI CS Pin according to your hardware\n// For Wio Terminal w/ MCP2518FD RPi Hat\uff1a\n// Channel 0 SPI_CS Pin: BCM 8\n// Channel 1 SPI_CS Pin: BCM 7\n// Interupt Pin: BCM25\n// *****************************************\n// For Arduino MCP2515 Hat:\n// SPI_CS Pin: D9\n\nconst int SPI_CS_PIN = BCM8;\nmcp2518fd CAN(SPI_CS_PIN);\n\nunsigned char len = 0;\nunsigned char buf[8];\n\nvoid setup() {\n    SERIAL.begin(115200);\n    while (!SERIAL) {\n        ; // wait for serial port to connect. Needed for native USB port only\n    }\n    while (0 != CAN.begin((byte)CAN_500K_1M)) {            // init can bus : baudrate = 500k\n        SERIAL.println("CAN BUS Shield init fail");\n        SERIAL.println(" Init CAN BUS Shield again");\n        delay(100);\n    }\n    SERIAL.println("CAN BUS Shield init ok!");\n}\n\nvoid loop() {\n        // iterate over all pending messages\n        // If either the bus is saturated or the MCU is busy,\n        // both RX buffers may be in use and reading a single\n        // message does not clear the IRQ conditon.\n        while (CAN_MSGAVAIL == CAN.checkReceive()) {\n            // read data,  len: data length, buf: data buf\n            SERIAL.println("checkReceive");\n            CAN.readMsgBuf(&len, buf);\n\n            // print the data\n            for (int i = 0; i < len; i++) {\n                SERIAL.print(buf[i]); SERIAL.print("\\t");\n            }\n            SERIAL.println();\n        }\n}\n')),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/Receive.png"})),(0,i.kt)("h3",{id:"receive-using-interrupt-example-code"},"Receive using Interrupt Example Code"),(0,i.kt)("p",null,"This is an example of using the ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD) with Wio Terminal to receive CAN-BUS data")," from another CAN-BUS device(In this case, it's CAN-BUS Shield V2 adopts MCP2515 and MCP2551 + Arduino Uno). To make it more reliable, here used ",(0,i.kt)("strong",{parentName:"p"},"interupt to trigger the incoming data flow"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Code for Arduino Uno + CAN-BUS Shield V2"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include "mcp2515_can.h"\n\n/*SAMD core*/\n#ifdef ARDUINO_SAMD_VARIANT_COMPLIANCE\n    #define SERIAL SerialUSB\n#else\n    #define SERIAL Serial\n#endif\n\nconst int SPI_CS_PIN = 9;\nmcp2515_can CAN(SPI_CS_PIN); // Set CS pin\n\nvoid setup() {\n    SERIAL.begin(115200);\n    while(!Serial){};\n\n    while (CAN_OK != CAN.begin(CAN_500KBPS)) {             // init can bus : baudrate = 500k\n        SERIAL.println("CAN BUS Shield init fail");\n        SERIAL.println(" Init CAN BUS Shield again");\n        delay(100);\n    }\n    SERIAL.println("CAN BUS Shield init ok!");\n}\n\nunsigned char stmp[8] = {0, 0, 0, 0, 0, 0, 0, 0};\nvoid loop() {\n    // send data:  id = 0x00, standrad frame, data len = 8, stmp: data buf\n    stmp[7] = stmp[7] + 1;\n    if (stmp[7] == 100) {\n        stmp[7] = 0;\n        stmp[6] = stmp[6] + 1;\n\n        if (stmp[6] == 100) {\n            stmp[6] = 0;\n            stmp[5] = stmp[6] + 1;\n        }\n    }\n\n    CAN.sendMsgBuf(0x00, 0, 8, stmp);\n    delay(100);                       // send data per 100ms\n    SERIAL.println("CAN BUS sendMsgBuf ok!");\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code for Wio Terminal + 2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include "mcp2518fd_can.h"\n\n/*SAMD core*/\n#ifdef ARDUINO_SAMD_VARIANT_COMPLIANCE\n    #define SERIAL SerialUSB\n#else\n    #define SERIAL Serial\n#endif\n\n// Set SPI CS Pin according to your hardware\n// For Wio Terminal w/ MCP2518FD RPi Hat\uff1a\n// Channel 0 SPI_CS Pin: BCM 8\n// Channel 1 SPI_CS Pin: BCM 7\n// Interupt Pin: BCM25\n// *****************************************\n// For Arduino MCP2515 Hat:\n// SPI_CS Pin: D9\n\nconst int SPI_CS_PIN = BCM8;\nconst int CAN_INT_PIN = BCM25;\n\nmcp2518fd CAN(SPI_CS_PIN);\n\nunsigned char flagRecv = 0;\nunsigned char len = 0;\nunsigned char buf[8];\n\nvoid MCP2515_ISR() {\n    Serial.println("INTERUPTED!");\n    flagRecv = 1;\n}\n\nvoid setup() {\n    SERIAL.begin(115200);\n    while (!SERIAL) {\n        ; // wait for serial port to connect. Needed for native USB port only\n    }\n    pinMode(CAN_INT_PIN, INPUT);\n    attachInterrupt(digitalPinToInterrupt(CAN_INT_PIN), MCP2515_ISR, FALLING); // start interrupt\n    \n    while (0 != CAN.begin((byte)CAN_500K_1M)) {            // init can bus : baudrate = 500k\n        SERIAL.println("CAN BUS Shield init fail");\n        SERIAL.println(" Init CAN BUS Shield again");\n        delay(100);\n    }\n    SERIAL.println("CAN BUS Shield init ok!");\n}\n\nvoid loop() {\n  if (flagRecv) // Triggered Interrupt\n  {\n    flagRecv = 0;\n  // iterate over all pending messages\n  // If either the bus is saturated or the MCU is busy,\n  // both RX buffers may be in use and reading a single\n  // message does not clear the IRQ conditon.\n    while (CAN_MSGAVAIL == CAN.checkReceive()) {\n        // read data,  len: data length, buf: data buf\n      SERIAL.println("checkReceive");\n      CAN.readMsgBuf(&len, buf);\n  \n        // print the data\n      for (int i = 0; i < len; i++) {\n        SERIAL.print(buf[i]); SERIAL.print("\\t");\n        }\n      SERIAL.println();\n    }\n  }\n}\n')),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/Interrupt.png"})),(0,i.kt)("h3",{id:"self-send-receive-example-code"},"Self Send-Receive Example Code"),(0,i.kt)("p",null,"This is an example of ",(0,i.kt)("strong",{parentName:"p"},"sending and receivce CAN-BUS data on its own")," using the 2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Connect ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel 0 L")," -> ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel 1 L"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Connect ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel 0 H")," -> ",(0,i.kt)("strong",{parentName:"p"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"Channel 1 H")))),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/connect-1.png"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include "mcp2518fd_can.h"\n\n/*SAMD core*/\n#ifdef ARDUINO_SAMD_VARIANT_COMPLIANCE\n    #define SERIAL SerialUSB\n#else\n    #define SERIAL Serial\n#endif\n\n// Set SPI CS Pin according to your hardware\n// For Wio Terminal w/ MCP2518FD RPi Hat\uff1a\n// Channel 0 SPI_CS Pin: BCM 8\n// Channel 1 SPI_CS Pin: BCM 7\n// Interupt Pin: BCM25\n// *****************************************\n// For Arduino MCP2515 Hat:\n// SPI_CS Pin: D9\n\nconst int SPI_CS_PIN_SEND = BCM8;\nconst int SPI_CS_PIN_RECEIVE = BCM7;\n\nmcp2518fd CAN_SEND(SPI_CS_PIN_SEND);\nmcp2518fd CAN_RECEIVE(SPI_CS_PIN_RECEIVE);\n\nunsigned char len = 0;\nunsigned char buf[8];\n\nvoid setup() {\n    SERIAL.begin(115200);\n    while(!Serial); // wait for Serial\n\n    if (CAN_SEND.begin((byte)CAN_500K_1M) != 0 || CAN_RECEIVE.begin((byte)CAN_500K_1M) != 0) {\n      Serial.println("CAN-BUS initiliased error!");\n      while(1);\n    }\n    \n    SERIAL.println("CAN BUS Shield init ok!");\n}\n\nunsigned char stmp[8] = {0, 0, 0, 0, 0, 0, 0, 0};\nvoid loop() {\n    // send data:  id = 0x00, standrad frame, data len = 8, stmp: data buf\n    stmp[7] = stmp[7] + 1;\n    if (stmp[7] == 100) {\n        stmp[7] = 0;\n        stmp[6] = stmp[6] + 1;\n\n        if (stmp[6] == 100) {\n            stmp[6] = 0;\n            stmp[5] = stmp[6] + 1;\n        }\n    }\n\n    CAN_SEND.sendMsgBuf(0x00, 0, 8, stmp);\n    delay(100);                       // send data per 100ms\n    SERIAL.println("CAN BUS sendMsgBuf ok!");\n\n    // ---------------------\n        \n    if (CAN_MSGAVAIL == CAN_RECEIVE.checkReceive()) {\n    // read data,  len: data length, buf: data buf\n      SERIAL.println("checkReceive");\n      CAN_RECEIVE.readMsgBuf(&len, buf);\n    // print the data\n    for (int i = 0; i < len; i++) {\n        SERIAL.print(buf[i]); SERIAL.print(" ");\n    }\n    SERIAL.println();\n    }\n    SERIAL.println("---LOOP END---");\n}\n')),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/send-rec.png"})),(0,i.kt)("h3",{id:"sending-fd-example-code"},"Sending FD Example Code"),(0,i.kt)("p",null,"This is an example of ",(0,i.kt)("strong",{parentName:"p"},"sending and receivce CAN-BUS data (up to 64 bit) using the ",(0,i.kt)("inlineCode",{parentName:"strong"},"FD")," Protocol on its own")," using the 2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("p",null,"Same connection as the Self Send-Receive Example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include "mcp2518fd_can.h"\n\n/*SAMD core*/\n#ifdef ARDUINO_SAMD_VARIANT_COMPLIANCE\n    #define SERIAL SerialUSB\n#else\n    #define SERIAL Serial\n#endif\n\n// Set SPI CS Pin according to your hardware\n// For Wio Terminal w/ MCP2518FD RPi Hat\uff1a\n// Channel 0 SPI_CS Pin: BCM 8\n// Channel 1 SPI_CS Pin: BCM 7\n// Interupt Pin: BCM25\n// *****************************************\n// For Arduino MCP2515 Hat:\n// SPI_CS Pin: D9\n\nconst int SPI_CS_PIN_SEND = BCM8;\nconst int SPI_CS_PIN_RECEIVE = BCM7;\n\nmcp2518fd CAN_SEND(SPI_CS_PIN_SEND);\nmcp2518fd CAN_RECEIVE(SPI_CS_PIN_RECEIVE);\n\nvoid setup() {\n    SERIAL.begin(115200);\n    while(!Serial); // wait for Serial\n    CAN_SEND.setMode(0);\n    CAN_RECEIVE.setMode(0);\n    \n    if (CAN_SEND.begin((byte)CAN_500K_1M) != 0 || CAN_RECEIVE.begin((byte)CAN_500K_1M) != 0) {\n      Serial.println("CAN-BUS initiliased error!");\n      while(1);\n    }\n    byte send_mode = CAN_SEND.getMode();\n    byte receive_mode = CAN_RECEIVE.getMode();\n    SERIAL.printf("CAN BUS Send Mode = %d, CAN BUS Receive Mode = %d\\n\\r",send_mode, receive_mode);\n    SERIAL.println("CAN BUS Shield init ok!");\n}\n\nunsigned char stmp[64] = {0};\nunsigned char len = 0;\nunsigned char buf[64];\n\nvoid loop() {\n    stmp[63] = stmp[63] + 1;\n    if (stmp[63] == 100) {\n        stmp[63] = 0;\n        stmp[62] = stmp[62] + 1;\n\n        if (stmp[62] == 100) {\n            stmp[62] = 0;\n            stmp[61] = stmp[62] + 1;\n        }\n    }\n\n    CAN_SEND.sendMsgBuf(0x00, 0, 15, stmp);\n    delay(100);                       // send data per 100ms\n    SERIAL.println("CAN BUS sendMsgBuf ok!");\n\n    // ---------------------\n        \n    if (CAN_MSGAVAIL == CAN_RECEIVE.checkReceive()) {\n    // read data,  len: data length, buf: data buf\n      SERIAL.println("checkReceive");\n      CAN_RECEIVE.readMsgBuf(&len, buf);\n    // print the data\n    for (int i = 0; i < len; i++) {\n        SERIAL.print(buf[i]); SERIAL.print(" ");\n    } \n    SERIAL.println();\n    }\n    SERIAL.println("---LOOP END---");\n}\n')),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/fd.png"})),(0,i.kt)("h2",{id:"schematic-online-viewer"},"Schematic Online Viewer"),(0,i.kt)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/res/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi.zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/CAN-BUS(FD)-HAT-for-Raspberry-Pi_MCP2518FD_SCH.pdf"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi (MCP2518FD) Schematics")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"[ZIP]")," ",(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/res/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi.zip"},"2-Channel CAN-BUS(FD) Shield for Raspberry Pi Schematic file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"[ZIP]")," ",(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/CAN-BUS-FD/2-Channel%20CAN-BUS(FD)%20Shield%20for%20Raspberry%20Pi_SCH&PCB.zip"},"2-Channel CAN FD Master Hat for RPi Schematic file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/res/MCP2517-datasheet.pdf"},"MCP2517 Datasheet")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/2-Channel-CAN-BUS-FD-Shield-for-Raspberry-Pi/res/MCP2557-datasheet.pdf"},"MCP2557 Datasheet"))),(0,i.kt)("h2",{id:"tech-support"},"Tech Support"),(0,i.kt)("p",null,"Please submit any technical issue into our ",(0,i.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,i.kt)("div",null,(0,i.kt)("br",null),(0,i.kt)("p",{style:{textAlign:"center"}},(0,i.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}u.isMDXComponent=!0}}]);