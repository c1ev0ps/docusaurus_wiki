"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[11822],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||o;return n?r.createElement(k,i(i({ref:t},d),{},{components:n})):r.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},73399:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={description:"Mender Client on ODYSSEY - X86",title:"Mender Client on ODYSSEY - X86",keywords:["Sorftware Mender"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/13/2023",author:"jianjing Huang"}},i="Installation of Mender Client on ODYSSEY - X86",l={unversionedId:"Software/Mender/Mender-Client-ODYSSEY-X86",id:"Software/Mender/Mender-Client-ODYSSEY-X86",title:"Mender Client on ODYSSEY - X86",description:"Mender Client on ODYSSEY - X86",source:"@site/docs/Software/Mender/Mender-Client-ODYSSEY-X86.md",sourceDirName:"Software/Mender",slug:"/Software/Mender/Mender-Client-ODYSSEY-X86",permalink:"/docusaurus_wiki/zh-CN/Software/Mender/Mender-Client-ODYSSEY-X86",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Software/Mender/Mender-Client-ODYSSEY-X86.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1673568e3,formattedLastUpdatedAt:"2023\u5e741\u670813\u65e5",frontMatter:{description:"Mender Client on ODYSSEY - X86",title:"Mender Client on ODYSSEY - X86",keywords:["Sorftware Mender"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/13/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"Plex Media Server on Docker",permalink:"/docusaurus_wiki/zh-CN/Software/OpenWrt/OpenWrt-Plex-Media-Server-on-Docker"},next:{title:"Mender Server on ODYSSEY - X86",permalink:"/docusaurus_wiki/zh-CN/Software/Mender/Mender-Server-ODYSSEY-X86"}},s={},p=[{value:"Test results",id:"test-results",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configuring the build",id:"configuring-the-build",level:2},{value:"Setup Yocto environment",id:"setup-yocto-environment",level:3},{value:"Setup build environment",id:"setup-build-environment",level:3},{value:"Configure Mender server URL (optional)",id:"configure-mender-server-url-optional",level:3},{value:"Building the image",id:"building-the-image",level:2},{value:"Using the build output",id:"using-the-build-output",level:2},{value:"Flash instructions",id:"flash-instructions",level:2},{value:"Method 1",id:"method-1",level:3},{value:"Method 2",id:"method-2",level:3}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"installation-of-mender-client-on-odyssey---x86"},"Installation of Mender Client on ODYSSEY - X86"),(0,a.kt)("p",null,"We can setup Mender Client on an ODYSSEY - X86 board and then receive OTA updates from a Hosted or Self-Hosted Mender Server."),(0,a.kt)("p",null,"This guide focuses on using the ODYSSEY - X86 board running a custom Linux System compiled using the Yocto Project."),(0,a.kt)("h2",{id:"test-results"},"Test results"),(0,a.kt)("p",null,"The Yocto Project releases in the table below have been tested by the Mender community. Please update it if you have tested this integration on other ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.yoctoproject.org/wiki/Releases?target=_blank"},"Yocto Project releases"),":"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Yocto Project"),(0,a.kt)("th",{parentName:"tr",align:null},"Build"),(0,a.kt)("th",{parentName:"tr",align:null},"Runtime"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dunfell (3.1 / 5.3.0)"),(0,a.kt)("td",{parentName:"tr",align:null},"test works"),(0,a.kt)("td",{parentName:"tr",align:null},"test works")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Build")," Means that the Yocto Project build using this Mender integration completes without errors and outputs images.\n",(0,a.kt)("strong",{parentName:"p"},"Runtime")," Means that Mender has been verified to work on the board. For U-Boot-based boards, the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mender.io/devices/integrating-with-u-boot/integration-checklist?target=_blank"},"integration checklist")," has been verified."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A supported Linux distribution and dependencies installed on your workstation/laptop as described in the ",(0,a.kt)("a",{parentName:"li",href:"https://www.yoctoproject.org/docs/current/mega-manual/mega-manual.html#detailed-supported-distros"},"Yocto Mega Manual"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"NOTE. Instructions depend on which Yocto version you intend to use."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.seeedstudio.com/ODYSSEY-X86J4125800-p-4915.html"},"ODYSSEY - X86 board"))),(0,a.kt)("h2",{id:"configuring-the-build"},"Configuring the build"),(0,a.kt)("h3",{id:"setup-yocto-environment"},"Setup Yocto environment"),(0,a.kt)("p",null,"Set the Yocto Project branch you are building for:"),(0,a.kt)("p",null,"Create a directory for your  ",(0,a.kt)("inlineCode",{parentName:"p"},"mender-seeed"),"  setup to live in and clone the\nmeta information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir mender-seeed && cd mender-seeed\n")),(0,a.kt)("p",null,"Get all of necessary layers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone -b dunfell git://git.yoctoproject.org/poky layers/poky\ngit clone git://git.yoctoproject.org/meta-intel layers/meta-intel \ngit clone -b dunfell https://github.com/mendersoftware/meta-mender layers/meta-mender\ngit clone -b dunfell https://github.com/openembedded/meta-openembedded  layers/meta-openembedded\ngit clone https://github.com/Seeed-Studio/meta-odyssey-x86 layers/meta-odyssey-x86\n")),(0,a.kt)("h3",{id:"setup-build-environment"},"Setup build environment"),(0,a.kt)("p",null,"Initialize the build environment:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"source layers/poky/oe-init-build-env \n")),(0,a.kt)("p",null,"Add yocto project layers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bitbake-layers add-layer  ../layers/meta-intel \nbitbake-layers add-layer  ../layers/meta-odyssey-x86 \nbitbake-layers add-layer  ../layers/meta-openembedded/meta-oe \nbitbake-layers add-layer  ../layers/meta-openembedded/meta-python \nbitbake-layers add-layer  ../layers/meta-openembedded/meta-networking \nbitbake-layers add-layer  ../layers/meta-mender/meta-mender-core \nbitbake-layers add-layer  ../layers/meta-mender/meta-mender-demo \n")),(0,a.kt)("p",null,"Apply Mender configuration to build environment:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'CONF_VERSION = "1"\nMACHINE = "odyssey-x86-mender"\nMENDER_ARTIFACT_NAME = "release-1"\nINHERIT += "mender-full"\nDISTRO_FEATURES_append = " systemd"\nVIRTUAL-RUNTIME_init_manager = "systemd"\nDISTRO_FEATURES_BACKFILL_CONSIDERED = "sysvinit"\nVIRTUAL-RUNTIME_initscripts = ""\nMENDER_STORAGE_DEVICE = "/dev/sda"\nMENDER_STORAGE_TOTAL_SIZE_MB_DEFAULT = "4096"\nMENDER_BOOT_PART_SIZE_MB = "64"\nMENDER_DATA_PART_SIZE_MB = "1024"\nMENDER_IMAGE_BOOTLOADER_FILE = "wic-initrd"\n\nIMAGE_FEATURES_append = " \\\n    ssh-server-openssh \\\n    "\n')),(0,a.kt)("p",null,"in your local.conf."),(0,a.kt)("h3",{id:"configure-mender-server-url-optional"},"Configure Mender server URL (optional)"),(0,a.kt)("p",null,"This section is not required for a successful build but images that are generated by default are only suitable for usage with the Mender client in ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mender.io/architecture/standalone-deployments?target=_blank"},"Standalone deployments"),", due to lack of server configuration."),(0,a.kt)("p",null,"You can edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"conf/local.conf")," file to provide your Mender server configuration, ensuring the generated images and Mender Artifacts are connecting to the Mender server that you are using. There should already be a commented section in the generated ",(0,a.kt)("inlineCode",{parentName:"p"},"conf/local.conf")," file and you can simply uncomment the relevant configuration options and assign appropriate values to them."),(0,a.kt)("p",null,"Build for Hosted Mender:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# To get your tenant token:\n#    - log in to https://hosted.mender.io\n#    - click your email at the top right and then "My organization"\n#    - press the "COPY TO CLIPBOARD"\n#    - assign content of clipboard to MENDER_TENANT_TOKEN\n#\nMENDER_SERVER_URL = "https://hosted.mender.io"\nMENDER_TENANT_TOKEN = "<copy token here>"\n')),(0,a.kt)("p",null,"Build for Mender Demo Server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# https://docs.mender.io/administration/demo-installation\n#\nMENDER_DEMO_HOST_IP_ADDRESS = "<IP address of Mender demo server>"\n')),(0,a.kt)("p",null,"Build for Mender Production/ Self-Hosted (on-prem):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# https://docs.mender.io/3.1/system-updates-yocto-project/build-for-production\n#\n# Uncomment below and update the URL to match your configured domain\n# name and provide the path to the generated server.crt file.\n#\n# Note that a custom server.crt file is only necessary if you are using\n# self-signed certificates.\n#\n# NOTE! It is recommend that you provide below information in your custom\n# Yocto layer and this is only for demo purposes. See linked documentation\n# for additional information.\nMENDER_SERVER_URL = "<URL of Self-Hosted Mender Server>"\nFILESEXTRAPATHS_prepend_pn-mender-client := "<DIRECTORY-CONTAINING-server.crt>:"\nSRC_URI_append_pn-mender-client = " file://server.crt"\n')),(0,a.kt)("h2",{id:"building-the-image"},"Building the image"),(0,a.kt)("p",null,"You can now proceed with building an image:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'MACHINE="odyssey-x86-mender" bitbake odyssey-image-base\n')),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"odyssey-image-base")," with your desired image target."),(0,a.kt)("h2",{id:"using-the-build-output"},"Using the build output"),(0,a.kt)("p",null,"After a successful build, the images and build artifacts are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"build/tmp/deploy/images/odyssey-x86-mender/odyssey-image-base-odyssey-x86.uefiimg.bz2"))),(0,a.kt)("p",null,"if you already have Mender running on your device and want to deploy a rootfs update using this build, you should use the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mender.io/architecture/mender-artifacts?target=_blank"},"Mender Artifact")," files, which have  ",(0,a.kt)("inlineCode",{parentName:"p"},".mender"),"  suffix. You can either deploy this Artifact in managed mode with the Mender server (upload it under Releases in the server UI) or by using the Mender client only in ",(0,a.kt)("a",{parentName:"p",href:"https://docs.mender.io/architecture/standalone-deployments?target=_blank"},"Standalone deployments"),"."),(0,a.kt)("h2",{id:"flash-instructions"},"Flash instructions"),(0,a.kt)("p",null,"There are two different methods of flashing the image and running on the ODYSSEY - X86 board."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Method 1:")," Flash to a USB Flash Drive connected to the ODYSSEY - X86 board and boot the system from the flash drive."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Method 2:")," Flash to an HDD/SSD connected to the ODYSSEY - X86 board and run from the HDD/SSD."),(0,a.kt)("h3",{id:"method-1"},"Method 1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 1.")," ",(0,a.kt)("a",{parentName:"p",href:"https://www.balena.io/etcher/"},"Download balenaEtcher")," according to your operating system")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 2.")," Plug a USB Flash Drive to the PC")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 3.")," Click ",(0,a.kt)("strong",{parentName:"p"},"Flash from file")," and select ",(0,a.kt)("inlineCode",{parentName:"p"},"mender-seeed/build/tmp/deploy/images/odyssey-x86-mender/odyssey-image-base-odyssey-x86.uefiimg.bz2"),"file"))),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Mender/client/balena.png",alt:"pir",width:"600",height:"auto"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 4.")," Click ",(0,a.kt)("strong",{parentName:"p"},"Select target")," and choose the connected USB drive")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 5.")," Finally click ",(0,a.kt)("strong",{parentName:"p"},"Flash"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 6.")," Connect Flash drive to ODYSSEY - X86 board and turn on the board")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 7.")," While turning on the board, keep pressing ",(0,a.kt)("strong",{parentName:"p"},"DELETE key")," to enter ",(0,a.kt)("strong",{parentName:"p"},"BIOS setup"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 8.")," Go to ",(0,a.kt)("strong",{parentName:"p"},"Boot")," section and set the ",(0,a.kt)("strong",{parentName:"p"},"Boot Option #1")," to ",(0,a.kt)("strong",{parentName:"p"},"UEFI: USB, Partition 1")))),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Mender/client/UEFI.png",alt:"pir",width:"1000",height:"auto"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 9.")," Go to ",(0,a.kt)("strong",{parentName:"li"},"Save & Exit")," and select ",(0,a.kt)("strong",{parentName:"li"},"Save Changes and Reset"))),(0,a.kt)("p",null,"Now the OS will be successfully booted from the USB Flash Drive"),(0,a.kt)("h3",{id:"method-2"},"Method 2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 1.")," Follow from ",(0,a.kt)("strong",{parentName:"p"},"step 1 - step 9")," in above ",(0,a.kt)("strong",{parentName:"p"},"Method 1"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 2.")," After booting successfully, turn off the board by executing:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"poweroff\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," We need to boot once after flashing because the ",(0,a.kt)("strong",{parentName:"p"},"data")," partition will grow to take up the remaining space on the flash drive, and we will use that space to store the image we need to flash to the HDD/SSD."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 3.")," Remove the flash drive from the ODYSSEY - X86 and connect to the PC")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 4.")," Open a terminal window and copy the ",(0,a.kt)("strong",{parentName:"p"},"uefiimg")," from the Yocto compilation to the ",(0,a.kt)("strong",{parentName:"p"},"data")," partition of the flash drive"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo cp mender-seeed/build/tmp/deploy/images/odyssey-x86-mender/odyssey-image-base-odyssey-x86.uefiimg /media/username/data\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," Replace ",(0,a.kt)("strong",{parentName:"p"},"username")," with the username of your PC"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 5.")," Remove Flash drive from PC and connect to the ODYSSEY - X86 board. Also connect an external HDD/ SSD to the ODYSSEY board.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 6.")," After the board is booted, type the following in the terminal window to list the disk partitions"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"fdisk -l\n")),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Mender/client/partition.png",alt:"pir",width:"600",height:"auto"})),(0,a.kt)("p",null,"We can see that the connected HDD as ",(0,a.kt)("strong",{parentName:"p"},"/dev/sdb")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 7.")," Flash the ",(0,a.kt)("strong",{parentName:"li"},".uefiimg")," file that we copied before to the connected HDD/SSD using ",(0,a.kt)("strong",{parentName:"li"},"dd")," utility")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"dd if=/data/odyssey-image-base-odyssey-x86.uefiimg of=/dev/sdb\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," Replace ",(0,a.kt)("strong",{parentName:"p"},"/dev/sdb")," with the name corresponding to the connected HDD/SSD"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 8.")," Once flashing is done, poweroff the ODYSSEY - X86")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"poweroff\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 9.")," Remove the USB Flash drive and turn on the ODYSSEY - X86")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 10.")," While turning on the board, keep pressing ",(0,a.kt)("strong",{parentName:"p"},"F7")," to enter BIOS setup")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Step 11.")," Go to ",(0,a.kt)("strong",{parentName:"p"},"BOOT")," section and set the ",(0,a.kt)("strong",{parentName:"p"},"Boot Option #1")," to ",(0,a.kt)("strong",{parentName:"p"},"UEFI: USB, Partition 1")))),(0,a.kt)("p",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"https://files.seeedstudio.com/wiki/Mender/client/UEFI.png",alt:"pir",width:"1000",height:"auto"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 12.")," Go to ",(0,a.kt)("strong",{parentName:"li"},"Save & Exit")," and select ",(0,a.kt)("strong",{parentName:"li"},"Save Changes and Reset"))),(0,a.kt)("p",null,"Now the OS will be successfully booted from the HDD/SSD"))}u.isMDXComponent=!0}}]);