"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[90593],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=u(n),h=o,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||r;return n?i.createElement(m,l(l({ref:t},d),{},{components:n})):i.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=h;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:o,l[1]=a;for(var u=2;u<r;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},12475:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=n(87462),o=(n(67294),n(3905));const r={description:"Grove Beginner Kit for Arduino(EOL)",title:"Grove Beginner Kit for Arduino(EOL)",keywords:["Kit with Courses"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"2/14/2023",author:"hushuxu"}},l=void 0,a={unversionedId:"Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove_Beginner_Kit_for_Arduino",id:"Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove_Beginner_Kit_for_Arduino",title:"Grove Beginner Kit for Arduino(EOL)",description:"Grove Beginner Kit for Arduino(EOL)",source:"@site/docs/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove_Beginner_Kit_for_Arduino.md",sourceDirName:"Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino",slug:"/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove_Beginner_Kit_for_Arduino",permalink:"/docusaurus_wiki/zh-CN/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove_Beginner_Kit_for_Arduino",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove_Beginner_Kit_for_Arduino.md",tags:[],version:"current",lastUpdatedBy:"hushuxu",lastUpdatedAt:1676332800,formattedLastUpdatedAt:"2023\u5e742\u670814\u65e5",frontMatter:{description:"Grove Beginner Kit for Arduino(EOL)",title:"Grove Beginner Kit for Arduino(EOL)",keywords:["Kit with Courses"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"2/14/2023",author:"hushuxu"}},sidebar:"ProductSidebar",previous:{title:"Grove Beginner Kit for Arduino Upverter Guide",permalink:"/docusaurus_wiki/zh-CN/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-for-Arduino-Upverter-Guide"},next:{title:"Grove Speech Recognizer Kit for Arduino",permalink:"/docusaurus_wiki/zh-CN/Top_Brand/Arduino/Kit with Courses/Grove_Speech_Recognizer_Kit_for_Arduino"}},s={},u=[{value:"GROVE SYSTEM",id:"grove-system",level:2},{value:"Grove Beginner Kit for Arduino",id:"grove-beginner-kit-for-arduino",level:2},{value:"Development Board",id:"development-board",level:3},{value:"Seeeduino Lotus V1.1",id:"seeeduino-lotus-v11",level:4},{value:"Sensors",id:"sensors",level:4},{value:"GETTING STARTED",id:"getting-started",level:2},{value:"Minimum Requirement",id:"minimum-requirement",level:3},{value:"Basic Tutorial",id:"basic-tutorial",level:3},{value:"Arduino IDE basic setup",id:"arduino-ide-basic-setup",level:4},{value:"Blink Demo",id:"blink-demo",level:3},{value:"Grove Starter Kit 10 Sessions Tutorial",id:"grove-starter-kit-10-sessions-tutorial",level:2},{value:"Goal",id:"goal",level:3},{value:"Prerequisite",id:"prerequisite",level:3},{value:"Learning outcome",id:"learning-outcome",level:3},{value:"Session 1: Grove - Buzzer",id:"session-1-grove---buzzer",level:3},{value:"Session 2: Grove - Tilt Switch",id:"session-2-grove---tilt-switch",level:3},{value:"Session 3: Grove \u2013 Chainable RGB LED",id:"session-3-grove--chainable-rgb-led",level:3},{value:"Session 4: Grove - Light Sensor",id:"session-4-grove---light-sensor",level:3},{value:"Session 5: Grove - Line Finder",id:"session-5-grove---line-finder",level:3},{value:"Session 6: Grove - LCD RGB Backlight",id:"session-6-grove---lcd-rgb-backlight",level:3},{value:"Session 7: Grove - Temperature &amp; Humidity Sensor (DHT11)",id:"session-7-grove---temperature--humidity-sensor-dht11",level:3},{value:"Session 8: Grove - 3-Axis Digital Accelerometer",id:"session-8-grove---3-axis-digital-accelerometer",level:3},{value:"Session 9: Smart Garden",id:"session-9-smart-garden",level:3},{value:"Session 10: Smart Cup",id:"session-10-smart-cup",level:3},{value:"REFERENCE",id:"reference",level:2},{value:"APPENDIX",id:"appendix",level:2},{value:"TTECH SUPPORT",id:"ttech-support",level:2}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"grove-system"},"GROVE SYSTEM"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/pack.jpg",alt:null})),(0,o.kt)("p",null,"Grove is a modular prototyping system consist of a base unit and various modules with standardized connector. the base unit is generally a microprocessor which allows for communicates, processes and controls the input or output from the Grove modules. Every single Grove module typically addresses a single function, range from a simple button to a more complex heart rate sensor. the standardised Grove connector allows user to assemble Grove units with building block approach, compared to the jumper or solder based system it is much easier to assemble or disassemble, which simplifies the learning system for  experimenting, building and prototyping.\nWe also provide Grove to Pin Header Converter or Grove Base HAT available for variety developing platforms for those who wants to use grove sensor and actuator modules without Grove System Development Board."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/grove-wire.jpg",alt:"Grove header"}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connector.png",alt:"Grove connector"}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/jumperwire.png",alt:"Grove-jumper wire"})),(0,o.kt)("p",null,"Grove system users need to have at least some basic electronic knowledge background, otherwise you need go through this basic tutorial to learn some basic operations on the Grove system, the first part of this tutorial consists list of basic information on the components included in the starter kit, followed by the basic setup of the Arduino IDE for Seeeduino Lotus. Then, the 11 tutorial sessions provide the basic operation on each individual components in the starter kit and the applications by combine multiple modules together, which gives learner some insight and basic knowledge on hooking up and coding with the Grove system."),(0,o.kt)("h2",{id:"grove-beginner-kit-for-arduino"},"Grove Beginner Kit for Arduino"),(0,o.kt)("p",null,"Grove Beginner Kit for Arduino contains one Seeeduino Lotus V1.1 Dev Board(Arduino Compatible) and 8 modules. The detailed information are listed below."),(0,o.kt)("h3",{id:"development-board"},"Development Board"),(0,o.kt)("h4",{id:"seeeduino-lotus-v11"},"Seeeduino Lotus V1.1"),(0,o.kt)("p",null,"Seeeduino Lotus is a development board with ATMEGA328 AVR microcontroller, it is the combination of Seeeduino and Grove Base Shield. It uses an Atmel ATmege328-MU microcontroller and CP2102N chip, ATmege328-MU is a high performance, low power AVR 8-bit Microcontroller, CP2102N is a USB to Serial converter chip which allows you to communicate the Seeeduino Lotus with computer by using a micro-USB cable. Seeeduino Lotus has 14 Digital input/output(6 can be used as PWM outputs) and 7 Analog input/output, a micro USB connection, an ICSP header, 12 Grove connector, a reset button."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Features")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fully compatible with Arduino UNO"),(0,o.kt)("li",{parentName:"ul"},"ATmega328 microcontroller"),(0,o.kt)("li",{parentName:"ul"},"2 on-board Grove connectors"),(0,o.kt)("li",{parentName:"ul"},"14 Digital I/O Pins (6 PWM outputs)"),(0,o.kt)("li",{parentName:"ul"},"6 Analog Inputs"),(0,o.kt)("li",{parentName:"ul"},"ISP Header"),(0,o.kt)("li",{parentName:"ul"},"Arduino UNO-R3 Shield Compatible"),(0,o.kt)("li",{parentName:"ul"},"Micro USB programming and power supply"),(0,o.kt)("li",{parentName:"ul"},"5V Operating Voltage"),(0,o.kt)("li",{parentName:"ul"},"Supports Windows, Mac OS and Linux")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/pinout.png",alt:null})),(0,o.kt)("p",null,"LED-D13: An LED is connected to D13 pin of the board. This can be used as an on-board LED indicator for programs/sketches."),(0,o.kt)("p",null,"USB Input: USB Port is used to connect the board to your PC for programming and for powering up. Micro USB is the a very common type of USB port, could be found with most Android phones, and other devices. You probably have dozens of these cables laying around your house."),(0,o.kt)("p",null,"Reset: This button is conveniently placed on the side to allow you to reset the Seeeduino board even when a shield is placed on top. whereas the button on the other Arduino board is placed on top which makes it hard to reach with shield attached."),(0,o.kt)("p",null,"Power Pins, Analog Pins & Digital Pins: These extra headers are available when you want to connect other none grove connector sensors and actuators, and especially the power headers are used when you want to power more sensors/devices."),(0,o.kt)("p",null,"Grove Connectors: Seeed Studio has a variety of sensors/devices that can make use of this Analog, Digital,I2C and UART connection. In addition, we sell independent Grove connectors to help you make our own sensor connections."),(0,o.kt)("p",null,"ICSP: This is the ICSP connection for the ATmega328P, it is located in the standard ICSP/SPI position for Arduino Uno, Due, Mega, and Leonardo compatible hardware. The SPI pins in this port: MISO, SCK, and MOSI, are also connected to digital pins 12, 13, and 11 respectively just like those of the Arduino Uno."),(0,o.kt)("p",null,"USB 2 Uart: Pinout of USB-2-Uart. These pads can be used to interact with other UART devices by putting the on-board ATmega328 in reset mode. This makes Seeeduino Lotus to be used as a USB2UART utility board."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arduino UNO vs Seeeduino Lotus")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"}),(0,o.kt)("th",{parentName:"tr",align:"center"},"Seeeduino Lotus V1.1"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Arduino Uno R3"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Release Date"),(0,o.kt)("td",{parentName:"tr",align:"center"},"2018/03"),(0,o.kt)("td",{parentName:"tr",align:"center"},"2016/02")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Microcontroller"),(0,o.kt)("td",{parentName:"tr",align:"center"},"ATMega328P"),(0,o.kt)("td",{parentName:"tr",align:"center"},"ATMega328P")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Operating Voltage"),(0,o.kt)("td",{parentName:"tr",align:"center"},"5V"),(0,o.kt)("td",{parentName:"tr",align:"center"},"5V")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Flash"),(0,o.kt)("td",{parentName:"tr",align:"center"},"32KB"),(0,o.kt)("td",{parentName:"tr",align:"center"},"32KB")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"SRAM"),(0,o.kt)("td",{parentName:"tr",align:"center"},"2KB"),(0,o.kt)("td",{parentName:"tr",align:"center"},"2KB")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"EEPROM"),(0,o.kt)("td",{parentName:"tr",align:"center"},"1KB"),(0,o.kt)("td",{parentName:"tr",align:"center"},"1KB")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Power supply interface"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Micro USB"),(0,o.kt)("td",{parentName:"tr",align:"center"},"USB, DC Port")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Grove Connectors"),(0,o.kt)("td",{parentName:"tr",align:"center"},"12"),(0,o.kt)("td",{parentName:"tr",align:"center"},"None")))),(0,o.kt)("h4",{id:"sensors"},"Sensors"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.seeedstudio.com/Grove-Buzzer-p-768.html"},"Grove - Buzzer"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/buzzer.jpg",alt:null})),(0,o.kt)("p",null,"This module uses piezo buzzer as the main component, it can produce high pitch tone while it is connected to digital output and logic level set to High, otherwise it can produce various tones according to the frequencies generated from the Analog PWM output that connected to it. (note: the frequency range that normal human ear can distinguish is between 20 Hz and 20kHz.)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.seeedstudio.com/Grove-Tilt-Switch-p-771.html"},"Grove - Tilt Switch"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/Tilt.jpg",alt:null})),(0,o.kt)("p",null,"Grove-Tilt Switch is the equivalent of a button, and is used as a digital input. Inside the tilt switch is a pair of balls that make contact with the pins when the case is upright. Tilt the case over and the balls don't touch, thus not making a connection. It is wired to the SIG line, NC is not used on this Grove module."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.seeedstudio.com/Grove-Chainable-RGB-Led-V2-0-p-2903.html"},"Grove - Chainable RGB LED"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/Grove-Chainable_RGB_LED_V2.0.jpg",alt:null})),(0,o.kt)("p",null,"Grove - Chainable RGB LED\xa0is based on P9813 chip which is a full-color LED driver. It provides 3 constant-current drivers as well as modulated output of 256 shades of gray. It communicates with a MCU using 2-wire transmission (Data and Clock). This 2-wire transmission can be used to cascade additional\xa0Grove - Chainable RGB LED\xa0modules. The built-in clock regeneration enhances the transmission distance. This Grove module is suitable for any colorful LED based projects. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.seeedstudio.com/Grove-Light-Sensor-v1-2-p-2727.html"},"Grove - Light Sensor"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/lightsensor.jpg",alt:null})),(0,o.kt)("p",null,"The Grove - Light sensor integrates a photo-resistor(light dependent resistor) to detect the intensity of light. The resistance of photo-resistor decreases when the intensity of light increases. A dual OpAmp chip LM358 on board produces voltage corresponding to intensity of light(i.e. based on resistance value). The output signal is analog value, the brighter the light is, the larger the value."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.seeedstudio.com/Grove-Line-Finder-v1-1-p-2712.html"},"Grove - Line Finder"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/linefinder.jpg",alt:null})),(0,o.kt)("p",null,"Grove-Line finder is designed for line-following robot. It has an IR emitting LED and an IR sensitive phototransistor. It can output digital signal to a microcontroller so that the robot can follow a black line on white background, or vice versa. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.seeedstudio.com/Grove-LCD-RGB-Backlight-p-1643.html"},"Grove - LCD RGB Backlight"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/LCD.jpg",alt:null})),(0,o.kt)("p",null,"This Grove - LCD RGB Backlight module is a 16 Characters  2 Lines LCD display, it uses I2C bus interface to communicate with the development board, thus these will reduce the pin header from 10 to 2 which is very convenient for the Grove system. This LCD display module also supports customise characters, you can create and display heart symbol or stick-man on this LCD module through a simple coding configuration."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-DHT1-p-745.html"},"Grove - Temperature & Humidity Sensor(DHT11)"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/DHT11.jpg",alt:null})),(0,o.kt)("p",null,"This Temperature & Humidity sensor provides a pre-calibrated digital output. A unique capacitive sensor element measures relative humidity and the temperature is measured by a negative temperature coefficient (NTC) thermistor. It has excellent reliability and long term stability. Please note that this sensor will not work for temperatures below 0 degree. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.seeedstudio.com/Grove-3-Axis-Digital-Accelerometer-1-5-p-765.html"},"Grove - 3-Axis Digital Accelerometer"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/3_axis_cover.jpg",alt:null})),(0,o.kt)("p",null,"3-Axis Digital Accelerometer is the key part in projects like orientation detection, gesture detection and Motion detection. This 3-Axis Digital Accelerometer(\xb11.5g) is based on Freescale's low power consumption module, MMA7660FC. It features up to 10,000g high shock survivability and configurable Samples per Second rate. For generous applications that don't require too large measurement range, this is a great choice because it's durable, energy saving and cost-efficient. "),(0,o.kt)("h2",{id:"getting-started"},"GETTING STARTED"),(0,o.kt)("h3",{id:"minimum-requirement"},"Minimum Requirement"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Grove starter kit"),(0,o.kt)("li",{parentName:"ul"},"micro USB cable"),(0,o.kt)("li",{parentName:"ul"},"Computer with Arduino IDE")),(0,o.kt)("h3",{id:"basic-tutorial"},"Basic Tutorial"),(0,o.kt)("h4",{id:"arduino-ide-basic-setup"},"Arduino IDE basic setup"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 1."),"  Install USB to Serial driver for Seeeduino Lotus V1.1"),(0,o.kt)("p",null,"Seeeduino lotus Version 1.1 and above which adapts the CP2102N USB to serial chip, it adds support for majority operating systems include Windows, MacOS and Linux, please download and install the relevant driver for your operating system.\nDownload links:\nOfficial Website: ",(0,o.kt)("a",{parentName:"p",href:"https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers"},"CP210x USB to UART Bridge VCP Drivers")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/logo.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Install driver")),(0,o.kt)("p",null,"Windows:"),(0,o.kt)("p",null,"Extract/unzip the downloaded compressed driver file, open the extracted file and select install the relevant driver according to the bit of your operating system, in this case we selected 64bit, 32bits OS user should select _x86 file, follow the install wizard to install."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/win1.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/win2.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/win3.png",alt:null})),(0,o.kt)("p",null,"Mac OS:"),(0,o.kt)("p",null,"Double click \u201cSilicon Labs VCP Driver.pkg\u201d file, and follow the setup wizard to install."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/mac1.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/mac2.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 2.")," Download and Install ",(0,o.kt)("a",{parentName:"p",href:"https://www.arduino.cc/en/Main/Software"},"Arduino IDE")),(0,o.kt)("p",null,"Please download and install the Arduino IDE according to your operating system."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard.png",alt:null})),(0,o.kt)("b",{id:"step3"},"Step 3.")," Add library for Seeeduino Lotus",(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open Arduino | Preferences, from the preferences window under settings page find Additional Boards Manager URLS, copy & paste the Library URL into the text box, then press ok to take effect.\nLibrary URL:\t",(0,o.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/Seeed-Studio/Seeed_Platform/master/package_legacy_seeeduino_boards_index.json"},"https://raw.githubusercontent.com/Seeed-Studio/Seeed_Platform/master/package_legacy_seeeduino_boards_index.json"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard1.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard2.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard3.png",alt:null})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open Tools | Board: | Boards Manager, search for Seeeduino AVR and click install to install the Seeeduino AVR library. if you cannot see the Seeeduino AVR listed in the Boards Manager window, please repeat the first step and make sure the URL you entered is correct.")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard4.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard5.png",alt:null})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open Tools | Board: under the secondary list you should find Seeeduino AVR Boards section as shown, and please select the correct boards according to your development environment, in this tutorial we should select Seeeduino Lotus.")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard6.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 4.")," Connect Seeeduino Lotus"),(0,o.kt)("p",null,"Please connect Seeeduino Lotus and computer through a Micro-USB cable, the green power LED on Seeeduino lotus should lit up."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/usb.jpg",alt:"with micro-USB"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 5.")," Configure IDE for Seeeduino Lotus"),(0,o.kt)("p",null,"Please follow the steps as shown before, select \u201cSeeeduino Lotus\u201d under the Boards Manager."),(0,o.kt)("p",null,"Select the serial device of the Arduino board from the Tools | Serial Port menu. To find out the correct serial device, you can disconnect your Arduino board and re-open the menu; the entry that disappears should be the Arduino board. Reconnect the board and select that serial port. The entry you selected should contain \u201cSLAB_USB\u201d."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard07.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard7.png",alt:null})),(0,o.kt)("p",null,"Set \u201cTools | Programmer\u201d as \u201cAVR ISP\u201d."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard8.png",alt:null})),(0,o.kt)("h3",{id:"blink-demo"},"Blink Demo"),(0,o.kt)("p",null,"After all the basic set up of Arduino IDE, we can now test the blink demo code on the Seeeduino Lotus development board. Note: You should complete the steps above to continue the following."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Select Blink Demo From Menu")),(0,o.kt)("p",null,"Select File | Examples | 01 Basics | Blink from menu bar, the blink example code should appear in the new window. "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard9.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Upload code")),(0,o.kt)("p",null,"Please ensure the correct Board, Port and Programmer are selected under tools menu.\nNow we can upload the code into the Lotus dev board by press the right arrow icon on the top left corner of the IDE. "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard10.png",alt:null})),(0,o.kt)("p",null,"Once the code uploaded successfully, the text \u201cavrdude done. Thank you.\u201d should appear in the log window of the IDE."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard11.png",alt:null})),(0,o.kt)("p",null,"Now you should see the built-in LED flashes in a one second interval."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/blink.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Explanation of the blink code")),(0,o.kt)("p",null,"void setup() is the setup function only runs one time when you press reset or power the board."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\nvoid setup() {\n}\n\n")),(0,o.kt)("p",null,"initialize digital pin LED_BUILTIN as an output."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\npinMode(LED_BUILTIN, OUTPUT);\n\n")),(0,o.kt)("p",null,"void loop() is the loop function runs over and over again forever."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\nvoid loop() {\n}\n\n")),(0,o.kt)("p",null,"digitalWrite()is to set the LED_BUILTIN pin as voltage level HIGH, which means to turn on the LED. Similarly to turn off the LED just set the voltage level to LOW by changing the code HIGH to LOW."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\ndigitalWrite(LED_BUILTIN, HIGH);\ndigitalWrite(LED_BUILTIN, LOW);\n\n")),(0,o.kt)("p",null,"delay() means to pause the program, the number inside the bracket means the amount of time(in milliseconds) to pause(delay)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\ndelay(1000);\n\n")),(0,o.kt)("h2",{id:"grove-starter-kit-10-sessions-tutorial"},"Grove Starter Kit 10 Sessions Tutorial"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/kit.jpg",alt:null})),(0,o.kt)("h3",{id:"goal"},"Goal"),(0,o.kt)("p",null,"This section consists of 10 tutorials, the tutorials can be divided into two parts, the first 8 sessions introduce the basic operation of each individual module from this starter kit, and the last 2 sessions uses example cases to show how the modules can be combined and applied in real life applications."),(0,o.kt)("h3",{id:"prerequisite"},"Prerequisite"),(0,o.kt)("p",null,"The fundamental knowledge on operate Seeeduino Lotus with Arduino IDE and the coding skill are essential to this tutorial. Therefore, please make sure you have completed the basic setup tutorial above and successfully installed the USB to serial driver on your operating system for Seeeduino Lotus, finished the Blink LED demo and ensure it is fully working with the Seeeduino Lotus board."),(0,o.kt)("h3",{id:"learning-outcome"},"Learning outcome"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Be able to operate Arduino IDE to write code for Seeeduino Lotus V1.1 to drive modules from Grove Starter Kit."),(0,o.kt)("li",{parentName:"ul"},"Be able to identify the type of modules include in this Kit and their applications."),(0,o.kt)("li",{parentName:"ul"},"Be able to demonstrate each components of Grove Starter Kit and utilise the relevant module to your own projects after this tutorial")),(0,o.kt)("h3",{id:"session-1-grove---buzzer"},"Session 1: Grove - Buzzer"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/buzzer.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective"),"\t"),(0,o.kt)("p",null,"Using buzzer to generate some noise and also setting specific frequency to produce some tones."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Buzzer module is an actuator."),(0,o.kt)("li",{parentName:"ul"},"Use digital signal to make buzz noise"),(0,o.kt)("li",{parentName:"ul"},"Produce specific tone by setting frequency accordingly"),(0,o.kt)("li",{parentName:"ul"},"Use tone(pin, frequency, duration) function to make buzzer play music"),(0,o.kt)("li",{parentName:"ul"},"Learn how to use \u201cfor loop\u201d in Arduino IDE")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement")),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"a computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seeeduino Lotus V1.1 development board"),(0,o.kt)("li",{parentName:"ul"},"Grove cable"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Buzzer module\t")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 1.")," Please use the Grove cable to connect Grove - Buzzer module to D6 port of Seeeduino Lotus"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/buzzer_ard.jpg",alt:"D6 with seeeduino"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 2.")," Link Seeeduino Lotus with computer by a micro USB cable."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming"),"\t"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1"),":Use digital logic high/low to make the buzzer \u201cbuzz\u201d"),(0,o.kt)("p",null,"Step 1: Copy & Paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"//assign buzzer as pin 6\n#define buzzer 6\n\nvoid setup()\n{\n  //set buzzer as output\n  pinMode(buzzer, OUTPUT);\n}\n\nvoid loop()\n{ //turn on buzzer(set logic level high)\n  digitalWrite(buzzer, HIGH);\n  //wait 1s\n  delay(1000);\n  //turn off buzzer(set logic level low)\n  digitalWrite(buzzer, LOW);\n  //wait 1s\n  delay(1000);\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("admonition",{type:"success"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"When the code finishes upload, you can hear \u201cbuzz\u201d with a 1 second gap in between sound.\n"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2"),":Use different frequency to make the buzzer generate different tone."),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//assign buzzer as pin 6 \n#define buzzer 6                \n\nvoid setup()\n{\n  /* tone(pin, frequency, duration) */\n  //set buzzer pin to play 264Hz for 300ms\n  tone(buzzer, 262, 300);\n  //wait 1s\n  delay(1000);\n\n  //set buzzer pin to play 297Hz for 300ms\n  tone(buzzer, 294, 300);\n  //wait 1s\n  delay(1000);\n\n  //set buzzer pin to play 330Hz for 300ms\n  tone(buzzer, 330, 300);\n  //wait 1s\n  delay(1000);\n}\n\nvoid loop()\n{\n  // no need to repeat the tone.\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("admonition",{type:"success"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"When the code finishes upload, you should hear the buzzer is making \u201cDo\u3001 Re\u3001 Mi\u201d sound.\n"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3"),":Use tone(pin, frequency, duration)function to make music from buzzer\t"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},"\n// initalise the frequency of the notes\n#define NOTE_A4  440\n#define NOTE_AS4 466\n#define NOTE_C4  262\n#define NOTE_D4  294\n#define NOTE_E4  330\n#define NOTE_F4  349\n#define NOTE_G4  392\n#define NOTE_C5  523\n\n//assign buzzer as pin 6\n#define buzzer 6\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C4, NOTE_C4, NOTE_D4, NOTE_C4, NOTE_F4, NOTE_E4,\n  NOTE_C4, NOTE_C4, NOTE_D4, NOTE_C4, NOTE_G4, NOTE_F4,\n  NOTE_C4, NOTE_C4, NOTE_C5, NOTE_A4, NOTE_F4, NOTE_E4, NOTE_D4,\n  NOTE_AS4, NOTE_AS4, NOTE_A4, NOTE_F4, NOTE_G4, NOTE_F4\n};\n\n// note durations: 4 = quarter note, 8 = eighth note, etc.:\nint noteDurations[] = {\n  8, 8, 4, 4, 4, 2,\n  8, 8, 4, 4, 4, 2,\n  8, 8, 4, 4, 4, 4, 4,\n  8, 8, 4, 4, 4, 2,\n};\n\nvoid setup() {\n  // iterate over the notes of the melody:\n  for (int thisNote = 0 ; thisNote < 25 ; thisNote++) {\n\n    // to calculate the note duration, take one second divided by the note type.\n    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.\n    int noteDuration = 1000 / noteDurations[thisNote];\n    tone(buzzer, melody[thisNote], noteDuration);\n\n    // to distinguish the notes, set a minimum time between them.\n    int pauseBetweenNotes = noteDuration * 1.30;\n    delay(pauseBetweenNotes);\n    noTone(buzzer);\n  }\n}\n\nvoid loop() {\n  // no need to repeat the melody.\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("admonition",{type:"success"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"When the code finishes upload, you should hear a melody from buzzer, please what song is it.\n"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Further Explore")),(0,o.kt)("p",null,'Please checkout Brett Hagman\u2019s GitHub repo "',(0,o.kt)("a",{parentName:"p",href:"https://github.com/bhagman/Tone"},"Tone"),'" to create tones and music.'),(0,o.kt)("h3",{id:"session-2-grove---tilt-switch"},"Session 2: Grove - Tilt Switch"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/Tilt.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective"),"\nUse tilt switch module to turn on/off the built-in LED on the Seeeduino Lotus, and also use the tilt switch to make the buzzer module from previous session to buzz."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tilt Switch is a signal input module"),(0,o.kt)("li",{parentName:"ul"},"The operation on tilt switch"),(0,o.kt)("li",{parentName:"ul"},"uses digitalRead(pin) function get the input logic signal from tilt switch which is HIGH for switched on, and LOW for switched off."),(0,o.kt)("li",{parentName:"ul"},"if(condition){}else{}function and comparison operator such as !=(not equal to), <(less than), <=(less than or equal to), ==(equal to), >(greater than) and >=(greater than or equal to).")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement")),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"a computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seeeduino Lotus V1.1 development board"),(0,o.kt)("li",{parentName:"ul"},"Grove cable"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Tilt Switch"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Buzzer")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1: Connect Grove \u2013 Tilt Switch to D5 port of Seeeduino Lotus."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/tilt_ard.jpg",alt:null})),(0,o.kt)("p",null,"Step 2:  Link Seeeduino Lotus with computer by a micro USB cable "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming"),"\n",(0,o.kt)("strong",{parentName:"p"},"Example 1"),":Observe the tilt switch behaviour by using Serial Monitor"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//assign name tiltswitchPin to pin 5\n#define tiltswitchPin 5\n//creates a integer variable called 'val' to store read value\nint val;\n\nvoid setup()\n{\n  //set pinMode of tiltswitchPin to input\n  pinMode(tiltswitchPin, INPUT);\n  // opens serial port, sets data rate to 9600 bps\n  Serial.begin(9600);\n}\n\nvoid loop()\n{ //read the tilt switch input\n  val = digitalRead(tiltswitchPin);\n  //display the tilt switch status, 1 is on, 0 is off.\n  Serial.println(val);\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Open Serial Monitor"),(0,o.kt)("p",null,"to open serial monitor please select Tools | Serial Monitor from menu bar, or simply click the magnifier icon on the tool bar. Note: Please wait for the code finish uploaded before open serial monitor. "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard12.png",alt:null})),(0,o.kt)("p",null,"Step 4: Observe result"),(0,o.kt)("p",null,"Please tilt the tilt switch in both directions, you should see \u201c1\u201d or \u201c0\u201d displayed in serial monitor, now you can find the right orientation for tilt switch to turn on/off."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/tilt_off&on.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard13.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2"),":Use tilt switch to turn on/off built-in LED"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//set title of pin 5 as tiltSwitch\n#define tiltSwitch 5\n\nvoid setup()\n{ //set pin 5(tilt switch) as input pin\n  pinMode(tiltSwitch, INPUT);\n  //set pin 13(Builtin LED) as output pin\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop()\n{ //read the status of tilt switch\n  if (HIGH == digitalRead(tiltSwitch)) {\n    /*\n       if the logic level of tilt switch\n       is high turn on the builtin LED\n    */\n    digitalWrite(LED_BUILTIN, HIGH);\n  } else\n  {\n    //otherwise turn off the builtin LED\n    digitalWrite(LED_BUILTIN, LOW);\n  }\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("admonition",{type:"success"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"Now you should be able to turn on/off the built-in LED on the Seeeduino Lotus by tilting the tilt switch in the right orientation.\n"))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/tilt_off&on.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3"),": Use tilt switch to pause and play ringtone from the buzzer\nPlease connect Grove \u2013 Buzzer module to D6 port of Seeeduino Lotus"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/buzzer_tilt.jpg",alt:null})),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n// initalise the frequency of the notes\n#define NOTE_A4  440\n#define NOTE_AS4 466\n#define NOTE_C4  262\n#define NOTE_D4  294\n#define NOTE_E4  330\n#define NOTE_F4  349\n#define NOTE_G4  392\n#define NOTE_C5  523\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C4, NOTE_C4, NOTE_D4, NOTE_C4, NOTE_F4, NOTE_E4,\n  NOTE_C4, NOTE_C4, NOTE_D4, NOTE_C4, NOTE_G4, NOTE_F4,\n  NOTE_C4, NOTE_C4, NOTE_C5, NOTE_A4, NOTE_F4, NOTE_E4, NOTE_D4,\n  NOTE_AS4, NOTE_AS4, NOTE_A4, NOTE_F4, NOTE_G4, NOTE_F4\n};\n\n// note durations: 4 = quarter note, 8 = eighth note, etc.:\nint noteDurations[] = {\n  8, 8, 4, 4, 4, 2,\n  8, 8, 4, 4, 4, 2,\n  8, 8, 4, 4, 4, 4, 4,\n  8, 8, 4, 4, 4, 2,\n};\n\n//set title of pin 5 as tiltSwitch\n#define tiltSwitch 5\n//set title of pin 6 as buzzer\n#define buzzer 6\n// set variable currentNote to store latest note played\nint currentNote;\n\nvoid setup()\n{\n  //set pin 5(tilt switch) as input pin\n  pinMode(tiltSwitch, INPUT);\n}\n\nvoid loop()\n{\n  /*read the status of tilt switch\nif the logic level of tilt switch\nis high, start play music */\n  if (HIGH == digitalRead(tiltSwitch)) {\n\nfor (int thisNote = currentNote ; thisNote < 25 ; thisNote++) {\n  // to calculate the note duration, take one second divided by the note type.\n  //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.\n  int noteDuration = 1000 / noteDurations[thisNote];\n  tone(buzzer, melody[thisNote], noteDuration);\n\n  // to distinguish the notes, set a minimum time between them.\n  int pauseBetweenNotes = noteDuration * 1.30;\n  delay(pauseBetweenNotes);\n\n  /*reset the currentNote to the 0\nis the music is finished*/\n  if (thisNote >= 24) {\ncurrentNote = 0;\n  }\n\n  /*druing the music read the status\nof tilt switch if the logic level\nof tilt switch is LOW, stop play\nmusic and store the previous played\ntone and jump to next tone*/\n  if (LOW == digitalRead(tiltSwitch)) {\n\n//store the current note(thisNote) to currentNote\ncurrentNote = thisNote;\n//set the next note ready to play by increase currentNote by 1 increament\ncurrentNote ++;\n/*reset the currentNote to the beginning\n  is the music is finished*/\nif (currentNote >= 25)\n{\n  //restart the music from beginning by reset the currentNote to 0,\n  currentNote = 0;\n}\n//if the tilt switch is set to logic level low, stop play music\nbreak;\n  }\n}\n  }\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("admonition",{type:"success"},(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"Now you should be able to pause the ringtone by tilting the tilt switch to off position, and resume the music tone by tilting the tilt switch to on position.\n"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Further Explore")),(0,o.kt)("p",null,"After this session, you can attach the tilt switch sensor module to your toolbox lid, so when you lift the lid, triggers the tilt switch to turn on, then you can set a delay for a short period to activate buzzer to make some tones which reminds you the lid is still open, so you will not to forget to close the lid after you\u2019ve finished using the toolbox."),(0,o.kt)("h3",{id:"session-3-grove--chainable-rgb-led"},"Session 3: Grove \u2013 Chainable RGB LED"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/Grove-Chainable_RGB_LED_V2.0.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective"),"\t"),(0,o.kt)("p",null,"Use code to control the chainable RGB LED to show different color, and switch between colors by using tilt switch."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Chainable RGB LED is an actuator"),(0,o.kt)("li",{parentName:"ul"},"Import library for grove module"),(0,o.kt)("li",{parentName:"ul"},"Use setColorHSB() function to control the hue, saturation and brightness of the LED module"),(0,o.kt)("li",{parentName:"ul"},"Use setColorRGB() function to control the color and brightness of the LED module"),(0,o.kt)("li",{parentName:"ul"},"Use % (modulo) operation to find remainder, eg. 5%2=1, 9%3=0."),(0,o.kt)("li",{parentName:"ul"},"Use switch(val)\u2026case\u2026; function")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement"),"\t"),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seeeduino Lotus V1.1 development board"),(0,o.kt)("li",{parentName:"ul"},"Grove cable"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Chainable RGB LED"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Tilt Switch"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Buzzer")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1: Connect Grove \u2013 Chainable RGB LED to D7 port of Seeeduino Lotus, Note: please connect the G|V|DI|CI port from LED as shown below."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/rgb_ard.jpg",alt:null})),(0,o.kt)("p",null,"Step 2: Link Seeeduino Lotus with computer by a micro USB cable."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Add Library")),(0,o.kt)("p",null,"Steps below shows how to add ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pjpmarques/ChainableLED/archive/v1.2.zip"},"library")," for Grove \u2013 Chainable RGB LED."),(0,o.kt)("p",null,"Step 1: Open Github repository from Library URL, and download the zip data"),(0,o.kt)("p",null,"Please find \u201cClone or download | Download ZIP\u201d from the Github page, you must choose Download ZIP only, and please remember the file path that you have downloaded and saved the zip file."),(0,o.kt)("p",null,"Step 2: Select the \u201cinclude Library | Add .ZIP Library.."),(0,o.kt)("p",null,"Please select open Sketch | Include Library | Add .ZIP Library\u2026, in the new pop up window please select the zip file you have downloaded from last step, then click choose."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard14.png",alt:null})),(0,o.kt)("p",null,"Step 3: Test if the library added successfully"),(0,o.kt)("p",null,"Select and open File | Examples | ChainableLED-1.2 | CycleTroughColors"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/ard15.png",alt:null})),(0,o.kt)("p",null,"Upload Code: Click upload the code"),(0,o.kt)("admonition",{type:"success"},(0,o.kt)("p",{parentName:"admonition"}," \tif the LED module is cycling trough different colors, then you know you have successfully load the Library.")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/rgb_flash_8.jpg",alt:null})),(0,o.kt)("p",null,"Conclusion: Adding library method allows user easily add third party sensor drivers and libraries made by sensor module venders, for example, in this tutorial session, we used setColorRGB(byte led, byte red, byte green, byte blue) function is one of the function implement by Seeed Studio, this reduces user\u2019s development cost when they adapt new sensor module. You will need to add more libraries for the other grove modules later."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1"),":Use setColorHSB function to change the LED color"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},"\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n/*assign leds as the name of\n  the ChainableLED set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\nvoid setup()\n{\n  //initialise ChainableLED leds\n  leds.init();\n}\n//initialise hue as float point with value of 0.0\nfloat hue = 0.0;\n//initialise up as boolean with value of true\nboolean up = true;\n\nvoid loop()\n{\n  /*for loop is used for loop through\n    each LED connected to the chain\n    in this case there is only one LED\n  */\n  for (byte i = 0; i < NUM_LEDS; i++) {\n\n    /*setColorHSB(byte led, float hue, float saturation, float brightness);\n       in this case set the first and only chainableLED 0 with changing hue\n       and full saturation and half brightness\n    */\n    leds.setColorHSB(i, hue, 1, 0.5);\n    //    delay for 50ms for each color\n    delay(50);\n\n    /*if up is true increase\n      hue at 0.025 interval\n      otherwise decrease hue\n      at 0.025 interval\n    */\n    if (up) {\n      hue += 0.025;\n    }\n    else\n    {\n      hue -= 0.025;\n    }\n    /*\n      if hue is greater than 1.0\n       and up is true set up to false,\n       otherwise if hue is less or\n       equal to 0.0 and up is not\n       ture(! means is not) set up\n       to true\n    */\n    if (hue >= 1.0 && up)\n    {\n      up = false;\n    }\n    else if (hue <= 0.0 && !up)\n    {\n      up = true;\n    }\n  }\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"You should see the color of LED is changing according to the value of hue, which is increasing by 0.025 increment and when the hue value reaches 1, the hue value should reduce by 0.025 decrement until the value become 0, and each color should lit for 50 millisecond."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/rgb_flash_8.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2"),":Use setColorRGB function to change the color and brightness of LED"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},"\n/*\n   Example of using the ChainableRGB library for controlling a Grove RGB.\n   This code fades in an out colors in a strip of leds.\n*/\n\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n/*assign leds as the name of\n  the ChainableLED set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\nvoid setup()\n{\n  //initialise ChainableLED leds\n  leds.init();\n}\n//initialise power as byte with value of 0\nbyte power = 0;\n\nvoid loop()\n{\n  /*for loop is used for loop through\n    each LED connected to the chain\n    in this case there is only one LED\n  */\n  for (byte i = 0; i < NUM_LEDS; i++)\n  {\n    /*\n      % means modulo operation to find remainder\n      eg 0 % 2 = 0, 1 % 2 = 1,  2 % 2 = 0...\n      setColorRGB(byte led, byte red, byte green, byte blue);\n      so in this case the even number of the LED chain\n      will fading green color, odd number of the LED\n      chain will fading red color, since we count the\n      first LED as 0.\n    */\n    if (i % 2 == 0)\n      //brighter red color from 0 to full power\n      leds.setColorRGB(i, power, 0, 0);\n    else\n      //dimmer green color from full power to 0\n      leds.setColorRGB(i, 0, 255 - power, 0);\n  }\n  //set power increment as 10\n  power += 10;\n  //light 0.5s for each brightness\n  delay(500);\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"you should see the red color LED increases the brightness in every 0.5s, because we only set the value for red variable in the setColorRGB(byte led, byte red, byte green ,byte blue) function."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/rgb_eg2.jpg",alt:null})),(0,o.kt)("p",null,"If we change both red and green variables from this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"leds.setColorRGB(i, power, 0, 0);\n")),(0,o.kt)("p",null,"to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"leds.setColorRGB(i, power, 255-power, 0);\n")),(0,o.kt)("p",null,"please observe the difference."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3"),":Use tilt switch to control the LED and Buzzer"),(0,o.kt)("p",null,"Connect Grove \u2013 Tilt Switch to D5 port of Seeeduino Lotus."),(0,o.kt)("p",null,"Connect Grove \u2013 Buzzer module to D6 port of Seeeduino Lotus."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/rgb_buzzer_tilt.jpg",alt:null})),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n// initalise the frequency of the notes\n#define NOTE_A4  440\n#define NOTE_AS4 466\n#define NOTE_C4  262\n#define NOTE_D4  294\n#define NOTE_E4  330\n#define NOTE_F4  349\n#define NOTE_G4  392\n#define NOTE_C5  523\n\n// notes in the melody:\nint melody[] = {\n  NOTE_C4, NOTE_C4, NOTE_D4, NOTE_C4, NOTE_F4, NOTE_E4,\n  NOTE_C4, NOTE_C4, NOTE_D4, NOTE_C4, NOTE_G4, NOTE_F4,\n  NOTE_C4, NOTE_C4, NOTE_C5, NOTE_A4, NOTE_F4, NOTE_E4, NOTE_D4,\n  NOTE_AS4, NOTE_AS4, NOTE_A4, NOTE_F4, NOTE_G4, NOTE_F4\n};\n\n// note durations: 4 = quarter note, 8 = eighth note, etc.:\nint noteDurations[] = {\n  8, 8, 4, 4, 4, 2,\n  8, 8, 4, 4, 4, 2,\n  8, 8, 4, 4, 4, 4, 4,\n  8, 8, 4, 4, 4, 2,\n};\n\n//set title of pin 5 as tiltSwitch\n#define tiltSwitch 5\n//set title of pin 6 as buzzer\n#define buzzer 6\n\n/*assign leds as the name of\n  the ChainableLED set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\n// set variable currentNote to store latest note played\nint currentNote;\n//initialise hue as float point with value of 0.0\nfloat hue = 0.0;\n//initialise up as boolean with value of true\nboolean up = true;\n//initialise power as byte with value of 0\nbyte power = 0;\n//initialise color as integer with value of 0\nint color = 0;\n\nvoid setup()\n{\n  //set pin 5(tilt switch) as input pin\n  pinMode(tiltSwitch, INPUT);\n  //initialise ChainableLED leds\n  leds.init();\n}\n\nvoid loop()\n{\n  /*read the status of tilt switch\n    if the logic level of tilt switch\n    is high, start play music */\n  if (HIGH == digitalRead(tiltSwitch)) {\n\n    for (int thisNote = currentNote ; thisNote < 25 ; thisNote++) {\n      // to calculate the note duration, take one second divided by the note type.\n      //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.\n      int noteDuration = 1000 / noteDurations[thisNote];\n      tone(buzzer, melody[thisNote], noteDuration);\n\n      // to distinguish the notes, set a minimum time between them.\n      int pauseBetweenNotes = noteDuration * 1.30;\n      delay(pauseBetweenNotes);\n\n      /*reset the currentNote to the 0\n        is the music is finished*/\n      if (thisNote >= 24) {\n        currentNote = 0;\n      }\n\n      /*set the LED to loop through\n        different colors with different hue*/\n      leds.setColorHSB(0, hue, 1, 0.5);\n\n      /*if up is true increase\n        hue at 0.025 interval\n        otherwise decrease hue\n        at 0.025 interval\n      */\n      if (up) {\n        hue += 0.025;\n      }\n      else\n      {\n        hue -= 0.025;\n      }\n      /*if hue is greater than 1.0\n         and up is true set up to false,\n         otherwise if hue is less or\n         equal to 0.0 and up is not\n         ture(! means is not) set up\n         to true\n      */\n      if (hue >= 1.0 && up)\n      {\n        up = false;\n      }\n      else if (hue <= 0.0 && !up)\n      {\n        up = true;\n      }\n\n      /*druing the music read the status\n        of tilt switch if the logic level\n        of tilt switch is LOW, stop play\n        music and store the previous played\n        tone and jump to next tone*/\n      if (LOW == digitalRead(tiltSwitch)) {\n        /* use switch...case to set the LED loop through three colors\n           Red when color = 0 enters case 0\n           Green when color = 1 enters case 1\n           Blue when color = 2 enters case 2\n           reset color to 0 if color is greater or equals 3\n        */\n        if (color >= 3) {\n          color = 0;\n        }\n        switch (color) {\n          case 0:\n            //set LED to Red\n            leds.setColorRGB(0, 255, 0, 0);\n            break;\n          case 1:\n            //set LED to Green\n            leds.setColorRGB(0, 0, 255, 0);\n            break;\n          case 2:\n            //set LED to Blue\n            leds.setColorRGB(0, 0, 0, 255);\n            break;\n        }\n        //increase color by 1 increment everytime enter this condition\n        color ++;\n\n        //store the thisNote to currentNote\n        currentNote = thisNote;\n        //set the next note ready to play by increase currentNote by 1 increament\n        currentNote ++;\n        /*reset the currentNote to the beginning\n          is the music is finished*/\n        if (currentNote >= 25)\n        {\n          //restart the music from beginning by reset the currentNote to 0,\n          currentNote = 0;\n        }\n        //if the tilt switch is set to logic level low, stop playing music\n        break;\n      }\n    }\n  }\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"By tilting the tilt switch, you should see when the tilt switch is on, LED changes color along with the tone of buzzer changes, when the tilt switch is off, LED will cycle through Red, Green and Blue and the buzzer stops."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/rgb_eg3.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Further Explore")),(0,o.kt)("p",null,"After this session, you can now combine the modules from the first three sessions and turn into a birthday gift box, where you can place the tilt switch sensor on the box lid, at the time the box is open, the tilt switch is triggered, then the buzzer starts play birthday song and the LED light starts to flash colorful lights."),(0,o.kt)("h3",{id:"session-4-grove---light-sensor"},"Session 4: Grove - Light Sensor"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/lightsensor.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective"),"\t"),(0,o.kt)("p",null,"Use light sensor module to turn on/off the chainable RGB LED module, and control the brightness of the LED according to the ambient light intensity."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Light Sensor module is an Analog signal input module"),(0,o.kt)("li",{parentName:"ul"},"use map(value, fromLow, fromHigh, toLow, toHigh)function to re-map number of Analog output from one range to another as more clear and practical."),(0,o.kt)("li",{parentName:"ul"},"use light sensor as a light switch"),(0,o.kt)("li",{parentName:"ul"},"use light sensor to control the LED brightness by sense the ambient brightness")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement"),"\t"),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"a computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seeeduino Lotus V1.1 development board"),(0,o.kt)("li",{parentName:"ul"},"Grove cable"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Light Sensor"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Chainable RGB LED")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1: Connect Grove \u2013 Light Sensor module to A0 port of Seeeduino Lotus"),(0,o.kt)("p",null,"Step 2: Connect Grove \u2013 Chainable RGB LED to D7 port of Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3:  Link Seeeduino Lotus with computer by a micro USB cable "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/light_rgb.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1"),": Uses Light sensor to switch on/off LED by the brightness of the ambient light"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n/*assign leds as the name of\n  the ChainableLED, set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\n//naming analog pin A0 as LightSensor\n#define LightSensor A0\n\nvoid setup()\n{\n  //initialise ChainableLED leds\n  leds.init();\n}\n\nvoid loop()\n{\n  //read the value of Light Sensor and store to value\n  int value = analogRead(LightSensor);\n  //if Sensor reading is less than 150 turn on LED\n  if (value < 150) {\n    //turn on LED\n    leds.setColorRGB(0, 10, 10, 10);\n    //delay for 1s\n    delay(1000);\n  } else\n  {\n    //turn off LED\n    leds.setColorRGB(0, 0, 0, 0);\n    //delay for 1s\n    delay(1000);\n  }\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"Note if the ambient light is to bright, you can use you hand to cover the light sensor module, then the LED should turn on. when the ambient light makes the reading value of light sensor go higher than 150, the LED should turn off."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/light_eg1.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2"),": Uses light sensor to control the brightness of the LED"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n/*assign leds as the name of\n  the ChainableLED set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\n#define LightSensor A0\n\nvoid setup()\n{\n  //initialise ChainableLED leds\n  leds.init();\n  Serial.begin(9400);\n}\n\n//initialise hue as float point with value of 0.0\nfloat hue = 0.0;\n//initialise up as boolean with value of true\nboolean up = true;\n\nvoid loop()\n{\n  //read the value of Light Sensor and store to value\n  int value = analogRead(LightSensor);\n  /*map(value, fromLow, fromHigh, toLow, toHigh)\n    Re-maps a number from one range to another\n    In this case maping the analog value of light sensor\n    ranging from 0-800 to 100-0, so when the brightness\n    of surrounding enviroment is high so the sensor reading\n    value is high, therefore the maped value should be opposite,\n    so the birghtness LED should be dimmer.\n    the brightness of chainable LED only accept float number, so\n    we divide the maped value with 100. \n  */\n  float value_float = map(value, 0, 800, 50, 0) / 100.0;\n  /*setColorHSB(byte led, float hue, float saturation, float brightness);\n   * use the maped value(value_float) as brightness\n  */\n  leds.setColorHSB(0, hue, 1, value_float);\n  delay(100);\n\n  /*if up is true increase\n    hue at 0.025 interval\n    otherwise decrease hue\n    at 0.025 interval\n  */\n  if (up) {\n    hue += 0.025;\n  }\n  else\n  {\n    hue -= 0.025;\n  }\n  /*if hue is greater than 1.0\n     and up is true set up to false,\n     otherwise if hue is less or\n     equal to 0.0 and up is not\n     ture(! means is not) set up\n     to true\n  */\n  if (hue >= 1.0 && up)\n  {\n    up = false;\n  }\n  else if (hue <= 0.0 && !up)\n  {\n    up = true;\n  }\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"The brightness of the LED should decreases when the ambient brightness increases. When the ambient brightness decreases, the brightness of the LED should be increasing. as shown, the LED dims when there is a bright light shine on the light sensor, otherwise the LED is bright."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/light_eg2.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Further Explore")),(0,o.kt)("p",null,"Now you can integrate this light sensor module into your corridor lighting system to control the brightness of the light, during the day time the light sensor detects the sun light then dim the brightness of the corridor light to low, which not only saves power, but also extend the lifespan of the globes."),(0,o.kt)("h3",{id:"session-5-grove---line-finder"},"Session 5: Grove - Line Finder"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/linefinder.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective"),"\t"),(0,o.kt)("p",null,"Uses line finder to detect black line, and control the color of the LED accordingly when the line finder detects black line or not."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Line Finder is a digital signal input module"),(0,o.kt)("li",{parentName:"ul"},"Revise on how to use Serial Monitor"),(0,o.kt)("li",{parentName:"ul"},"Uses signal input module to control Grove \u2013 Chainable RGB LED")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement"),"\t"),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"a computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Line Finder"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Chainable RGB LED")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1: Connect Grove \u2013 Line Finder module to D3 port of Seeeduino Lotus "),(0,o.kt)("p",null,"Step 2:  Link Seeeduino Lotus with computer by a micro USB cable"),(0,o.kt)("p",null," ",(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/line_ard.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1"),":Uses Serial Monitor to display and  test output signal from the line finder"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//naming pin3 as singalPin\n#define signalPin 3\n\nvoid setup() {\n  // initialize the digital pin as an input:\n  pinMode(signalPin, INPUT);\n  // opens serial port, sets data rate to 9600 bps\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  //read the line detector input \n  int val = digitalRead(signalPin);\n  \n  //display the line detector status, 1 is black, 0 is white.\n  Serial.println(val);\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"Note you should keep at least 5cm away for the detecting object with the line finder, to test the line finder you should tape a strip of black tape onto a white paper or tiles (or uses black objects). Now aim the line finder to the black object, the Serial Monitor should display 0, and if you move away the line finder from black object, the Serial Monitor should display 1."),(0,o.kt)("p",null," ",(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/line_eg1_1.jpg",alt:null})," "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2"),":Uses Line detector to turn on or off Grove \u2013 Chainable RGB LED module."),(0,o.kt)("p",null,"Connect Grove \u2013 Chainable RGB LED to D7 port of Seeeduino Lotus"),(0,o.kt)("p",null," ",(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/line_rgb.jpg",alt:null})),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n/*assign leds as the name of\n  the ChainableLED set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\n//naming pin3 as lineFinder\n#define lineFinder 3\n\nvoid setup() {\n  // initialize the digital pin as an input:\n  pinMode(lineFinder, INPUT);\n  //initialise ChainableLED leds\n  leds.init();\n}\n\nvoid loop() {\n  /*read the line detector input\n   * if detected black(HIGH) turn on LED\n  */\n  if (HIGH == digitalRead(lineFinder))\n  {\n    //turn off LED\n    leds.setColorRGB(0, 10, 10, 10);\n  }\n  \n  /*read the line detector input\n   * if reading Logic low turn off LED\n  */\n  if (LOW == digitalRead(lineFinder))\n  {\n    //turn off LED\n    leds.setColorRGB(0, 0, 0, 0);\n  }\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"You should see that if the line finder detects black line, the LED should turn off, otherwise the LED should lid up if the line finder cannot detects the black line."),(0,o.kt)("p",null," ",(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/line_eg2.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3"),":Uses line finder to control the LED to emit Red or Green"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},"\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n/*assign leds as the name of\n  the ChainableLED set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\n//naming pin3 as lineFinder\n#define lineFinder 3\n\nvoid setup() {\n  // initialize the digital pin as an input:\n  pinMode(lineFinder, INPUT);\n  //initialise ChainableLED leds\n  leds.init();\n}\n\nvoid loop() {\n  /*read the line detector input\n   * if detected black(HIGH) set Green LED\n  */\n  if (HIGH == digitalRead(lineFinder))\n  {\n    //Green LED\n    leds.setColorRGB(0, 0, 255, 0);\n  }\n  \n  /*read the line detector input\n   * if reading Logic low set Red LED\n  */\n  if (LOW == digitalRead(lineFinder))\n  {\n    //Red LED\n    leds.setColorRGB(0, 255, 0, 0);;\n  }\n}\n\n")),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"You should notice when the line finder detects black line, the LED will emit Red light, otherwise, if the line finder cannot spot the black line, the LED should emit Green light."),(0,o.kt)("p",null," ",(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/line_eg3.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Further Explore")),(0,o.kt)("p",null,"Now you can build your own line tracking car by using this line finder module and two motors with a motor driver(H-bridge), so when the line finder detects black line, active one side of the wheel motor, once the line finder is off the black line, stop the spinning side of the wheel motor, and active the other side of wheel motor, so car will drive along the black line with the front of the car constant turning left or right."),(0,o.kt)("h3",{id:"session-6-grove---lcd-rgb-backlight"},"Session 6: Grove - LCD RGB Backlight"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/LCD.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective"),"\t"),(0,o.kt)("p",null,"Uses Grove - LCD RGB Backlight screen to display \u201cHello World\u201d and some custom characters."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Revise on how to add library"),(0,o.kt)("li",{parentName:"ul"},"Master in the positioning character and use binary code to generate custom character."),(0,o.kt)("li",{parentName:"ul"},"Scrolling text displayed on the LCD screen"),(0,o.kt)("li",{parentName:"ul"},"Uses LCD built-in character code to display special characters, for example the degree sign \u201c \xb0 \u201d")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/chartable.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement"),"\t"),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"a computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seeeduino Lotus V1.1 development board"),(0,o.kt)("li",{parentName:"ul"},"Grove cable"),(0,o.kt)("li",{parentName:"ul"},"Grove - LCD RGB Backlight")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1: Connect Grove - LCD RGB Backlight module to I2C. port of Seeeduino Lotus note: it is the I2C port followed by one dot."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/lcd_ard.jpg",alt:null})),(0,o.kt)("p",null,"Step 2:  Link Seeeduino Lotus with computer by a micro USB cable."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Add Library")),(0,o.kt)("p",null,"Add ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Grove_LCD_RGB_Backlight/archive/master.zip"},"Library")," for Grove - LCD RGB Backlight Screen "),(0,o.kt)("p",null,"Please follow the instructions in tutorial 3 on how to ",(0,o.kt)("a",{href:"#step3"},"add library"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1"),":Display Hello World"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n//include the rgb_lcd library\n#include "rgb_lcd.h"\n\n//assign name lcd to rgb_lcd\nrgb_lcd lcd;\n\nvoid setup() \n{\n    // set up the LCD\'s number of columns and rows:\n    lcd.begin(16, 2);\n    \n    // Print Hello, World! to the LCD.\n    lcd.print("Hello, World!");\n    delay(1000);\n}\n\nvoid loop() \n{\n    // set the cursor to column 0, line 1\n    // (note: line 1 is the second row, since counting begins with 0):\n    lcd.setCursor(0, 1);\n    // print the number of seconds since reset:\n    lcd.print(millis()/1000);\n    delay(100);\n}\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"You should see \u201cHello, World!\u201d displayed in the first line and the a counting down timer in the second line."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/helloworld.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2"),": Display Seeed Studio logo and uses built-in character code to display text"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n//add LCD library\n#include "rgb_lcd.h"\n\n//assign lcd as the name of rgb_lcd screen\nrgb_lcd lcd;\n\n/*draw customise character\n  in this case is the seeed studio logo\n*/\nbyte top_leftleft[8] = {\n  B00000,\n  B00000,\n  B01000,\n  B01000,\n  B01000,\n  B01100,\n  B01100,\n  B01110\n};\nbyte top_midleft[8] = {\n  B00001,\n  B00010,\n  B00010,\n  B00110,\n  B00110,\n  B00100,\n  B01100,\n  B01100\n};\nbyte top_midright[8] = {\n  B10000,\n  B01000,\n  B01000,\n  B01100,\n  B01100,\n  B00100,\n  B00110,\n  B00110\n};\nbyte top_rightright[8] = {\n  B00000,\n  B00000,\n  B00010,\n  B00010,\n  B00010,\n  B00110,\n  B00110,\n  B01110\n};\nbyte bot_leftleft[8] = {\n  B00110,\n  B00111,\n  B00011,\n  B00011,\n  B00001,\n  B00000,\n  B00000,\n  B00000\n};\nbyte bot_midleft[8] = {\n  B01100,\n  B01110,\n  B00110,\n  B00110,\n  B10011,\n  B11011,\n  B11111,\n  B01111\n};\nbyte bot_midright[8] = {\n  B00110,\n  B01110,\n  B01100,\n  B01100,\n  B11001,\n  B11011,\n  B11111,\n  B11110\n};\nbyte bot_rightright[8] = {\n  B01100,\n  B11100,\n  B11000,\n  B11000,\n  B10000,\n  B00000,\n  B00000,\n  B00000\n};\n\nvoid setup()\n{\n  //initialise the lcd screen;\n  // set up the lcd\'s number of columns and rows:\n  lcd.begin(16, 2);\n\n  /*create and assign numbers of\n    each seeed studio logo elements\n  */\n  lcd.createChar(0, top_leftleft);\n  lcd.createChar(1, top_midleft);\n  lcd.createChar(2, top_midright);\n  lcd.createChar(3, top_rightright);\n  lcd.createChar(4, bot_leftleft);\n  lcd.createChar(5, bot_midleft);\n  lcd.createChar(6, bot_midright);\n  lcd.createChar(7, bot_rightright);\n\n\n  /* set the cursor to column 4, line 0\n    note: line 0 is the first row, since counting begins with 0\n    same rule apply to the column as well\n  */\n  lcd.setCursor(4, 0);\n  //Print I and a space to the LCD at column 4, line 0\n  lcd.print("I ");\n  //set the cursor to column 6, line 0\n  lcd.setCursor(6, 0);\n  /* Print LOVE by using the LCD character lookup table\n     note write() method is mentt to send raw bytes\n     print() is mostly intended to format data as ascii.\n     this is different way of display text on lcd.\n  */\n  //character 76 is L on lookup table\n  lcd.write(76);\n  //the hex number 0x4F(is 79) associates with O on lookup table\n  lcd.write(0x4F);\n  //character 86 is V on lookup table\n  lcd.write(86);\n  //character 69 is E on lookup table\n  lcd.write(69);\n  //set the cursor to column 10, line 0\n  lcd.setCursor(10, 0);\n  //Print a space and Grove to the LCD\n  lcd.write(" Grove");\n  //set the cursor to column 4, line 1\n  lcd.setCursor(4, 1);\n  //Print text Seeed Studio to the LCD\n  lcd.print("Seeed Studio");\n\n  //display seeed studio logo\n  lcd.setCursor(0, 0);\n  lcd.write((unsigned char)0);\n  lcd.setCursor(1, 0);\n  lcd.write(1);\n  lcd.setCursor(2, 0);\n  lcd.write(2);\n  lcd.setCursor(3, 0);\n  lcd.write(3);\n  lcd.setCursor(0, 1);\n  lcd.write(4);\n  lcd.setCursor(1, 1);\n  lcd.write(5);\n  lcd.setCursor(2, 1);\n  lcd.write(6);\n  lcd.setCursor(3, 1);\n  lcd.write(7);\n}\n\nvoid loop()\n{\n\n}\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"You will see the Seeed Studio Logo displayed in the first 8 blocks, followed by the \u201cI Love Grove\u201d in the first line, and \u201cSeeed Studio\u201d in the second line."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/lcd_seeed.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3"),":Scrolling text on LCD display"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n\n//add LCD library\n#include "rgb_lcd.h"\n\n//assign lcd as the name of rgb_lcd screen\nrgb_lcd lcd;\n\n/*draw customise character\n  in this case is the seeed studio logo\n*/\nbyte top_leftleft[8] = {\n  B00000,\n  B00000,\n  B01000,\n  B01000,\n  B01000,\n  B01100,\n  B01100,\n  B01110\n};\nbyte top_midleft[8] = {\n  B00001,\n  B00010,\n  B00010,\n  B00110,\n  B00110,\n  B00100,\n  B01100,\n  B01100\n};\nbyte top_midright[8] = {\n  B10000,\n  B01000,\n  B01000,\n  B01100,\n  B01100,\n  B00100,\n  B00110,\n  B00110\n};\nbyte top_rightright[8] = {\n  B00000,\n  B00000,\n  B00010,\n  B00010,\n  B00010,\n  B00110,\n  B00110,\n  B01110\n};\nbyte bot_leftleft[8] = {\n  B00110,\n  B00111,\n  B00011,\n  B00011,\n  B00001,\n  B00000,\n  B00000,\n  B00000\n};\nbyte bot_midleft[8] = {\n  B01100,\n  B01110,\n  B00110,\n  B00110,\n  B10011,\n  B11011,\n  B11111,\n  B01111\n};\nbyte bot_midright[8] = {\n  B00110,\n  B01110,\n  B01100,\n  B01100,\n  B11001,\n  B11011,\n  B11111,\n  B11110\n};\nbyte bot_rightright[8] = {\n  B01100,\n  B11100,\n  B11000,\n  B11000,\n  B10000,\n  B00000,\n  B00000,\n  B00000\n};\n\nvoid setup()\n{\n  //initialise the lcd screen;\n  //set up the lcd\'s number of columns and rows:\n  lcd.begin(16, 2);\n  //wait for 1s\n  delay(1000);\n}\n\nvoid loop()\n{\n\n  /*create and assign numbers of\n    each seeed studio logo elements\n  */\n  lcd.createChar(0, top_leftleft);\n  lcd.createChar(1, top_midleft);\n  lcd.createChar(2, top_midright);\n  lcd.createChar(3, top_rightright);\n  lcd.createChar(4, bot_leftleft);\n  lcd.createChar(5, bot_midleft);\n  lcd.createChar(6, bot_midright);\n  lcd.createChar(7, bot_rightright);\n\n  /* set the cursor to column 4, line 0\n    note: line 0 is the first row, since counting begins with 0\n    same rule apply to the column as well\n  */\n  lcd.setCursor(4, 0);\n  //Print I and a space to the LCD at column 4, line 0\n  lcd.print("I ");\n  //set the cursor to column 6, line 0\n  lcd.setCursor(6, 0);\n  /* Print LOVE by using the LCD character lookup table\n     note write() method is mentt to send raw bytes\n     print() is mostly intended to format data as ascii.\n     this is different way of display text on lcd.\n  */\n  //character 76 is L on lookup table\n  lcd.write(76);\n  //the hex number 0x4F(is 79) associates with O on lookup table\n  lcd.write(0x4F);\n  //character 86 is V on lookup table\n  lcd.write(86);\n  //character 69 is E on lookup table\n  lcd.write(69);\n  //set the cursor to column 10, line 0\n  lcd.setCursor(10, 0);\n  //Print a space and Grove to the LCD\n  lcd.write(" Grove");\n  //set the cursor to column 4, line 1\n  lcd.setCursor(4, 1);\n  //Print text Seeed Studio to the LCD\n  lcd.print("Seeed Studio");\n\n  //display seeed studio logo\n  lcd.setCursor(0, 0);\n  lcd.write((unsigned char)0);\n  lcd.setCursor(1, 0);\n  lcd.write(1);\n  lcd.setCursor(2, 0);\n  lcd.write(2);\n  lcd.setCursor(3, 0);\n  lcd.write(3);\n  lcd.setCursor(0, 1);\n  lcd.write(4);\n  lcd.setCursor(1, 1);\n  lcd.write(5);\n  lcd.setCursor(2, 1);\n  lcd.write(6);\n  lcd.setCursor(3, 1);\n  lcd.write(7);\n  \n  // scroll 16 positions (string length) to the left\n  // to move it offscreen left:\n  for (int positionCounter = 0; positionCounter < 16; positionCounter++) {\n    // scroll one position left:\n    lcd.scrollDisplayLeft();\n    // wait a bit:\n    delay(200);\n  }\n\n  // scroll 32 positions (string length + display length) to the right\n  // to move it offscreen right:\n  for (int positionCounter = 0; positionCounter < 32; positionCounter++) {\n    // scroll one position right:\n    lcd.scrollDisplayRight();\n    // wait a bit:\n    delay(200);\n  }\n\n  // scroll 16 positions (display length + string length) to the left\n  // to move it back to center:\n  for (int positionCounter = 0; positionCounter < 16; positionCounter++) {\n    // scroll one position left:\n    lcd.scrollDisplayLeft();\n    // wait a bit:\n    delay(200);\n  }\n}\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"You should see the display scrolling text, firstly from right to left until all the text disappear at the end of the left side of screen, then the text will scroll back from left to right."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/lcd_scroll.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Further Explore")),(0,o.kt)("p",null,"This ",(0,o.kt)("a",{parentName:"p",href:"https://maxpromer.github.io/LCD-Character-Creator/"},"website")," helps you to generate custom character for LCD screen driven by Arduino."),(0,o.kt)("h3",{id:"session-7-grove---temperature--humidity-sensor-dht11"},"Session 7: Grove - Temperature & Humidity Sensor (DHT11)"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/DHT11.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective")),(0,o.kt)("p",null,"Use DHT11 sensor module to detect the surrounding temperature and humidity, and display the output data from DHT11 to LCD Screen."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"DHT11 is a digital sensor module"),(0,o.kt)("li",{parentName:"ul"},"revise on how to operate Serial Monitor and LCD Screen"),(0,o.kt)("li",{parentName:"ul"},"add DHT11 Library and initial setup for DHT11"),(0,o.kt)("li",{parentName:"ul"},"use Serial Monitor and LCD Screen to display data from DHT11 sensor")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement")),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"a computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seeeduino Lotus V1.1 development board"),(0,o.kt)("li",{parentName:"ul"},"Grove cable"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Temperature &Humidity Sensor(DHT11)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1: Connect Grove \u2013 Temperature &Humidity Sensor(DHT11) module to D2 port of Seeeduino Lotus."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/DHT11_ard.jpg",alt:null})),(0,o.kt)("p",null,"Step 2: Link Seeeduino Lotus with computer by a micro USB cable"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Add")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Grove_Temperature_And_Humidity_Sensor/archive/master.zip"},"Library")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1"),": Uses Serial Monitor to monitor the surrounding temperature and humidity"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n//add DHT sensor library\n#include <DHT.h>\n\n//set digital pin2 as DHTPIN\n#define DHTPIN 2\n//set the sensor type as DHT 11\n#define DHTTYPE DHT11\n\n/*assign dht as the name of DHT sensor\n  set the sensor pin as DHTPIN(pin2),\n  set the sensor type as DHTTYPE(DHT11)\n*/\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n  //initialise the dht sensor\n  dht.begin();\n  // opens serial port, sets data rate to 9600 bps\n  Serial.begin(9600);\n  //wait for 2s to initialise the board\n  delay(2000);\n}\n\nvoid loop() {\n  //store the humidity value to h\n  int h = dht.readHumidity();\n  //store the temperature value to t(in Celsius)\n  int t = dht.readTemperature();\n  //store the converted temperature value in fahrenheit to f\n  int f = dht.convertCtoF(t);\n  //display the title Temperature in C:\n  Serial.print("Temperature in C: ");\n  //display the temperature value t\n  Serial.print(t);\n  /* note the difference Serial.print()\n     and Serial.println(),\n     Serial.print() print the data in the same line\n     Serial.println() print the data on the new line\n     display the temperature unit \xbaC and change new line\n  */\n  Serial.println("\xbaC");\n  //display the title Temperature in F:\n  Serial.print("Temperature in F: ");\n  //display the temperature value f\n  Serial.print(f);\n  //display the temperature unit \xbaF and change new line\n  Serial.println("\xbaF");\n  //display the title Humidity:\n  Serial.print("Humidity: ");\n  //display the Humidity value h\n  Serial.print(h);\n  //display the % sign\n  Serial.println("%");\n}\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Open Serial Monitor"),(0,o.kt)("p",null,"Step 4: Observe result"),(0,o.kt)("p",null,"You should see a similar text of temperature and humidity data display in serial monitor as shown below."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result1.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2"),": Uses LCD screen to display data from DHT11 sensor"),(0,o.kt)("p",null,"Firstly Connect Grove - LCD RGB Backlight module to I2C. port of Seeeduino Lotus note: it is the I2C port followed by one dot."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/DHT11_lcd.png",alt:null})),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n//add DHT sensor library\n#include <DHT.h>\n//add LCD library\n#include <rgb_lcd.h>\n\n//set digital pin2 as DHTPIN\n#define DHTPIN 2\n//set the sensor type as DHT 11\n#define DHTTYPE DHT11\n\n/*assign dht as the name of DHT sensor\n  set the sensor pin as DHTPIN(pin2),\n  set the sensor type as DHTTYPE(DHT11)\n*/\nDHT dht(DHTPIN, DHTTYPE);\n\n//assign lcd as the name of rgb_lcd screen\nrgb_lcd lcd;\n\nvoid setup() {\n  //initialise the dht sensor\n  dht.begin();\n  //initialise the lcd screen;\n  //set up the lcd\'s number of columns and rows:\n  lcd.begin(16, 2);\n  //wait for 2s\n  delay(2000);\n}\n\nvoid loop() {\n  //store the humidity value to h\n  int h = dht.readHumidity();\n  //store the temperature value to t(in Celsius)\n  int t = dht.readTemperature();\n  \n  //set the LCD cursor to column 0, line 0\n  lcd.setCursor(0, 0);\n  //Print text temperature: to the LCD\n  lcd.print("Temperature:");\n  //set the LCD cursor to column 12, line 0\n  lcd.setCursor(12, 0);\n  //Print temperature value t to the LCD\n  lcd.print(t);\n  //set the LCD cursor to column 14, line 0\n  lcd.setCursor(14, 0);\n  //Print temperature \xba is character 223 on lookup table\n  lcd.write(223);\n  //Print C to the LCD\n  lcd.print("C");\n  \n  //set the LCD cursor to column 0, line 1\n  lcd.setCursor(0, 1);\n  //Print text Humidity: to the LCD\n  lcd.print("Humidity: ");\n  //set the LCD cursor to column 10, line 1\n  lcd.setCursor(10, 1);\n  //Print humidity value h to the LCD\n  lcd.print(h);\n  //set the LCD cursor to column 12, line 1\n  lcd.setCursor(12, 1);\n  //Print sign % to the LCD\n  lcd.print("%");\n}\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"you can see the current room temperature and humidity display on the LCD screen."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/DHT11_result.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Further Explore")),(0,o.kt)("p",null,"After this session, you can build your own weather station by using DHT11 sensor and the Grove - LCD RGB Backlight display."),(0,o.kt)("h3",{id:"session-8-grove---3-axis-digital-accelerometer"},"Session 8: Grove - 3-Axis Digital Accelerometer"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/3_axis_cover.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective"),"\t"),(0,o.kt)("p",null,"Learn how to operate 3-axis digital accelerometer by observe the output data displayed on the LCD screen."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Uses serial monitor to show the offset and acceleration value from the 3-axis accelerometer, discover the relations between the output data and  the position of the 3-axis accelerometer"),(0,o.kt)("li",{parentName:"ul"},"Uses the offset data from 3-axis accelerometer to calculate pitch and roll value, and observe the data change relative to the position of the 3-axis accelerometer."),(0,o.kt)("li",{parentName:"ul"},"Learn how to use tilt switch to flip in between pages of the LCD screen, so the massive data from 3-axis accelerometer could be displayed clearly.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement")),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"a computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seeeduino Lotus V1.1 development board"),(0,o.kt)("li",{parentName:"ul"},"Grove cable"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 3-Axis Digital Accelerometer"),(0,o.kt)("li",{parentName:"ul"},"Grove - LCD RGB Backlight"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Tilt Switch\t")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1: Connect Grove \u2013 3-Axis Digital Accelerometer to I2C.. port of Seeeduino Lotus note: it is the I2C port followed by two dots."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/3_axis_ard.jpg",alt:null})),(0,o.kt)("p",null,"Step 2: Link Seeeduino Lotus with computer by a micro USB cable."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Add Library")),(0,o.kt)("p",null,"Please add the ","[3-axis accelerometer driver Library]","(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Seeed-"},"https://github.com/Seeed-")," Studio/Accelerometer_MMA7660/archive/master.zip) into Arduino IDE"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1"),":Uses Serial Monitor to show the output data from the 3-axis accelerometer"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n//add accelemeter library\n#include "MMA7660.h"\n\n//assign accelemeter as the name of MMA7660 accelemeter\nMMA7660 accelemeter;\n\nvoid setup()\n{\n  //initialise the accelemeter\n  accelemeter.init();\n  // opens serial port, sets data rate to 9600 bps\n  Serial.begin(9600);\n}\nvoid loop()\n{\n  //initialise x, y, z as int8_t\n  int8_t x;\n  int8_t y;\n  int8_t z;\n  //initialise ax, ay, az as float\n  float ax, ay, az;\n  //get x y z offset value from accelemeter\n  accelemeter.getXYZ(&x, &y, &z);\n  //display title x =\n  Serial.print("x = ");\n  //display value of x\n  Serial.println(x);\n  //display title y =\n  Serial.print("y = ");\n  //display value of y\n  Serial.println(y);\n  //display title z =\n  Serial.print("z = ");\n  //display value of z\n  Serial.println(z);\n  \n  //get ax ay az acceleration value from accelemeter\n  accelemeter.getAcceleration(&ax, &ay, &az);\n  //display title accleration of X/Y/Z: \n  Serial.println("accleration of X/Y/Z: ");\n  //display value of ax\n  Serial.print(ax);\n  //display unit g\n  Serial.println(" g");\n  //display value of ay\n  Serial.print(ay);\n  //display unit g\n  Serial.println(" g");\n  //display value of az\n  Serial.print(az);\n  //display unit g\n  Serial.println(" g");\n  //display ************* as divider to make thing prettier\n  Serial.println("*************");\n  //wait for 0.5s\n  delay(500);\n}\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Open Serial Monitor"),(0,o.kt)("p",null,"Step 4: Observe result"),(0,o.kt)("p",null,"Please notice the data changes by positioning the 3-axis accelerometer according to pictures below."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result2.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result3.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result4.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result5.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result6.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result7.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result8.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result9.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result10.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result11.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result12.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result13.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result14.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result15.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2"),":Uses data from 3-axis accelerometer to calculate the value of Pitch and Roll"),(0,o.kt)("p",null,"Background Knowledge:"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/aircraft.png",alt:null})),(0,o.kt)("p",null,"as shown in above figure:"),(0,o.kt)("p",null,"Pitch (Transverse axis) \u03b8: it has its origin at the centre of gravity and is directed to the right, parallel to a line drawn from wingtip to wingtip. Motion about this axis is called pitch. A positive pitching motion raises the nose of the aircraft and lowers the tail. The elevators are the primary control of pitch. (Aircraft principal axes 2018)"),(0,o.kt)("p",null,"Yaw (Vertical axis) \u03c8: it has its origin at the centre of gravity and is directed towards the bottom of the aircraft, perpendicular to the wings and to the fuselage reference line. Motion about this axis is called yaw. A positive yawing motion moves the nose of the aircraft to the right. The rudder is the primary control of yaw. (Aircraft principal axes 2018)"),(0,o.kt)("p",null,"Roll (Longitudinal axis) \u03a6: it has its origin at the centre of gravity and is directed forward, parallel to the fuselage reference line. Motion about this axis is called roll. An angular displacement about this axis is called bank.","[3]"," A positive rolling motion lifts the left wing and lowers the right wing. (Aircraft principal axes 2018)"),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n#include <Wire.h>\n//add accelemeter library\n#include "MMA7660.h"\n\n//assign accelemeter as the name of MMA7660 accelemeter\nMMA7660 accelemeter;\n\n//set value 0.5 to alpha\nconst float alpha = 0.5;\n\n//initialise fXg, fYg, fZg as double with value of 0\ndouble fXg = 0;\ndouble fYg = 0;\ndouble fZg = 0;\n//initialise pitch and roll as double\ndouble pitch, roll;\n\nvoid setup()\n{\n  //initialise the accelemeter\n  accelemeter.init();\n  // opens serial port, sets data rate to 9600 bps\n  Serial.begin(9600);\n}\nvoid loop()\n{\n  //initialise x, y, z as int8_t\n  int8_t x;\n  int8_t y;\n  int8_t z;\n  //get x y z offset value from accelemeter\n  accelemeter.getXYZ(&x, &y, &z);\n\n  //Low Pass Filter to reduce the noise\n  fXg = x * alpha + (fXg * (1.0 - alpha));\n  fYg = y * alpha + (fYg * (1.0 - alpha));\n  fZg = z * alpha + (fZg * (1.0 - alpha));\n\n  //Roll & Pitch Equations\n  roll  = (atan2(-fYg, fZg) * 180.0) / M_PI;\n  pitch = (atan2(fXg, sqrt(fYg * fYg + fZg * fZg)) * 180.0) / M_PI;\n  //display title roll =\n  Serial.print("roll = ");\n  //display the roll value\n  Serial.println(roll);\n  //display title pitch =\n  Serial.print("pitch = ");\n  //display the pitch value\n  Serial.println(pitch);\n  delay(500);\n}\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"Please place the 3-axis accelerometer on a levelled surface as shown below."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/3_axis.jpg",alt:null})),(0,o.kt)("p",null,"Observe the Roll data\nPlease flip up/down the 3-axis accelerometer according to the green arrows in above figure, now the value of roll should increase when you flip down, decrease when flip up, in addition, the value of roll is positive when flip down at origin(placed parallel to water levelled), negative when flip up."),(0,o.kt)("p",null,"Observe the Pitch data\nPlease tilt left/right the 3-axis accelerometer according to the red arrows in above figure, now the value of pitch should increase when you tilt right, decrease when tilt left, in addition, the value of pitch is positive when tilt right relative to origin(placed parallel to water levelled), negative when tilt left."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result2.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result16.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result10.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result17.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result8.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result18.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result4.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result19.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result6.jpg",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/result20.png",alt:null})),(0,o.kt)("p",null,"Now we can use 3-axis accelerometer to control or correct the direction of air plane or cars, by covert the pitch and roll data to control signal to control the actuator, the same technology is applied to the auto screen adjustment on mobile phone when you tilt the phone from portrait to landscape."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3"),": Uses LCD screen to display the output data from 3-axis accelerometer"),(0,o.kt)("p",null,"Please connect Grove \u2013 Tilt Switch to D5 port of Seeeduino Lotus, and connect Grove - LCD RGB Backlight module to I2C. port of Seeeduino Lotus, NOTE: it is the I2C port followed by one dot."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/3_axis_lcd_tilt.jpg",alt:null})),(0,o.kt)("p",null,"Here we use the tilt switch to flip the page on LCD screen to show different sets of data, when tilt switch is ON the LCD screen will display data of X, Y, Z Roll and Pitch, When tilt switch is at OFF position the LCD screen will display the acceleration data of aX, aY, aZ in each direction relatively."),(0,o.kt)("p",null,"Step 1: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n//add accelemeter library\n#include "MMA7660.h"\n//add LCD library\n#include <rgb_lcd.h>\n\n\n//assign name tiltswitchPin to pin 5\n#define tiltswitchPin 5\n\n//assign accelemeter as the name of MMA7660 accelemeter\nMMA7660 accelemeter;\n//assign lcd as the name of rgb_lcd screen\nrgb_lcd lcd;\n\n//set value 0.5 to alpha\nconst float alpha = 0.5;\n\n//initialise fXg, fYg, fZg as double with value of 0\ndouble fXg = 0;\ndouble fYg = 0;\ndouble fZg = 0;\n//initialise pitch and roll as double\n\nvoid setup()\n{\n  //initialise the accelemeter\n  accelemeter.init();\n  //initialise the lcd screen;\n  //set up the lcd\'s number of columns and rows:\n  lcd.begin(16, 2);\n  //set pinMode of tiltswitchPin to input\n  pinMode(tiltswitchPin, INPUT);\n  //wait for 2s\n  delay(2000);\n\n}\nvoid loop()\n{\n  /*if tilt switch is on display X, Y, Z, Roll and Pitch data\n    if tilt switch is off display X, Y, Z acceleration data\n  */\n  if (HIGH == digitalRead(tiltswitchPin))\n  {\n    //initialise x, y, z as int8_t, pitch and roll as double\n    int8_t x;\n    int8_t y;\n    int8_t z;\n    double roll;\n    double pitch;\n    //get x y z offset value from accelemeter\n    accelemeter.getXYZ(&x, &y, &z);\n\n    //Low Pass Filter to reduce the noise\n    fXg = x * alpha + (fXg * (1.0 - alpha));\n    fYg = y * alpha + (fYg * (1.0 - alpha));\n    fZg = z * alpha + (fZg * (1.0 - alpha));\n\n    //Roll & Pitch Equations\n    roll  = (atan2(-fYg, fZg) * 180.0) / M_PI;\n    pitch = (atan2(fXg, sqrt(fYg * fYg + fZg * fZg)) * 180.0) / M_PI;\n    //reset the lcd screen\n    lcd.clear();\n    //set the LCD cursor to column 0, line 0\n    lcd.setCursor(0, 0);\n    //display text x:\n    lcd.print("x:");\n    //display value of x\n    lcd.print(x);\n    //set the LCD cursor to column 5, line 0\n    lcd.setCursor(5, 0);\n    //display text y:\n    lcd.print("y:");\n    //display value of y\n    lcd.print(y);\n    //set the LCD cursor to column 10, line 0\n    lcd.setCursor(10, 0);\n    //display text z:\n    lcd.print("z:");\n    //display value of z\n    lcd.print(z);\n\n    //set the LCD cursor to column 0, line 1\n    lcd.setCursor(0, 1);\n    //display text R:\n    lcd.print("R:");\n    //display value of roll\n    lcd.print(roll);\n    //set the LCD cursor to column 8, line 1\n    lcd.setCursor(8, 1);\n    //display text P:\n    lcd.print("P:");\n    //display value of pitch\n    lcd.print(pitch);\n  } else\n  {\n    //initialise ax, ay, az as float\n    float ax, ay, az;\n    //get ax ay az acceleration value from accelemeter\n    accelemeter.getAcceleration(&ax, &ay, &az);\n    //reset the lcd screen\n    lcd.clear();\n    //set the LCD cursor to column 0, line 0\n    lcd.setCursor(0, 0);\n    //display text ax:\n    lcd.print("ax:");\n    //display value of ax\n    lcd.print(ax);\n    //set the LCD cursor to column 8, line 0\n    lcd.setCursor(8, 0);\n    //display text ay:\n    lcd.print("ay:");\n    //display value of ay\n    lcd.print(ay);\n    //set the LCD cursor to column 0, line 1\n    lcd.setCursor(0, 1);\n    //display text az:\n    lcd.print("az:");\n    //display value of az\n    lcd.print(az);\n  }\n  //wait 0.5s\n  delay(500);\n}\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"Firstly, please test if the tilt switch is altering the page of the LCD screen. Then you can rotate the 3-axis accelerometer around to observe the data change according to the rotations, get yourself familiar with the output data associate to the orientations of the 3-axis accelerometer."),(0,o.kt)("p",null,"Display the velocity, pitch and roll when tilt switch is on/off:"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/3_axis_tilt_on&off.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Further Explore")),(0,o.kt)("p",null,"After play around with digital accelerometer module, you can imagine that accelerometer is one of the most important module can be found in rocket guidance system along with other modules such as GPS and gyros etc.. accelerometer is also used in mobile phones to detect if your phone is in portrait mode or landscape mode, so the screen can be tilted and adjust accordingly."),(0,o.kt)("h3",{id:"session-9-smart-garden"},"Session 9: Smart Garden"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/smartgarden.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective")),(0,o.kt)("p",null,"To make a Smart Garden sensor and reminder system by combining Grove starter kit modules"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"learn how to combine multiple modules into one application"),(0,o.kt)("li",{parentName:"ul"},"learn how to code for multiple devices in Arduino IDE"),(0,o.kt)("li",{parentName:"ul"},"adopt multiple modules to detect and analysis the planting environment, improving the logical think skills")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use case analysis")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Sensor module")),(0,o.kt)("p",null,"Use DHT11 module to monitor the surrounding environment of the plant, uses light sensor to detect the surrounding light intensity."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Actuator module")),(0,o.kt)("p",null,"Uses buzzer to make different tones and LCD to notify different warnings message:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"warning 1: the surrounding temperature is higher than 38\xb0C"),(0,o.kt)("li",{parentName:"ul"},"warning 2: the surrounding humidity is lower than 40%"),(0,o.kt)("li",{parentName:"ul"},"warning 3: Light intensity is lower than 50"),(0,o.kt)("li",{parentName:"ul"},"warning 4: remind user to watering plant")),(0,o.kt)("p",null,"Uses LCD screen display:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"state 1: Show temperature"),(0,o.kt)("li",{parentName:"ul"},"state 2: Show humidity"),(0,o.kt)("li",{parentName:"ul"},"state 3: remind user to watering plant")),(0,o.kt)("p",null,"Use tilt switch to reset warnings."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Flowchart")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/flowchart.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement")),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"- micro-USB cable\n- a computer with Arduino IDE and serial-to-USB driver installed\n- DIY acrylic frame\n")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"- Seeeduino Lotus V1.1 development board\n- Grove cable\n- Grove \u2013 Buzzer\n- Grove \u2013 Chainable RGB LED\n- Grove \u2013 Light Sensor\n- Grove - LCD RGB Backlight\n- Grove \u2013 Temperature &Humidity Sensor(DHT11)\n- Grove \u2013 Tilt Switch\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1:\nConnect Grove \u2013 Buzzer module to D6 port of Seeeduino Lotus "),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/buzzer_ard.jpg",alt:null})),(0,o.kt)("p",null,"Connect Grove \u2013 Chainable RGB LED to D7 port of Seeeduino Lotus"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connect1.jpg",alt:null})),(0,o.kt)("p",null,"Connect Grove \u2013 Light Sensor module to A0 port of Seeeduino Lotus"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connect2.jpg",alt:null})),(0,o.kt)("p",null,"Connect Grove - LCD RGB Backlight module to I2C. port of Seeeduino Lotus note: it is the I2C port followed by one dot."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connect3.jpg",alt:null})),(0,o.kt)("p",null,"Connect Grove \u2013 Temperature &Humidity Sensor(DHT11) module to D2 port of Seeeduino Lotus."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connect4.jpg",alt:null})),(0,o.kt)("p",null,"Connect Grove \u2013 Tilt Switch to D5 port of Seeeduino Lotus."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connect5.jpg",alt:null})),(0,o.kt)("p",null,"Fix all the components together on the DIY Acrylic Frame"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/smartgarden1.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/smartgarden2.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/smartgarden3.png",alt:null})),(0,o.kt)("p",null,"Step 2:  Link Seeeduino Lotus with computer by a micro USB cable."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming")),(0,o.kt)("p",null,"Step 1: Please add the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/PaulStoffregen/Time/archive/master.zip"},"TimeLib Library")," into Arduino IDE\nFor more information please visit ",(0,o.kt)("a",{parentName:"p",href:"http://playground.arduino.cc/code/time"},"Arduino TimeLib tutorial")),(0,o.kt)("p",null,"Step 2: copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n//add DHT sensor library\n#include <DHT.h>\n//add LCD library\n#include <rgb_lcd.h>\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n//add Timelib library\n#include <TimeLib.h>\n\n//assign default time as epoch time 1514764800 which is 00:00:00 Jan 1 2018\nlong DEFAULT_TIME = 1514764800;\nlong waterTime = DEFAULT_TIME + 86400;\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n//assign LightSensor as A0\n#define LightSensor A0\n//set digital pin2 as DHTPIN\n#define DHTPIN 2\n//set title of pin 5 as tiltSwitch\n#define tiltSwitch 5\n//assign buzzer as pin 6\n#define buzzer 6\n\n//set the sensor type as DHT 11\n#define DHTTYPE DHT11\n\n/*assign dht as the name of DHT sensor\n  set the sensor pin as DHTPIN(pin2),\n  set the sensor type as DHTTYPE(DHT11)\n*/\nDHT dht(DHTPIN, DHTTYPE);\n\n/*assign leds as the name of\n  the ChainableLED set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\n//assign lcd as the name of rgb_lcd screen\nrgb_lcd lcd;\n\nvoid setup()\n{\n  //\n  setTime(DEFAULT_TIME);\n  //initialise the dht sensor\n  dht.begin();\n  //initialise the lcd screen;\n  //set up the lcd\'s number of columns and rows:\n  lcd.begin(16, 2);\n  //initialise ChainableLED leds\n  leds.init();\n  //set pin 5(tilt switch) as input pin\n  pinMode(tiltSwitch, INPUT);\n  delay(1000);\n}\nint mode = 0;\nvoid loop()\n{\n  //-------------DHT---------------------\n  //store the humidity value to h\n  int h = dht.readHumidity();\n\n  //store the temperature value to t(in Celsius)\n  int t = dht.readTemperature();\n\n  int value = analogRead(LightSensor);\n  float value_float = map(value, 0, 800, 50, 0) / 100.0;\n\n  leds.setColorHSB(0, 0, 0, value_float);\n\n  //initialise mode to 0, then set to case 0;\n\n  //temperature exceed 38 degrees, then set to case 1;\n  if (t > 38) {\n    mode = 1;\n  }\n  //Humidity is less than 40 %, then set to case 2;\n  if (h < 40)\n  {\n    mode = 2;\n  }\n  //LightSensor reading value is less than 50, then set to case 3;\n  if (value < 50)\n  {\n    mode = 3;\n  }\n  //current time is greate or equals to waterTime(24 hour ahead), then set to case 4;\n  if (now() >= waterTime  ) {\n    mode = 4;\n  }\n\n  switch (mode) {\n    case 0:\n      //set the LCD cursor to column 0, line 0\n      lcd.clear();\n      lcd.setCursor(0, 0);\n      //Print text temperature: to the LCD\n      lcd.print("Temperature:");\n      //set the LCD cursor to column 12, line 0\n      lcd.setCursor(12, 0);\n      //Print temperature value t to the LCD\n      lcd.print(t);\n      //set the LCD cursor to column 14, line 0\n      lcd.setCursor(14, 0);\n      //Print temperature \xba is character 223 on lookup table\n      lcd.write(223);\n      //Print C to the LCD\n      lcd.print("C");\n\n      //set the LCD cursor to column 0, line 1\n      lcd.setCursor(0, 1);\n      //Print text Humidity: to the LCD\n      lcd.print("Humidity: ");\n      //set the LCD cursor to column 10, line 1\n      lcd.setCursor(10, 1);\n      //Print humidity value h to the LCD\n      lcd.print(h);\n      //set the LCD cursor to column 12, line 1\n      lcd.setCursor(12, 1);\n      //Print sign % to the LCD\n      lcd.print("%");\n      break;\n    case 1:\n      tone(buzzer, 262, 300);\n      leds.setColorRGB(0, 255, 0, 0);\n      lcd.clear();\n      lcd.setCursor(0, 0);\n      lcd.print("Temperature too ");\n      lcd.setCursor(0, 1);\n      lcd.print("High!!");\n      if (HIGH == digitalRead(tiltSwitch))\n      {\n        leds.setColorRGB(0, 0, 0, 0);\n        mode = 0;\n      }\n      break;\n    case 2:\n      tone(buzzer, 294, 300);\n      leds.setColorRGB(0, 255, 0, 0);\n      lcd.clear();\n      lcd.setCursor(0, 0);\n      lcd.print("Warning! Too Dry");\n      if (HIGH == digitalRead(tiltSwitch))\n      {\n        leds.setColorRGB(0, 0, 0, 0);\n        mode = 0;\n      }\n      break;\n    case 3:\n      tone(buzzer, 330, 300);\n      leds.setColorRGB(0, 255, 0, 0);\n      lcd.clear();\n      lcd.setCursor(0, 0);\n      lcd.print("Not Enough Light");\n      lcd.setCursor(0, 1);\n      lcd.print("Check the LED..");\n      if (HIGH == digitalRead(tiltSwitch))\n      {\n        leds.setColorRGB(0, 0, 0, 0);\n        mode = 0;\n      }\n      break;\n    case 4:\n      tone(buzzer, 349, 300);\n      leds.setColorRGB(0, 255, 0, 0);\n      lcd.clear();\n      lcd.setCursor(0, 0);\n      lcd.print("Time to water");\n      lcd.setCursor(0, 1);\n      lcd.print("the plants");\n      if (HIGH == digitalRead(tiltSwitch))\n      {\n        waterTime = now() + 86400;\n        mode = 0;\n      }\n      break;\n\n  }\n}\n\n')),(0,o.kt)("p",null,"Step 3: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 4: Observe result"),(0,o.kt)("p",null,"Under normal condition, the LED shines white light and the LCD screen shows temperature and humidity."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/garden.png",alt:null})),(0,o.kt)("p",null,"4 warning states"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/garden1.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/garden2.png",alt:null}),"\n",(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/garden3.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/garden4.png",alt:null})),(0,o.kt)("p",null,"Red LED warning"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/garden5.png",alt:null})),(0,o.kt)("p",null,"Reset warnings by using tilt switch"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/garden6.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/garden7.png",alt:null})),(0,o.kt)("h3",{id:"session-10-smart-cup"},"Session 10: Smart Cup"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/smartcup.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Objective")),(0,o.kt)("p",null,"Make a smart cup by using buzzer, RGB LED, 3-Axis Accelerometer and LCD screen, it will remind user to drink water at a certain period of time, the smart cup can also detect if the user consume some water, the LCD screen will display a counting down time to remind user when will be the next time to drink water."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key knowledge")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"revise the TimeLib Library on setting and control time with Lotus."),(0,o.kt)("li",{parentName:"ul"},"revise display and scrolling text on LCD screen"),(0,o.kt)("li",{parentName:"ul"},"revise if\u2026else\u2026and switch\u2026case\u2026operation with || (or) and &&(and) logic operator."),(0,o.kt)("li",{parentName:"ul"},"further examining the applications of pitch and roll value reading from 3-Axis Accelerometer."),(0,o.kt)("li",{parentName:"ul"},"use BlinkWithoutDelay example method to avoid using Delay function which prevent delay function to miss up the system timer."),(0,o.kt)("li",{parentName:"ul"},"learn how to make and call customized function, the return result could be Boolean(trun/false), or a value of the variable by using return X.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use case analysis")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Sensor module")),(0,o.kt)("p",null,"By comparing the pitch and roll data from 3-axis accelerometer readings to detect if the bottle is tilted or not, therefore it recognises if the user is drinking water or not. if the bottle is tilted, the next step is detecting if the bottle has been put back on the table, once the bottle is on the table, the pitch and roll data from 3-axis accelerometer will calibrate the maximum and minimum value for comparing."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Actuator module")),(0,o.kt)("p",null,"Uses buzzer to make different tones to remind different state:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"state 1: when timer counting down 30min finished, the buzzer will buzz to remind user to drink water"),(0,o.kt)("li",{parentName:"ul"},"state 2: the buzzer will buzz if the bottle is not stay still on the table.")),(0,o.kt)("p",null,"Uses LCD screen display"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"state 1: counting down timer"),(0,o.kt)("li",{parentName:"ul"},"state 2: remind user to drink water"),(0,o.kt)("li",{parentName:"ul"},"state 3: congratulate the user for drink water"),(0,o.kt)("li",{parentName:"ul"},"state 4: tell user to put back water once finished drinking")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Flowchart")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/flowchart1.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware requirement")),(0,o.kt)("p",null,"Self-prepare"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"micro-USB cable"),(0,o.kt)("li",{parentName:"ul"},"a computer with Arduino IDE and serial-to-USB driver installed")),(0,o.kt)("p",null,"Included in the kit"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seeeduino Lotus V1.1 development board"),(0,o.kt)("li",{parentName:"ul"},"Grove cable"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 Buzzer"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 LED Chainable RGB LED"),(0,o.kt)("li",{parentName:"ul"},"Grove - LCD RGB Backlight"),(0,o.kt)("li",{parentName:"ul"},"Grove \u2013 3-Axis Digital Accelerometer")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Hardware connection")),(0,o.kt)("p",null,"Step 1:\nConnect Grove - Buzzer module to D6 port of Seeeduino Lotus"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/buzzer_ard.jpg",alt:null})),(0,o.kt)("p",null,"Connect Grove \u2013 Chainable RGB LED to D7 port of Seeeduino Lotus"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connect1.jpg",alt:null})),(0,o.kt)("p",null,"Connect Grove - LCD RGB Backlight module to I2C. port of Seeeduino Lotus note: it is the I2C port followed by one dot."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connect6.jpg",alt:null})),(0,o.kt)("p",null,"Connect Grove \u2013 3-Axis Digital Accelerometer to I2C port of Seeeduino Lotus note: it is the I2C port followed by two dots."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/connect7.jpg",alt:null})),(0,o.kt)("p",null,"Fix all the components together on a cup."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/smartcup.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Software programming")),(0,o.kt)("p",null,"Step 1: Please add the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/PaulStoffregen/Time/archive/master.zip"},"TimeLib Library")," into Arduino IDE"),(0,o.kt)("p",null,"Copy & paste the following code into Arduino IDE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C"},'\n//add LCD library\n#include <rgb_lcd.h>\n//add accelerometer library\n#include "MMA7660.h"\n//add Timelib library\n#include <TimeLib.h>\n//add ChainableLED library to this project\n#include <ChainableLED.h>\n\n//assign default time as epoch time 1514764800 which is 00:00:00 Jan 1 2018\nlong DEFAULT_TIME = 1514764800;\n//set drinkTime at 30mins(1800s) after default time\n//long drinkTime = DEFAULT_TIME + 1800;\nlong drinkTime = DEFAULT_TIME + 10;\nint lastDrink, seconds;\n//will store lastest time in milliseconds\nunsigned long previousMillis = 0;\n\n//set the number of leds linked to the chain\n#define NUM_LEDS  1\n\n//assign buzzer as pin 6\n#define buzzer 6\n\n//assign accelerometer as the name of MMA7660 accelerometer\nMMA7660 accelerometer;\n\n//assign lcd as the name of rgb_lcd screen\nrgb_lcd lcd;\n\n/*assign leds as the name of\n  the ChainableLED set the\n  pin of the ChainableLED to\n  pin7(clock pin) and pin8(data pin)\n  and number of the leds*/\nChainableLED leds(7, 8, NUM_LEDS);\n\n//set motion check tolerance value\nint tolerance = 50;\n//initalise the calibrated and moveDetedted as false\nboolean calibrated = false;\nboolean moveDetected = false;\n\n//set int8_t for accelerometer reading value x, y, z\nint8_t x;\nint8_t y;\nint8_t z;\n\n//initialise fXg, fYg, fZg as double with value of 0\ndouble fXg = 0;\ndouble fYg = 0;\ndouble fZg = 0;\n//initialise pitch and roll as double\ndouble p, r;\n\n//Accelerometer limits\ndouble rMin; //Minimum roll Value\ndouble rMax; //Maximum roll Value\ndouble rVal; //Current roll Value\n\ndouble pMin; //Minimum pitch Value\ndouble pMax; //Maximum pitch Value\ndouble pVal; //Current pitch Value\n\n//set value 0.5 to alpha for low pass filter tolerance\nconst float alpha = 0.5;\n\n//iinitialise mode to set the default switch case to first(count from 0)\nint mode = 0;\n\nvoid setup()\n{\n  //set the system time to 00:00:00 Jan 1 2018\n  setTime(DEFAULT_TIME);\n  //initialise the accelerometer\n  accelerometer.init();\n  //initialise ChainableLED leds\n  leds.init();\n  //initialise the lcd screen;\n  //set up the lcd\'s number of columns and rows:\n  lcd.begin(16, 2);\n  //calibrate the accelerometer for at the begining\n  calibrateAccel();\n  //wait for 2\n  delay(2000);\n}\n\n//setup accelerometer reading function output mapped value of roll and pitch\nvoid Accel() {\n  accelerometer.getXYZ(&x, &y, &z);\n\n  //Low Pass Filter to reduce the noise\n  fXg = x * alpha + (fXg * (1.0 - alpha));\n  fYg = y * alpha + (fYg * (1.0 - alpha));\n  fZg = z * alpha + (fZg * (1.0 - alpha));\n\n  r  = (atan2(-fYg, fZg) * 180.0) / M_PI;\n  p = (atan2(fXg, sqrt(fYg * fYg + fZg * fZg)) * 180.0) / M_PI;\n  r = map(r, -90, 90, 0, 180);\n  p = map(p, -90, 90, 0, 180);\n  return r;\n  return p;\n}\n\n//setup function for calibrate the accelerometer\nvoid calibrateAccel() {\n  //reset moveDetected to false\n  moveDetected = false;\n\n  //call accelerometer reading funtion\n  Accel();\n\n  //assign the reading of roll and pitch\n  rVal = r;\n  rMin = rVal;\n  rMax = rVal;\n\n  pVal = p;\n  pMin = pVal;\n  pMax = pVal;\n\n  //calibrate the Accelerometer\n  for (int i = 0; i < 50; i++) {\n    //call accelerometer reading funtion\n    Accel();\n    /*--calibrate roll---*/\n    //assign the reading of roll to rVal\n    rVal = r;\n    //evaluate if the new reading is greater than stored Maximum value\n    if (rVal > rMax) {\n      //if new reading value is greater save new value to rMax\n      rMax = rVal;\n      //evaluate if the new reading is less than stored Minimum value\n    } else if (rVal < rMin) {\n      //if new reading value is less save new value to rMin\n      rMin = rVal;\n    }\n\n    /*--calibrate pitch---*/\n    //assign the reading of pitch to pVal\n    pVal = p;\n    //evaluate if the new reading is greater than stored Maximum value\n    if (pVal > pMax) {\n      //if new reading value is greater save new value to pMax\n      pMax = pVal;\n      //evaluate if the new reading is less than stored Minimum value\n    } else if (pVal < pMin) {\n      //if new reading value is less save new value to pMin\n      pMin = pVal;\n    }\n    //Delay 10ms between readings\n    delay(10);\n  }\n  //set the calibrated to true\n  calibrated = true;\n}\n\n//drinking function check if the bottle is tilting output ture/false\nboolean drinking() {\n  //initialise tilting as false\n  boolean tilting = false;\n  //reading from accelerometer\n  Accel();\n\n  rVal = r;\n  pVal = p;\n  /*evaluate if new roll value is greater than the maximum value or\n     less than the minimum value saved previously.\n     || means or\n     if rolling is happening then set tilting to ture\n     if pitch is happening then set tilting to ture\n  */\n  if (rVal > (rMax + tolerance) || rVal < (rMin - tolerance)) {\n    tilting = true;\n  }\n\n  if (pVal > (pMax + tolerance) || pVal < (pMin - tolerance)) {\n    tilting = true;\n  }\n  //output tilting\n  return tilting;\n}\n\n//mothin function\nvoid Motion() {\n  //don\'t check for movement until recalibrated again\n  calibrated = false;\n}\n\nvoid loop()\n{\n  /*evaluate if current time is greate or equals\n    to drinkTime(30mins ahead), then switch to case 1;\n    its time to drink\n  */\n  if (now() >= drinkTime  ) {\n    //switch to case 1\n    mode = 1;\n  }\n  //evaluate if the accelerometer is calibrated\n  if (calibrated) {\n    //evaluate if the bottle is tilted\n    if (drinking()) {\n      //switch to case 2\n      mode = 2;\n      //set moveDetected to true\n      moveDetected = true;\n    }\n  }\n  //evaluate if the moveDetected is true\n  if (moveDetected) {\n    //call motion function\n    Motion();\n  }\n  //save current time in millisecond\n  unsigned long currentMillis = millis();\n  switch (mode) {\n    /*Case 0:\n      mode to display countdonw time if nothing happened\n    */\n    case 0:\n      //minutes to drink water\n      lastDrink = (drinkTime - now()) / 60;\n      //seconds to drink water\n      seconds = (drinkTime - now()) % 60;\n\n      leds.setColorHSB(0, 0, 0, 0);\n\n      /*refesh the LCD for 1s without using delay, refer\n         to Example "BlinkWithoutDelay", so the system\n         won\'t stop and wait\n      */\n      if (currentMillis - previousMillis >= 1000) {\n        // save the last time you refreshed the LCD\n        previousMillis = currentMillis;\n        lcd.clear();\n        lcd.setCursor(0, 0);\n        lcd.print("Countdown to dri");\n        lcd.setCursor(0, 1);\n        lcd.print("nk water: ");\n        lcd.setCursor(10, 1);\n        lcd.print(lastDrink);\n        lcd.print(":");\n        lcd.print(seconds);\n      }\n      break;\n    /*Case 1:\n       reached 30mins time to drink some water\n       with buzzer alarm and LCD display time\n       to drink some water\n    */\n    case 1:\n      tone(buzzer, 262, 300);\n      leds.setColorRGB(0, 255, 0, 0);\n      lcd.clear();\n      lcd.setCursor(0, 0);\n      lcd.print("Time to drink");\n      lcd.setCursor(0, 1);\n      lcd.print("Some water");\n      break;\n    /*Case 2:\n       detect if the wate bottle is tilted\n       therefore user is drinking some water\n       and recalibrate the sensor(accelerometer)\n       once the bottle has been put on a flat\n       surface if the bottle is still tilted or\n       not sitting flat(accelerometer reading\n       is not around 90 degrees), enter case 3\n       detected the bottle is resting still enter\n       to case 0 and reset the drink time to 30mins\n       ahead\n    */\n    case 2:\n      //stop buzzer\n      noTone(buzzer);\n      //update drinkTime\n      drinkTime = now() + 1800;\n      leds.setColorRGB(0, 0, 255, 0);\n      //display message\n      lcd.clear();\n      lcd.setCursor(0, 0);\n      lcd.print("Well Done remind");\n      lcd.setCursor(0, 1);\n      lcd.print("you in 30mins");\n      //wait for 5s for user to drink\n      delay(5000);\n      //reading accelerometer value\n      Accel();\n      //evaluate if the bottle is resting on flat\n      if (r > 80 && r < 100 && p > 80 && p < 100) {\n        //evaluate if the accelerometer calibrated\n        if (!calibrated) {\n          //calibrate accelerometer\n          calibrateAccel();\n        }\n        else\n        { //switch to mode 0\n          mode = 0;\n          //update drinkTime\n          drinkTime = now() + 1800;\n          leds.setColorRGB(0, 0, 0, 0);\n        }\n      }\n      else\n      { //if bottle is not resting on flat switch to mode 3\n        mode = 3;\n        leds.setColorRGB(0, 0, 0, 0);\n      }\n      break;\n    /*case 3\n       if the bottle is not resting on flat surface,\n       display message with scrolling "plaase put\n       down water bottle when finished!", then check\n       if the bottle is resting still, if so, recalibrate\n       accelerometer and once recalibrated switch back to\n       case 0 and reset drink time to 30mins ahead\n    */\n    case 3:\n      //update drinkTime\n      drinkTime = now() + 1800;\n\n      leds.setColorRGB(0, 0, 0, 255);\n      //display message with autoscroll\n      lcd.clear();\n      lcd.setCursor(0, 0);\n      lcd.print("Please put down water");\n      lcd.setCursor(0, 1);\n      lcd.print("bottle when finished!");\n      for (int positionCounter = 0; positionCounter < 5; positionCounter++) {\n        // scroll one position left:\n        lcd.scrollDisplayLeft();\n        // wait a bit:\n        delay(200);\n      }\n      for (int positionCounter = 0; positionCounter < 5; positionCounter++) {\n        // scroll one position right:\n        lcd.scrollDisplayRight();\n        // wait a bit:\n        delay(200);\n      }\n      for (int positionCounter = 0; positionCounter < 5; positionCounter++) {\n        // scroll one position left:\n        lcd.scrollDisplayLeft();\n        // wait a bit:\n        delay(200);\n      }\n\n      //reading accelerometer value\n      Accel();\n      //evaluate if the bottle is resting on flat\n      if (r > 80 && r < 100 && p > 80 && p < 100) {\n        //evaluate if the accelerometer calibrated\n        if (!calibrated) {\n          //calibrate accelerometer\n          calibrateAccel();\n        }\n        else\n        { //switch to mode 0\n          mode = 0;\n          //update drinkTime\n          drinkTime = now() + 1800;\n          leds.setColorRGB(0, 0, 0, 0);\n        }\n      }\n      break;\n  }\n  delay(1);\n}\n\n\n')),(0,o.kt)("p",null,"Step 2: Upload code into Seeeduino Lotus"),(0,o.kt)("p",null,"Step 3: Observe result"),(0,o.kt)("p",null,"The 4 states of the smart cup"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/cup1.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/cup2.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/cup3.png",alt:null}),(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Beginner_Kit_for_Arduino/img/cup4.png",alt:null})),(0,o.kt)("h2",{id:"reference"},"REFERENCE"),(0,o.kt)("p",null,"Aircraft principal axes. Accessed November 27, 2018. ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Aircraft_principal_axes"},"https://en.wikipedia.org/wiki/Aircraft_principal_axes"),"."),(0,o.kt)("h2",{id:"appendix"},"APPENDIX"),(0,o.kt)("p",null,"All the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/peterpanstechland/Grove_starter_kit.git"},"coding")," in this document is Available on the Github."),(0,o.kt)("h2",{id:"ttech-support"},"TTECH SUPPORT"),(0,o.kt)("div",null,"Please do not hesitate to submit the issue into our [forum](https://forum.seeedstudio.com/).",(0,o.kt)("br",null),(0,o.kt)("p",{style:{textAlign:"center"}},(0,o.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,o.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}p.isMDXComponent=!0}}]);