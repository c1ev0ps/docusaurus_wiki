"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[95856],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),g=o,m=c["".concat(s,".").concat(g)]||c[g]||d[g]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},19748:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const i={description:"Grove-Single Axis Analog Gyro",title:"Grove-Single Axis Analog Gyro",keywords:["Grove"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/29/2023",author:"jianjing Huang"}},a=void 0,l={unversionedId:"Sensor/Grove/Grove_Sensors/Accelerometer/Grove-Single_Axis_Analog_Gyro",id:"Sensor/Grove/Grove_Sensors/Accelerometer/Grove-Single_Axis_Analog_Gyro",title:"Grove-Single Axis Analog Gyro",description:"Grove-Single Axis Analog Gyro",source:"@site/docs/Sensor/Grove/Grove_Sensors/Accelerometer/Grove-Single_Axis_Analog_Gyro.md",sourceDirName:"Sensor/Grove/Grove_Sensors/Accelerometer",slug:"/Sensor/Grove/Grove_Sensors/Accelerometer/Grove-Single_Axis_Analog_Gyro",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Sensors/Accelerometer/Grove-Single_Axis_Analog_Gyro",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Sensor/Grove/Grove_Sensors/Accelerometer/Grove-Single_Axis_Analog_Gyro.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1674950400,formattedLastUpdatedAt:"2023\u5e741\u670829\u65e5",frontMatter:{description:"Grove-Single Axis Analog Gyro",title:"Grove-Single Axis Analog Gyro",keywords:["Grove"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/29/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"Grove - IMU 9DOF(lcm20600+AK09918)",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Sensors/Accelerometer/Grove-IMU_9DOF-lcm20600+AK09918"},next:{title:"Sensor - Light(introduction)",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Sensors/Light/Sensor_light"}},s={},p=[{value:"Feature",id:"feature",level:2},{value:"Demonstration",id:"demonstration",level:2},{value:"With Arduino",id:"with-arduino",level:3},{value:"With Raspberry Pi",id:"with-raspberry-pi",level:3},{value:"Schematic Online Viewer",id:"schematic-online-viewer",level:2},{value:"Resource",id:"resource",level:2},{value:"Tech Support",id:"tech-support",level:2}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-Single_Axis_Analog_Gyro/img/Axis_Analog_Gyro_01.jpg",alt:null})),(0,o.kt)("p",null,"The Grove \u2013 Signal Axis Analog Gyro is based on an angular velocity sensor (Murata-ENC-03R) that uses the phenomenon of Coriolis force. It can only measure the X-axis angular velocity, which is different from other 3-Axis gyro, but with a higher speed. It can be used for the position control and attitude control like the self-balanced 2WD."),(0,o.kt)("p",null,"Model: ",(0,o.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-Base_Shield_for_IOIO-OTG/res/Grove-Base_Shield_for_IOIO-OTG_Eagle_File.zip"},"SEN05091P")),(0,o.kt)("h2",{id:"feature"},"Feature"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Input Voltage: 3.3V/5V")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Standard Grove Interface")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Light Weight")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"High Speed")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Measure X-axis Angular Velocity"))),(0,o.kt)("h2",{id:"demonstration"},"Demonstration"),(0,o.kt)("h3",{id:"with-arduino"},"With ",(0,o.kt)("a",{parentName:"h3",href:"https://www.arduino.cc/"},"Arduino")),(0,o.kt)("p",null,"The module detects one-axis rotation with analog signal.\nHigh-pass filter and low-pass filter circuit are applied to reduce the temperature drift and suppress the output noise.\nBefore the measurement of the angular velocity, a reference value(the sensor output at Angular Velocity=0) is required.\nThis value is 1.35V in default. But in order to get more accurate reference values, before the measurement,a calibration is necessary.\nIn this calibration, the output voltage when angular velocity =0 been sampled 200 times,\nand then the average of these data will be treated as the reference value."),(0,o.kt)("p",null,"1.Connect it to A0 port of  ",(0,o.kt)("a",{parentName:"p",href:"https://seeeddoc.github.io/Grove-Base_Shield/"},"Grove - Base Shield"),", of cause any pin of the analog pins would be OK."),(0,o.kt)("p",null,"2.Plug the Grove - Base Shield into Arduino/Seeeduino and connect them to PC using a USB cable."),(0,o.kt)("p",null,"3.Upload the below code.Please click ",(0,o.kt)("a",{parentName:"p",href:"https://seeeddoc.github.io/Upload_Code/"},"here")," if you do not know how to upload."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},'    int sensorPin = A0; // select the input pin for the sensor\n\n    float reference_Value=0;\n\n    int sensorValue = 0; // variable to store the value coming from the sensor\n\n    void setup()\n    {\n\n        int i;\n        float sum=0;\n        pinMode(sensorPin, INPUT);\n        Serial.begin(9600);\n        Serial.println("Please do not rotate it before calibrate!");\n        Serial.println("Get the reference value:");\n\n    for(i=0;i<1000;i++)\n    {\n        // read the value from the sensor:\n        sensorValue = analogRead(sensorPin);\n        sum += sensorValue;\n        delay(5);\n    }\n    reference_Value = sum/1000.0;\n    Serial.println(reference_Value);\n    Serial.println("Now you can begin your test!");\n    }\n\n    void loop()\n    {\n        double angularVelocity;\n        sensorValue = analogRead(sensorPin);\n        angularVelocity =((double)(sensorValue-reference_Value)*4930.0)/1023.0/0.67; //get the angular velocity\n        Serial.print(angularVelocity);\n        Serial.println("deg/s");\n        Serial.println(" ");\n        delay(10);\n    }\n')),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Now, it is time to the calibration. ",(0,o.kt)("font",{color:"#DC143C",face:!0},"Put the sensor on your desk horizontally"),"\n\uff0cand then press the Reset button on the Seeeduino, and then Open the serial tool:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-Single_Axis_Analog_Gyro/img/Gyro_Result.jpg",alt:null})),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},'As you see the "Now you can begin your test", that means the calibration done. You can use the sensor now. Rotating direction can reference the following picture:')),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-Single_Axis_Analog_Gyro/img/Rotate_direction.jpg",alt:null})),(0,o.kt)("h3",{id:"with-raspberry-pi"},"With ",(0,o.kt)("a",{parentName:"h3",href:"https://seeeddoc.github.io/GrovePiPlus/"},"Raspberry Pi")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"You should have got a raspberry pi and a grovepi or grovepi+.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"You should have completed configuring the development enviroment, otherwise follow ",(0,o.kt)("a",{parentName:"p",href:"https://seeeddoc.github.io/GrovePiPlus/#Introducing_the_GrovePi.2B"},"here"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Connection"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Plug the sensor to grovepi socket A0 by using a grove cable.")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Navigate to the demos' directory:"),(0,o.kt)("p",{parentName:"li"},"  ",(0,o.kt)("inlineCode",{parentName:"p"},"cd yourpath/GrovePi/Software/Python/\n")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To see the code")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    nano grovesingleaxisanaloggyro.py # "Ctrl+x" to exit #\n\n    import time\n    import grovepi\n\n    #Connect the Grove Single Axis Analog Gyro to analog port A0\n    #SIG,NC,VCC,GND\n    sensor = 0\n\n    grovepi.pinMode(sensor,"INPUT")\n\n    #calibration\n    print "calibrating..."\n\n    sum = 0\n\n    errors = 0\n\n    for x in range(0, 100):\n\n      try:\n          #Get sensor value\n          v = grovepi.analogRead(sensor)\n          sum += v\n          #time.sleep(.05)\n      except IOError:\n          print "Error"\n          errors += 1\n\n    if errors == 100:\n\n       print "unable to calibrate"\n\n       raise SystemExit\n\n    reference_value = sum / (100 - errors)\n\n    print "finished calibrating"\n    print "reference_value =", reference_value\n\n    #ready\n\n    while True:\n        try:\n            #Get sensor value\n            sensor_value = grovepi.analogRead(sensor)\n\n            #Calculate angular velocity (deg/s)\n            velocity = ((float)(sensor_value - reference_value) * 4930.0) / 1023.0 / 0.67\n\n            print "sensor_value =", sensor_value, " velocity =", velocity\n            time.sleep(.5)\n\n        except IOError:\n        print "Error"\n')),(0,o.kt)("p",null,"5.Run the demo."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"sudo python grovesingleaxisanaloggyro.py")),(0,o.kt)("h2",{id:"schematic-online-viewer"},"Schematic Online Viewer"),(0,o.kt)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Grove-Single_Axis_Analog_Gyro/res/Grove-Signal_Axis_Analog_Gyro_Eagle_File.zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,o.kt)("h2",{id:"resource"},"Resource"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"[Eagle]"),"  ",(0,o.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-Single_Axis_Analog_Gyro/res/Grove-Signal_Axis_Analog_Gyro_Eagle_File.zip"},"Grove - Signal Axis Analog Gyro Eagle")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"[PDF]"),"  ",(0,o.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-Single_Axis_Analog_Gyro/res/Grove%20-%20Single%20Axis%20Analog%20Gyro%20v1.0%20Sch.pdf"},"Grove - Signal Axis Analog Gyro Sch")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"[PDF]"),"  ",(0,o.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-Single_Axis_Analog_Gyro/res/Grove%20-%20Single%20Axis%20Analog%20Gyro%20v1.0%20PCB.pdf"},"Grove - Signal Axis Analog Gyro PCB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"[Datasheet]")," ",(0,o.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-Single_Axis_Analog_Gyro/res/Analog_Gyro_datasheet.pdf"},"File Signal Axis Analog Gyro datasheet")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"[Code]")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Grove_Single_Axis_Analog_Gyro"},"Demo code on github")),(0,o.kt)("h2",{id:"tech-support"},"Tech Support"),(0,o.kt)("p",null,"Please submit any technical issue into our ",(0,o.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,o.kt)("p",{style:{textAlign:"center"}},(0,o.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,o.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"}))))}c.isMDXComponent=!0}}]);