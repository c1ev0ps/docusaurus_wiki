"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1066],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={description:"Grove - 2-Channel Inductive Sensor(LDC1612)",title:"Grove - 2-Channel Inductive Sensor(LDC1612)",keywords:["Grove Grove_Sensors Touch"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/19/2023",author:"jianjing Huang"}},o=void 0,l={unversionedId:"Sensor/Grove/Grove_Sensors/Touch/Grove-2_Channel_Inductive_Sensor-LDC1612",id:"Sensor/Grove/Grove_Sensors/Touch/Grove-2_Channel_Inductive_Sensor-LDC1612",title:"Grove - 2-Channel Inductive Sensor(LDC1612)",description:"Grove - 2-Channel Inductive Sensor(LDC1612)",source:"@site/docs/Sensor/Grove/Grove_Sensors/Touch/Grove-2_Channel_Inductive_Sensor-LDC1612.md",sourceDirName:"Sensor/Grove/Grove_Sensors/Touch",slug:"/Sensor/Grove/Grove_Sensors/Touch/Grove-2_Channel_Inductive_Sensor-LDC1612",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Sensors/Touch/Grove-2_Channel_Inductive_Sensor-LDC1612",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Sensor/Grove/Grove_Sensors/Touch/Grove-2_Channel_Inductive_Sensor-LDC1612.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1674086400,formattedLastUpdatedAt:"2023\u5e741\u670819\u65e5",frontMatter:{description:"Grove - 2-Channel Inductive Sensor(LDC1612)",title:"Grove - 2-Channel Inductive Sensor(LDC1612)",keywords:["Grove Grove_Sensors Touch"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/19/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"Grove - Round Force Sensor FSR402",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Sensors/Touch/Grove-Round_Force_Sensor_FSR402"},next:{title:"Grove - 12 Key Capacitive I2C Touch Sensor V2 (MPR121)",permalink:"/docusaurus_wiki/zh-CN/Sensor/Grove/Grove_Sensors/Touch/Grove-12_Key_Capacitive_I2C_Touch_Sensor_V2-MPR121"}},s={},p=[{value:"Feature",id:"feature",level:2},{value:"Specification",id:"specification",level:2},{value:"Typical applications",id:"typical-applications",level:2},{value:"Hardware Overview",id:"hardware-overview",level:2},{value:"Pin Out",id:"pin-out",level:3},{value:"Working Principle",id:"working-principle",level:2},{value:"Platforms Supported",id:"platforms-supported",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Play With Arduino",id:"play-with-arduino",level:3},{value:"Hardware",id:"hardware",level:4},{value:"Software",id:"software",level:4},{value:"Schematic Online Viewer",id:"schematic-online-viewer",level:2},{value:"Resources",id:"resources",level:2},{value:"Tech Support",id:"tech-support",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/img/main.jpg",alt:null})),(0,r.kt)("p",null,"The Grove - 2-Channel Inductive Sensor is based on Texas Instruments(TI) LDC1612, a 28-bit inductance to digital converter(LDC) for inductive sensing solutions. With multiple channels and support for remote sensing, the LDC1612 enables the performance and reliability benefits of inductive sensing to be realized at minimal cost and power. Inductance is an effect caused by the magnetic field of a current-carrying conductor acting back on the conductor. So by sensing the inductance, this sensor can detect the proximity of conductors especially metal nearby."),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/Grove-2-Channel-Inductive-Sensor-%28LDC1612%29-p-3223.html",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/300px-Get_One_Now_Banner-ragular.png"}))),(0,r.kt)("h2",{id:"feature"},"Feature"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"2 Channels With Matched Sensor Drive"),(0,r.kt)("li",{parentName:"ul"},"Easy-to-Use: Minimal Configuration Required"),(0,r.kt)("li",{parentName:"ul"},"Multiple Channels Support Environmental and Aging Compensation"),(0,r.kt)("li",{parentName:"ul"},"Remote Sensor Position of >20 cm Supports Operation In Harsh Environments"),(0,r.kt)("li",{parentName:"ul"},"Coil Parameter: Diameter: 16mm/ Turns: 20")),(0,r.kt)("h2",{id:"specification"},"Specification"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Item"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Supply Voltage"),(0,r.kt)("td",{parentName:"tr",align:null},"3.3V / 5V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Junction Temperature"),(0,r.kt)("td",{parentName:"tr",align:null},"-55\uff5e150\u2103")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Supported Sensor Frequency Range"),(0,r.kt)("td",{parentName:"tr",align:null},"1kHz~10MHz")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Best Detecting Range"),(0,r.kt)("td",{parentName:"tr",align:null},"15mm")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Interface"),(0,r.kt)("td",{parentName:"tr",align:null},"I2C")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"I2C address"),(0,r.kt)("td",{parentName:"tr",align:null},"0x2B(defult)",(0,r.kt)("br",null),"0x2A(configurable)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Package size"),(0,r.kt)("td",{parentName:"tr",align:null},"L: 140mm W: 90mm H: 10mm")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Gross Weight"),(0,r.kt)("td",{parentName:"tr",align:null},"12g")))),(0,r.kt)("p",null,"When the ADDR pin is set low, the LDC I2C address is 0x2A; when the ADDR pin is set high, the LDC I2C address is 0x2B."),(0,r.kt)("h2",{id:"typical-applications"},"Typical applications"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Knobs in consumer, appliances, and automotive"),(0,r.kt)("li",{parentName:"ul"},"Linear and rotational encoders"),(0,r.kt)("li",{parentName:"ul"},"Buttons in home electronics, wearables, manufacturing, and automotive"),(0,r.kt)("li",{parentName:"ul"},"Keypads in manufacturing and appliances"),(0,r.kt)("li",{parentName:"ul"},"Slider buttons in consumer products"),(0,r.kt)("li",{parentName:"ul"},"Metal detection in industrial and automotive"),(0,r.kt)("li",{parentName:"ul"},"POS and EPOS"),(0,r.kt)("li",{parentName:"ul"},"Flow meters in consumer and appliances")),(0,r.kt)("h2",{id:"hardware-overview"},"Hardware Overview"),(0,r.kt)("h3",{id:"pin-out"},"Pin Out"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/img/pinout.jpg",alt:null})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/img/pinout_back.jpg",alt:null})),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"1.")," Set the Rb(resistance unit-kom), L(inductance unit-uH), C(capacitance unit-pf) by the APIs if you don't use the Coil Inductance we provided. Used to calculate and set the corresponding frequency register of the sensor."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"2.")," There is an INT-pad on the sensor board, It turns to the low level when the conversion is complete, overwise stays high, but you should configure the corresponding register of the sensor.")),(0,r.kt)("h2",{id:"working-principle"},"Working Principle"),(0,r.kt)("p",null,"LDC1612 works based on measuring the parameters of the LC oscillator, formed by the PCB copper trace and the capacitor."),(0,r.kt)("p",null,"LDC1612 is able to measure the amount of energy it needs to provide to maintain the LC oscillation when a conductive object which is magnetically coupled with the LC oscillator approach. As the power loss of the oscillator circuit is proportional to the impedance of the conducting object, and the impedance value is affected by the distance of the object, it can then be used to determine the distance between the object and the LC oscillator. In this case, the PCB copper trace can be seen as an impedance sensor."),(0,r.kt)("h2",{id:"platforms-supported"},"Platforms Supported"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Arduino"),(0,r.kt)("th",{parentName:"tr",align:null},"Raspberry Pi"),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/arduino_logo.jpg",alt:null})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/raspberry_pi_logo_n.jpg",alt:null})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/bbg_logo_n.jpg",alt:null})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/wio_logo_n.jpg",alt:null})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/linkit_logo_n.jpg",alt:null}))))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The platforms mentioned above as supported is/are an indication of the module's software or theoritical compatibility. We only provide software library or code examples for Arduino platform in most cases. It is not possible to provide software library / demo code for all possible MCU platforms. Hence, users have to write their own software library.")),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("h3",{id:"play-with-arduino"},"Play With Arduino"),(0,r.kt)("h4",{id:"hardware"},"Hardware"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Materials required")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Seeeduino V4.2"),(0,r.kt)("th",{parentName:"tr",align:null},"Base Shield"),(0,r.kt)("th",{parentName:"tr",align:null},"Grove - 2-Channel Inductive Sensor"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/seeeduino_v4.2.jpg",alt:"enter image description here"})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/base_shield.jpg",alt:"enter image description here"})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/img/thumbnail.jpg",alt:"enter image description here"}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Seeeduino-V4.2-p-2517.html"},"Get ONE Now")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Base-Shield-V2-p-1378.html"},"Get ONE Now")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-2-Channel-Inductive-Sensor-%28LDC1612%29-p-3223.html"},"Get ONE Now"))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"}," ",(0,r.kt)("strong",{parentName:"p"},"1")," Please plug the USB cable gently, otherwise you may damage the port. Please use the USB cable with 4 wires inside, the 2 wires cable can't transfer data. If you are not sure about the wire you have, you can click ",(0,r.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Micro-USB-Cable-48cm-p-1475.html"},"here")," to buy."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"2")," Each Grove module comes with a Grove cable when you buy. In case you lose the Grove cable, you can click ",(0,r.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Universal-4-Pin-Buckled-20cm-Cable-%285-PCs-pack%29-p-936.html"},"here")," to buy.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Step 1.")," Connect the Grove - 2-Channel Inductive Sensor(LDC1612) to port  ",(0,r.kt)("strong",{parentName:"p"},"I^2^C")," of Grove-Base Shield.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Step 2.")," Plug Grove - Base Shield into Seeeduino.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Step 3.")," Connect Seeeduino to PC via a USB cable."))),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/img/With_ard.jpg",alt:null})),(0,r.kt)("p",null,"Now, we will demonstrate you how to run the code for coin distance detection, similar procedure if you wish to run other programs."),(0,r.kt)("h4",{id:"software"},"Software"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If this is the first time you work with Arduino, we strongly recommend you to see ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Getting_Started_with_Arduino/"},"Getting Started with Arduino")," before the start.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Step 1.")," Download the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_LDC1612"},"Grove-2-Channel_Inductive_Sensor-LDC1612")," Library from Github.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Step 2.")," Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/How_to_install_Arduino_Library"},"How to install library")," to install library for Arduino.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Step 3.")," Restart the Arduino IDE. Open the example, you can open it in the following three ways\uff1a"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open it directly in the Arduino IDE via the path: ",(0,r.kt)("strong",{parentName:"p"},"File --\x3e Examples --\x3eSeeed Inductive Sensor LDC1612--\x3e coin_test_demo"),".\n",(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/img/arduino1.png",alt:null}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open it in your computer by click the ",(0,r.kt)("strong",{parentName:"p"},"basic_demo.ino")," which you can find in the folder ",(0,r.kt)("strong",{parentName:"p"},"XXXX\\Arduino\\libraries\\examples\\coin_test_demo\\coin_test_demo.ino"),", ",(0,r.kt)("strong",{parentName:"p"},"XXXX")," is the location you installed the Arduino IDE.\n",(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/img/arduino2.png",alt:null}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Or, you can just click the icon ",(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/copy.jpg",alt:null})," in upper right corner of the code block to copy the following code into a new sketch in the Arduino IDE."))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Coin demo"),"\nThis program allows user to detect the distance from the coin to the copper trace."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C++"},'\n\n#include "Seeed_LDC1612.h"\n\nLDC1612 sensor;\nconst u32 DISTANCE_00=44000000;  //do not detect\nconst u32 DISTANCE_00_01=60000000;  // distance:<1mm\nconst u32 DISTANCE_01_05=45000000;  // distance:1mm~5mm\nconst u32 DISTANCE_05_10=44250000; // distance:5mm~10mm\nconst u32 DISTANCE_10_15=44080000; // distance:10mm~15mm\nconst u32 DISTANCE_15_20=44020000; // distance:15mm~20mm\n\nvoid setup()\n{\n    Serial.begin(115200);\n    delay(100);\n    Serial.println("start!");\n\n    sensor.init();\n\n    if(sensor.single_channel_config(CHANNEL_0))\n    {\n        Serial.println("can\'t detect sensor!");\n        while(1);\n    }\n\n\n}\n\n\nvoid loop()\n{\n    u32 result_channel1=0;\n    u32 result_channel2=0;\n\n    /*shows the status of sensor.*/\n    //sensor.get_sensor_status();\n\n    /*Get channel 0 result and parse it.*/\n    sensor.get_channel_result(CHANNEL_0,&result_channel1);\n\n    /*Test the distance between the coin and the sensor. \n    Note that the accuracy is for reference only.\n    Please suspend the sensor during the test! */\n    if(0!=result_channel1)\n    {\n        if(result_channel1<DISTANCE_00)\n        {\n            Serial.println("There is no coin here!");\n        }\n\n        if(result_channel1>=DISTANCE_00_01)\n        {\n            Serial.println("The distance between the COIN is 0~1mm");\n        }\n\n        if(result_channel1<DISTANCE_00_01&&result_channel1>=DISTANCE_01_05)\n        {\n            Serial.println("The distance between the COIN is 1~5mm");\n        }\n\n        if(result_channel1<DISTANCE_01_05&&result_channel1>=DISTANCE_05_10)\n        {\n            Serial.println("The distance between the COIN is 5~10mm");\n        }\n\n        if(result_channel1<DISTANCE_05_10&&result_channel1>=DISTANCE_10_15)\n        {\n            Serial.println("The distance between the COIN is 10~15mm");\n        }\n\n        if(result_channel1<DISTANCE_10_15&&result_channel1>=DISTANCE_15_20)\n        {\n            Serial.println("The distance between the COIN is 15~20mm");\n        }\n\n        if(result_channel1<DISTANCE_15_20&&result_channel1>=DISTANCE_00)\n        {\n            Serial.println("The distance between the COIN is more than 2mm");\n        }\n\n    }\n    \n    delay(1000);\n}\n\n\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The library file may be updated. This code may not be applicable to the updated library file, so we recommend that you use the first two methods.")),(0,r.kt)("admonition",{title:"success",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"  If everything goes well, you will see the following result")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C++"},"\nThe distance between the COIN is 5~10mm\nThe distance between the COIN is 5~10mm\nThere is no coin here!\nThe distance between the COIN is 10~15mm\nThe distance between the COIN is 5~10mm\nThe distance between the COIN is 1~5mm\nThe distance between the COIN is 5~10mm\nThe distance between the COIN is 5~10mm\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Basic demo")),(0,r.kt)("p",null,"Code for basic_demo.ino"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C++"},'\n\n#include "Seeed_LDC1612.h"\n\nLDC1612 sensor;\n\n\nvoid setup()\n{\n    Serial.begin(115200);\n    delay(100);\n    Serial.println("start!");\n\n    sensor.init();\n\n    if(sensor.single_channel_config(CHANNEL_0))\n    {\n        Serial.println("can\'t detect sensor!");\n        while(1);\n    }\n\n\n}\n\n\nvoid loop()\n{\n    u32 result_channel1=0;\n    u32 result_channel2=0;\n\n    /*shows the status of sensor.*/\n    //sensor.get_sensor_status();\n\n    /*Get channel 0 result and parse it.*/\n    sensor.get_channel_result(CHANNEL_0,&result_channel1);\n\n    /*sensor result value.you can make a lot of application according to its changes.*/\n    if(0!=result_channel1)\n    {\n        Serial.print("result_channel0 is ");\n        Serial.println(result_channel1);\n    }\n    \n    delay(1000);\n}\n\n\n\n')),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"If everything goes well, you will see the following result\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C++"},"\nstart!\n17:06:16.418 -> fsensor =3.74\n17:06:16.418 -> result_channel0 is 44387993\nresult_channel0 is 44387847\nresult_channel0 is 43476136\nresult_channel0 is 43799295\nresult_channel0 is 48988429\nresult_channel0 is 48828492\nresult_channel0 is 48682647\nresult_channel0 is 48845443\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Multi-Channel demo")),(0,r.kt)("p",null,"This example shows multiple channels measurement and note LDC1612 support two channels."),(0,r.kt)("p",null,"You may connect coil 1 as shown below:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/img/link.png",alt:null})),(0,r.kt)("p",null,"Code for muti_channel_demo.ino"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C++"},'\n#include "Seeed_LDC1612.h"\n#include "math.h"\n\nLDC1612 sensor;\n\nvoid setup()\n{\n    Serial.begin(115200);\n    delay(100);\n    Serial.println("start!");\n\n    sensor.init();\n\n    /*Enable INT-PIN,Interrupted after measurement is completed.*/\n    //sensor.set_ERROR_CONFIG(0x01);\n\n    /*multiple channel use case configuration.*/\n    if(sensor.LDC1612_mutiple_channel_config())\n    {\n        Serial.println("can\'t detect sensor!");\n        while(1);\n    }\n}\n\n\nvoid loop()\n{\n    u32 result_channel0=0;\n    u32 result_channel1=0;\n\n    /*shows the status of sensor.*/\n    //sensor.get_sensor_status();\n\n    /*sensor result value.you can make a lot of application according to its changes.*/\n    sensor.get_channel_result(0,&result_channel0);\n    sensor.get_channel_result(1,&result_channel1);\n\n    if(0!=result_channel0)\n    {\n        Serial.print("result_channel0 is ");\n        Serial.println(result_channel0);\n    }\n    if(0!=result_channel1)\n    {\n        Serial.print("result_channel1 is ");\n        Serial.println(result_channel1);\n    }\n    delay(1000);\n}\n\n\n\n')),(0,r.kt)("admonition",{title:"success",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"    If everything goes well, you will see the following result\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-C++"},"\nstart!\n17:04:34.063 -> fsensor =3.74\n17:04:34.063 -> fsensor =3.74\n17:04:34.063 -> result_channel0 is 44399351\n17:04:34.063 -> result_channel1 is 43599310\nresult_channel0 is 44648052\n17:04:35.078 -> result_channel1 is 43803483\nresult_channel0 is 44786926\n17:04:36.056 -> result_channel1 is 43990824\nresult_channel0 is 44266733\n17:04:37.069 -> result_channel1 is 43305067\nresult_channel0 is 44767222\n17:04:38.092 -> result_channel1 is 43553768\nresult_channel0 is 46081099\n17:04:39.068 -> result_channel1 is 45089497\nresult_channel0 is 44681202\n17:04:40.083 -> result_channel1 is 43207588\ncan't detect coil Coil Inductance!!!\n17:04:41.098 -> can't detect coil Coil Inductance!!!\ncan't detect coil Coil Inductance!!!\n17:04:42.106 -> result_channel0 is 89478485\ncan't detect coil Coil Inductance!!!\n17:04:43.081 -> result_channel0 is 49469095\nresult_channel0 is 51374493\n17:04:44.113 -> result_channel1 is 49895644\ncan't detect coil Coil Inductance!!!\n17:04:45.090 -> can't detect coil Coil Inductance!!!\ncan't detect coil Coil Inductance!!!\n\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In basic_demo and muti_channel_demo examples, you may keep in mind that each output is corresponding to the intensity of inductance. There is the functional relationship between the output and the intensity of inductance, if you are interested in further information, you may want to refer to ",(0,r.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/res/LDC1612.pdf"},"Datasheet LDC1612")," provided by Texas Instrument(TI).")),(0,r.kt)("h2",{id:"schematic-online-viewer"},"Schematic Online Viewer"),(0,r.kt)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/res/Grove%20-%202-Channel%20Inductive%20Sensor%20(LDC1612).zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"[Zip]")," ",(0,r.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/res/Grove%20-%202-Channel%20Inductive%20Sensor%20(LDC1612).zip"},"Grove - 2-Channel Inductive Sensor(LDC1612) Eagle Files"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"[Zip]")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_LDC1612/archive/master.zip"},"Grove - 2-Channel Inductive Sensor(LDC1612) Software Library"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"[PDF]")," ",(0,r.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-2-Channel_Inductive_Sensor-LDC1612/res/LDC1612.pdf"},"Datasheet LDC1612")))),(0,r.kt)("h2",{id:"tech-support"},"Tech Support"),(0,r.kt)("p",null,"Please do not hesitate to submit the issue into our ",(0,r.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,r.kt)("div",null,(0,r.kt)("br",null),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}u.isMDXComponent=!0}}]);