"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[79547],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return t?i.createElement(h,o(o({ref:n},d),{},{components:t})):i.createElement(h,o({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},65264:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const a={title:"Wi-Fi Connectivity",nointro:null,keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Wio-Terminal-Wi-Fi/",last_update:{date:"01/11/2022",author:"gunengyu"}},o="Wi-Fi Connectivity",l={unversionedId:"Sensor/Wio_Terminal/Network/Wio-Terminal-Wi-Fi",id:"Sensor/Wio_Terminal/Network/Wio-Terminal-Wi-Fi",title:"Wi-Fi Connectivity",description:"This wiki introduces how to configure Wi-Fi connectivity on Wio Terminal using the Realtek RTL8720 core.",source:"@site/docs/Sensor/Wio_Terminal/Network/Wio-Terminal-Wi-Fi.md",sourceDirName:"Sensor/Wio_Terminal/Network",slug:"/Sensor/Wio_Terminal/Network/Wio-Terminal-Wi-Fi",permalink:"/docusaurus_wiki/Sensor/Wio_Terminal/Network/Wio-Terminal-Wi-Fi",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Sensor/Wio_Terminal/Network/Wio-Terminal-Wi-Fi.md",tags:[],version:"current",lastUpdatedBy:"gunengyu",lastUpdatedAt:1641859200,formattedLastUpdatedAt:"Jan 11, 2022",frontMatter:{title:"Wi-Fi Connectivity",nointro:null,keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Wio-Terminal-Wi-Fi/",last_update:{date:"01/11/2022",author:"gunengyu"}},sidebar:"ProductSidebar",previous:{title:"Overview",permalink:"/docusaurus_wiki/Sensor/Wio_Terminal/Network/Wio-Terminal-Network-Overview"},next:{title:"Advanced Wi-Fi Usage",permalink:"/docusaurus_wiki/Sensor/Wio_Terminal/Network/Wio-Terminal-Advanced-Wi-Fi"}},s={},c=[{value:"Configuring as Station (STA) Mode",id:"configuring-as-station-sta-mode",level:2},{value:"Scanning Wi-Fi Network Example Code",id:"scanning-wi-fi-network-example-code",level:3},{value:"Connecting to Specified Network Example Code",id:"connecting-to-specified-network-example-code",level:3},{value:"WiFi Multi Example Code",id:"wifi-multi-example-code",level:3},{value:"Wi-Fi Client Example Code",id:"wi-fi-client-example-code",level:3},{value:"Wi-Fi Https Connection Example Code",id:"wi-fi-https-connection-example-code",level:3},{value:"Obtaining Website&#39;s root CA",id:"obtaining-websites-root-ca",level:4},{value:"Connecting to MQTT Server Example Code",id:"connecting-to-mqtt-server-example-code",level:3},{value:"Connecting to MQTTs Server Example Code",id:"connecting-to-mqtts-server-example-code",level:3},{value:"UDP Client Example Code",id:"udp-client-example-code",level:3},{value:"Python UDP Server Code",id:"python-udp-server-code",level:4},{value:"Arduino Code",id:"arduino-code",level:4},{value:"Wi-Fi NTP Example Code",id:"wi-fi-ntp-example-code",level:3},{value:"Configuring Wi-Fi as Access Point (AP) Mode / Web Server",id:"configuring-wi-fi-as-access-point-ap-mode--web-server",level:2},{value:"Configure as AP Mode (Simple Web Server) Example Code",id:"configure-as-ap-mode-simple-web-server-example-code",level:3},{value:"FAQs",id:"faqs",level:2},{value:"Tech Support",id:"tech-support",level:2}],d={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"wi-fi-connectivity"},"Wi-Fi Connectivity"),(0,r.kt)("p",null,"This wiki introduces how to configure Wi-Fi connectivity on Wio Terminal using the Realtek RTL8720 core."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"    Make sure that you have followed through the Network overview, **updated the latest firmware on RTL8720 and downloaded the dependant Arduino libraries.**\n"))),(0,r.kt)("div",{className:"tips",style:{display:"table",tableLayout:"fixed",backgroundColor:"#f5cfa9",height:"auto",width:"100%"}},(0,r.kt)("div",{className:"left-icon",style:{display:"table-cell",verticalAlign:"middle",backgroundColor:"#eda964",paddingTop:10,boxSizing:"border-box",height:"auto",width:38,textAlign:"center"}},(0,r.kt)("img",{style:{width:26,verticalAlign:"middle"},src:"https://s3-us-west-2.amazonaws.com/static.seeed.cc/seeed/icon/Danger.svg",alt:"attention icon"})),(0,r.kt)("div",{className:"right-desc",style:{display:"table-cell",verticalAlign:"middle",paddingLeft:15,boxSizing:"border-box",width:"calc(95% - 38px)"}},(0,r.kt)("p",{style:{color:"#000000",fontWeight:"bold",marginTop:10}},"Attention"),(0,r.kt)("p",{style:{color:"#000000",fontSize:14}},"The following examples have updated to work with ",(0,r.kt)("b",null,"eRPC Structure Framework Firmware"),", please update to eRPC structure. Simply replace the ",(0,r.kt)("code",null,(0,r.kt)("b",null,"AtWifi.h"))," with ",(0,r.kt)("code",null,(0,r.kt)("b",null,"rpcWiFi.h")),"."))),(0,r.kt)("h2",{id:"configuring-as-station-sta-mode"},"Configuring as Station (STA) Mode"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Include the ",(0,r.kt)("inlineCode",{parentName:"p"},"rpcWifi.h")," library in Arduino.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Configure as STA mode:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"WiFi.mode(WIFI_STA);\n")),(0,r.kt)("h3",{id:"scanning-wi-fi-network-example-code"},"Scanning Wi-Fi Network Example Code"),(0,r.kt)("p",null,"This example will configure itself as Wi-Fi STA mode, scan and print out all the available networks to the Serial."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n\n    // Set WiFi to station mode and disconnect from an AP if it was previously connected\n    WiFi.mode(WIFI_STA);\n    WiFi.disconnect();\n    delay(100);\n\n    Serial.println("Setup done");\n}\n\nvoid loop() {\n    Serial.println("scan start");\n\n    // WiFi.scanNetworks will return the number of networks found\n    int n = WiFi.scanNetworks();\n    Serial.println("scan done");\n    if (n == 0) {\n        Serial.println("no networks found");\n    } else {\n        Serial.print(n);\n        Serial.println(" networks found");\n        for (int i = 0; i < n; ++i) {\n            // Print SSID and RSSI for each network found\n            Serial.print(i + 1);\n            Serial.print(": ");\n            Serial.print(WiFi.SSID(i));\n            Serial.print(" (");\n            Serial.print(WiFi.RSSI(i));\n            Serial.print(")");\n            Serial.println((WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? " " : "*");\n            delay(10);\n        }\n    }\n    Serial.println("");\n\n    // Wait a bit before scanning again\n    delay(5000);\n}\n')),(0,r.kt)("h3",{id:"connecting-to-specified-network-example-code"},"Connecting to Specified Network Example Code"),(0,r.kt)("p",null,"This example connects to a specified Wi-Fi Network. Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"ssid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," to your Wi-Fi network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n\nconst char* ssid = "yourNetworkName";\nconst char* password =  "yourNetworkPassword";\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n\n    // Set WiFi to station mode and disconnect from an AP if it was previously connected\n    WiFi.mode(WIFI_STA);\n    WiFi.disconnect();\n\n    Serial.println("Connecting to WiFi..");\n    WiFi.begin(ssid, password);\n\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.println("Connecting to WiFi..");\n        WiFi.begin(ssid, password);\n    }\n    Serial.println("Connected to the WiFi network");\n    Serial.print("IP Address: ");\n    Serial.println (WiFi.localIP()); // prints out the device\'s IP address\n    }\n\nvoid loop() {\n\n}\n')),(0,r.kt)("h3",{id:"wifi-multi-example-code"},"WiFi Multi Example Code"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Include the ",(0,r.kt)("inlineCode",{parentName:"li"},"rpcWiFi.h"),"and ",(0,r.kt)("inlineCode",{parentName:"li"},"WiFiMulti.h")," libraries in Arduino.")),(0,r.kt)("p",null,"This example invoke the ",(0,r.kt)("inlineCode",{parentName:"p"},"WiFiMulti")," class, you can use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'wifiMulti.addAP("ssid", "password");\n')),(0,r.kt)("p",null,"to add several AP Wi-Fi to the list and ",(0,r.kt)("inlineCode",{parentName:"p"},"wifiMulti.run()")," will try to connect to the best signaled Wi-Fi."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"SSID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Password")," according to your Wi-Fi."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n#include <WiFiMulti.h>\n\nWiFiMulti wifiMulti;\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n\n    wifiMulti.addAP("ssid_from_AP_1", "your_password_for_AP_1");\n    wifiMulti.addAP("ssid_from_AP_2", "your_password_for_AP_2");\n    wifiMulti.addAP("ssid_from_AP_3", "your_password_for_AP_3");\n\n    Serial.println("Connecting Wifi...");\n    if (wifiMulti.run() == WL_CONNECTED) {\n        Serial.println("");\n        Serial.println("WiFi connected");\n        Serial.println("IP address: ");\n        Serial.println(WiFi.localIP());\n    }\n}\n\nvoid loop() {\n    if (wifiMulti.run() != WL_CONNECTED) {\n        Serial.println("WiFi not connected!");\n        delay(1000);\n    }\n}\n')),(0,r.kt)("h3",{id:"wi-fi-client-example-code"},"Wi-Fi Client Example Code"),(0,r.kt)("p",null,"This example demonstrates Wio Terminal configures as STA mode, connects to a specific AP Wi-Fi and sends a HTTP GET request and receive a HTTP response from the web server on the same network."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"ssid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," to your Wi-Fi.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," to the Web server IP address."))),(0,r.kt)("p",null,"To simply test the example, you can start a simple web server using Python on your PC:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Copy and save the following in your local drive, and name it ",(0,r.kt)("inlineCode",{parentName:"li"},"index.html"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<html>\n<body>\nHello World!\n</body>\n</html>\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"In Powershell/Terminal, change directory to the path you just saved ",(0,r.kt)("inlineCode",{parentName:"li"},"index.html")," and run the following code to start a simple Web server using Python:")),(0,r.kt)("p",null,"For Pyhton 3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"python3 -m http.server 80\n")),(0,r.kt)("p",null,"For Python 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"python -m SimpleHTTPServer 80\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," to the IP address of this PC in the Arduino code. Also, change the ",(0,r.kt)("inlineCode",{parentName:"p"},"ssid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"password")," in Arduino code to the same Wi-Fi that is connected with this PC.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Upload the code to Wio Terminal, check Serial monitor to observe results."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcWiFi.h>\n\nconst char* ssid = "yourNetworkName";\nconst char* password =  "yourNetworkPassword";\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n\n    // Set WiFi to station mode and disconnect from an AP if it was previously connected\n    WiFi.mode(WIFI_STA);\n    WiFi.disconnect();\n    delay(2000);\n\n    WiFi.begin(ssid, password);\n\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.println("Connecting to WiFi..");\n    }\n    Serial.println("Connected to the WiFi network");\n    Serial.print("IP Address: ");\n    Serial.println (WiFi.localIP()); // prints out the device\'s IP address\n}\n\n\nvoid loop() {\n    const uint16_t port = 80; // Default port\n    const char* host = "192.168.0.10";  // Target Server IP Address\n\n    Serial.print("Connecting to ");\n    Serial.println(host);\n\n    // Use WiFiClient class to create TCP connections\n    WiFiClient client;\n\n    if (!client.connect(host, port)) {\n        Serial.println("Connection failed.");\n        Serial.println("Waiting 5 seconds before retrying...");\n        delay(5000);\n        return;\n    }\n\n    // This will send a request to the server\n    //uncomment this line to send an arbitrary string to the server\n    //client.print("Send this data to the server");\n    //uncomment this line to send a basic document request to the server\n    client.print("GET /index.html HTTP/1.1\\n\\n"); // sending HTTP GET request\n\n    int maxloops = 0;\n\n    //wait for the server\'s reply to become available\n    while (!client.available() && maxloops < 1000) {\n        maxloops++;\n        delay(1); //delay 1 msec\n    }\n    if (client.available() > 0) {\n        //read back one line from the server\n        String line = client.readString(); // Read from the server response\n        // Proceed various line-endings\n        line.replace("\\r\\n", "\\n");\n        line.replace(\'\\r\', \'\\n\');\n        line.replace("\\n", "\\r\\n");\n        Serial.println(line);\n    } else {\n        Serial.println("client.available() timed out ");\n    }\n\n    Serial.println("Closing connection.");\n    client.stop();\n\n    Serial.println("Waiting 5 seconds before restarting...");\n    delay(5000);\n}\n')),(0,r.kt)("h3",{id:"wi-fi-https-connection-example-code"},"Wi-Fi Https Connection Example Code"),(0,r.kt)("p",null,"This example demonstrates establishing Https connection using Wio Terminal. With this, you can connect to almost all website and obtain data for needs."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Change the ",(0,r.kt)("inlineCode",{parentName:"li"},"ssid")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"password")," to your Wi-Fi.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcWiFi.h>\n#include <WiFiClientSecure.h>\n\nconst char* ssid     = "yourNetworkName";     // your network SSID\nconst char* password = "yourNetworkPassword"; // your network password\n\nconst char*  server = "www.example.com";  // Server URL\nconst char* test_root_ca = \\\n                            "-----BEGIN CERTIFICATE-----\\n"\n                            "MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh\\n"\n                            "MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\\n"\n                            "d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD\\n"\n                            "QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT\\n"\n                            "MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\\n"\n                            "b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG\\n"\n                            "9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB\\n"\n                            "CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97\\n"\n                            "nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt\\n"\n                            "43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P\\n"\n                            "T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4\\n"\n                            "gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO\\n"\n                            "BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR\\n"\n                            "TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw\\n"\n                            "DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr\\n"\n                            "hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg\\n"\n                            "06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF\\n"\n                            "PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls\\n"\n                            "YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk\\n"\n                            "CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=\\n"\n                            "-----END CERTIFICATE-----\\n";\n\n// You can use x.509 client certificates if you want\n//const char* test_client_key = "";   //to verify the client\n//const char* test_client_cert = "";  //to verify the client\n\nWiFiClientSecure client;\n\nvoid setup() {\n    //Initialize serial and wait for port to open:\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n\n    Serial.print("Attempting to connect to SSID: ");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n\n    // attempt to connect to Wifi network:\n    while (WiFi.status() != WL_CONNECTED) {\n        Serial.print(".");\n        // wait 1 second for re-trying\n        delay(1000);\n    }\n    Serial.print("Connected to ");\n    Serial.println(ssid);\n\n    client.setCACert(test_root_ca);\n    //client.setCertificate(test_client_key); // for client verification\n    //client.setPrivateKey(test_client_cert); // for client verification\n\n    Serial.println("\\nStarting connection to server...");\n    if (!client.connect(server, 443)) {\n        Serial.println("Connection failed!");\n    } else {\n        Serial.println("Connected to server!");\n        // Make a HTTP request:\n        client.println("GET https://www.example.com HTTP/1.0");\n        client.println("Host: www.example.com");\n        client.println("Connection: close");\n        client.println();\n\n        while (client.connected()) {\n            String line = client.readStringUntil(\'\\n\');\n            if (line == "\\r") {\n                Serial.println("headers received");\n                break;\n            }\n        }\n        // if there are incoming bytes available\n        // from the server, read them and print them:\n        while (client.available()) {\n            char c = client.read();\n            if (c == \'\\n\') {\n                Serial.write(\'\\r\');\n            }\n            Serial.write(c);\n        }\n        client.stop();\n    }\n}\n\nvoid loop() {\n    // do nothing\n}\n')),(0,r.kt)("h4",{id:"obtaining-websites-root-ca"},"Obtaining Website's root CA"),(0,r.kt)("p",null,"To obtain the root CA for a website, you can run the following command in Terminal (Linux Bash Shell):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openssl s_client -showcerts -verify 5 -connect www.example.com:443 < /dev/null\n")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"www.example.com"))," with desired website's root url."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Windows"),", you can use the ",(0,r.kt)("strong",{parentName:"p"},"Windows Subsystem for Linux (WSL)")," to run the same Linux command."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Make sure you have the dependencies installed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt update\nsudo apt install openssl\n")),(0,r.kt)("h3",{id:"connecting-to-mqtt-server-example-code"},"Connecting to MQTT Server Example Code"),(0,r.kt)("p",null,"This example demonstrates establishing MQTT connection using Wio Terminal with a MQTT Server. With this, you can use the Wio Terminal to subscribe and publish messages to the MQTT server. Here used a free MQTT Server: ",(0,r.kt)("a",{parentName:"p",href:"https://test.mosquitto.org/"},"https://test.mosquitto.org/"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Download and Install the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/knolleary/pubsubclient"},(0,r.kt)("strong",{parentName:"a"},"Arduino MQTT Library"))," here.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n#include <PubSubClient.h>\n\n// Update these with values suitable for your network.\nconst char *ssid = "yourNetworkName";      // your network SSID\nconst char *password = "yourNetworkPassword"; // your network password\n\nconst char *ID = "Wio-Terminal-Client";  // Name of our device, must be unique\nconst char *TOPIC = "WioTerminal";  // Topic to subcribe to\nconst char *subTopic = "inTopic";  // Topic to subcribe to\nconst char *server = "test.mosquitto.org"; // Server URL\n\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i=0;i<length;i++) {\n    Serial.print((char)payload[i]);\n  }\n  Serial.println();\n}\n\nvoid reconnect() {\n  // Loop until we\'re reconnected\n  while (!client.connected())\n  {\n    Serial.print("Attempting MQTT connection...");\n    // Attempt to connect\n    if (client.connect(ID)) {\n      Serial.println("connected");\n      // Once connected, publish an announcement...\n      client.publish(TOPIC, "{\\"message\\": \\"Wio Terminal is connected!\\"}");\n      Serial.println("Published connection message successfully!");\n      // ... and resubscribe\n      client.subscribe(subTopic);\n      Serial.print("Subcribed to: ");\n      Serial.println(subTopic);\n    }\n    else {\n      Serial.print("failed, rc=");\n      Serial.print(client.state());\n      Serial.println(" try again in 5 seconds");\n      // Wait 5 seconds before retrying\n      delay(5000);\n    }\n  }\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  while (!Serial)\n    ; // Wait for Serial to be ready\n  Serial.print("Attempting to connect to SSID: ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n\n  // attempt to connect to Wifi network:\n  while (WiFi.status() != WL_CONNECTED)\n  {\n    Serial.print(".");\n    WiFi.begin(ssid, password);\n    // wait 1 second for re-trying\n    delay(1000);\n  }\n  \n  Serial.print("Connected to ");\n  Serial.println(ssid);\n  delay(500);\n\n  client.setServer(server, 1883);\n  client.setCallback(callback);\n}\n\nvoid loop()\n{\n  if (!client.connected()) {\n    reconnect();\n  }\n  client.loop();\n}\n')),(0,r.kt)("h3",{id:"connecting-to-mqtts-server-example-code"},"Connecting to MQTTs Server Example Code"),(0,r.kt)("div",{align:"center"},(0,r.kt)("video",{width:560,height:315,controls:!0},(0,r.kt)("source",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/mqtts.mp4",type:"video/mp4"}))),(0,r.kt)("p",null,"This example demonstrates establishing MQTTs connection using Wio Terminal. Here used a free MQTTs Server: ",(0,r.kt)("a",{parentName:"p",href:"https://test.mosquitto.org/"},"https://test.mosquitto.org/")," and sending accelerator data to a topic."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Download and Install the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/knolleary/pubsubclient"},(0,r.kt)("strong",{parentName:"a"},"Arduino MQTT Library"))," here.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Install the Accelerator Library for Wio Terminal following ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-IMU-Overview/"},(0,r.kt)("strong",{parentName:"a"},"this wiki")),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The Wio Terminal will publish accelerator to the ",(0,r.kt)("inlineCode",{parentName:"p"},"WioTerminal/IMU")," topic and subscribe messages from the ",(0,r.kt)("inlineCode",{parentName:"p"},"inTopic")," topic."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n#include <PubSubClient.h>\n#include <WiFiClientSecure.h>\n#include"LIS3DHTR.h"\n\nconst char *ssid = "yourNetworkName";      // your network SSID\nconst char *password = "yourNetworkPassword"; // your network password\n\nconst char *ID = "Wio-Terminal-Client";  // Name of our device, must be unique\nconst char *TOPIC = "WioTerminal/IMU";  // Topic to subcribe to\nconst char *subTopic = "inTopic";  // Topic to subcribe to\n\nconst char *server = "test.mosquitto.org"; // Server URL\nconst char *test_root_ca =\n"-----BEGIN CERTIFICATE-----\\n"\n"MIIEAzCCAuugAwIBAgIUBY1hlCGvdj4NhBXkZ/uLUZNILAwwDQYJKoZIhvcNAQEL\\n"\n"BQAwgZAxCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5Vbml0ZWQgS2luZ2RvbTEOMAwG\\n"\n"A1UEBwwFRGVyYnkxEjAQBgNVBAoMCU1vc3F1aXR0bzELMAkGA1UECwwCQ0ExFjAU\\n"\n"BgNVBAMMDW1vc3F1aXR0by5vcmcxHzAdBgkqhkiG9w0BCQEWEHJvZ2VyQGF0Y2hv\\n"\n"by5vcmcwHhcNMjAwNjA5MTEwNjM5WhcNMzAwNjA3MTEwNjM5WjCBkDELMAkGA1UE\\n"\n"BhMCR0IxFzAVBgNVBAgMDlVuaXRlZCBLaW5nZG9tMQ4wDAYDVQQHDAVEZXJieTES\\n"\n"MBAGA1UECgwJTW9zcXVpdHRvMQswCQYDVQQLDAJDQTEWMBQGA1UEAwwNbW9zcXVp\\n"\n"dHRvLm9yZzEfMB0GCSqGSIb3DQEJARYQcm9nZXJAYXRjaG9vLm9yZzCCASIwDQYJ\\n"\n"KoZIhvcNAQEBBQADggEPADCCAQoCggEBAME0HKmIzfTOwkKLT3THHe+ObdizamPg\\n"\n"UZmD64Tf3zJdNeYGYn4CEXbyP6fy3tWc8S2boW6dzrH8SdFf9uo320GJA9B7U1FW\\n"\n"Te3xda/Lm3JFfaHjkWw7jBwcauQZjpGINHapHRlpiCZsquAthOgxW9SgDgYlGzEA\\n"\n"s06pkEFiMw+qDfLo/sxFKB6vQlFekMeCymjLCbNwPJyqyhFmPWwio/PDMruBTzPH\\n"\n"3cioBnrJWKXc3OjXdLGFJOfj7pP0j/dr2LH72eSvv3PQQFl90CZPFhrCUcRHSSxo\\n"\n"E6yjGOdnz7f6PveLIB574kQORwt8ePn0yidrTC1ictikED3nHYhMUOUCAwEAAaNT\\n"\n"MFEwHQYDVR0OBBYEFPVV6xBUFPiGKDyo5V3+Hbh4N9YSMB8GA1UdIwQYMBaAFPVV\\n"\n"6xBUFPiGKDyo5V3+Hbh4N9YSMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL\\n"\n"BQADggEBAGa9kS21N70ThM6/Hj9D7mbVxKLBjVWe2TPsGfbl3rEDfZ+OKRZ2j6AC\\n"\n"6r7jb4TZO3dzF2p6dgbrlU71Y/4K0TdzIjRj3cQ3KSm41JvUQ0hZ/c04iGDg/xWf\\n"\n"+pp58nfPAYwuerruPNWmlStWAXf0UTqRtg4hQDWBuUFDJTuWuuBvEXudz74eh/wK\\n"\n"sMwfu1HFvjy5Z0iMDU8PUDepjVolOCue9ashlS4EB5IECdSR2TItnAIiIwimx839\\n"\n"LdUdRudafMu5T5Xma182OC0/u/xRlEm+tvKGGmfFcN0piqVl8OrSPBgIlb+1IKJE\\n"\n"m/XriWr/Cq4h/JfB7NTsezVslgkBaoU=\\n"\n"-----END CERTIFICATE-----\\n";\n\nlong lastMsg = 0;\n\nLIS3DHTR<TwoWire> lis;\nWiFiClientSecure wifiClient;\nPubSubClient client(wifiClient);\n\nvoid callback(char *topic, byte *payload, unsigned int length)\n{\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i = 0; i < length; i++)\n  {\n    Serial.print((char)payload[i]);\n  }\n  Serial.println();\n}\n\nvoid reconnect()\n{\n  // Loop until we\'re reconnected\n  while (!client.connected())\n  {\n    Serial.print("Attempting MQTT connection...");\n    // Attempt to connect\n    if (client.connect(ID))\n    {\n      Serial.println("connected");\n      // Once connected, publish an announcement...\n      client.publish(TOPIC, "{\\"message\\": \\"Wio Terminal is connected!\\"}");\n      Serial.println("Published connection message successfully!");\n      // ... and resubscribe\n      client.subscribe(subTopic);\n      Serial.print("Subcribed to: ");\n      Serial.println(subTopic);\n    }\n    else\n    {\n      Serial.print("failed, rc=");\n      Serial.print(client.state());\n      Serial.println(" try again in 5 seconds");\n      // Wait 5 seconds before retrying\n      delay(5000);\n    }\n  }\n}\n\nvoid setup()\n{\n  //Initialize serial and wait for port to open:\n  Serial.begin(115200);\n  while (!Serial)\n    ; // Wait for Serial to be ready\n  delay(1000);\n\n  lis.begin(Wire1);\n \n  if (!lis) {\n    Serial.println("ERROR");\n    while(1);\n  }\n  lis.setOutputDataRate(LIS3DHTR_DATARATE_25HZ); //Data output rate\n  lis.setFullScaleRange(LIS3DHTR_RANGE_2G); //Scale range set to 2g\n\n  Serial.print("Attempting to connect to SSID: ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n\n  // attempt to connect to Wifi network:\n  while (WiFi.status() != WL_CONNECTED)\n  {\n    Serial.print(".");\n    WiFi.begin(ssid, password);\n    // wait 1 second for re-trying\n    delay(1000);\n  }\n  Serial.print("Connected to ");\n  Serial.println(ssid);\n\n  wifiClient.setCACert(test_root_ca);\n\n  client.setServer(server, 8883);\n  client.setCallback(callback);\n}\n\n\nvoid loop()\n{\n  if (!client.connected())\n  {\n    reconnect();\n  }\n  \n  float x_values, y_values, z_values;\n  \n  // Sending Data\n  long now = millis();\n  if (now - lastMsg > 5000) {\n    lastMsg = now;\n \n  x_values = lis.getAccelerationX();\n  y_values = lis.getAccelerationY();\n  z_values = lis.getAccelerationZ();\n  String data="{\\"x-axis\\": "+String(x_values)+","+"\\"y-axis\\": "+String(y_values)+","+"\\"z-axis\\": "+String(z_values)+"}";\n\n  if (!client.publish(TOPIC, data.c_str())) {\n    Serial.println("Message failed to send.");\n  }\n  Serial.printf("Message Send [%s] ", TOPIC);\n  Serial.println(data);\n  }\n  \n  client.loop();\n}\n')),(0,r.kt)("h3",{id:"udp-client-example-code"},"UDP Client Example Code"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/udp-example.png"})),(0,r.kt)("p",null,"This example connects to a Wi-Fi and sends UDP packets to a UDP Server that's running on your PC."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Make sure that your PC and Wio Terminal are in the same network!"),(0,r.kt)("h4",{id:"python-udp-server-code"},"Python UDP Server Code"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Save the following code as ",(0,r.kt)("inlineCode",{parentName:"p"},"udp_server.py"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run the python script : ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"python udp_server.py")),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# This python script listens on UDP port 3333 \n# for messages from the Wio Terminal board and prints them\nimport socket\nimport sys\n\ntry :\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nexcept socket.error, msg :\n    print 'Failed to create socket. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]\n    sys.exit()\n\ntry:\n    s.bind(('', 3333))\nexcept socket.error , msg:\n    print 'Bind failed. Error: ' + str(msg[0]) + ': ' + msg[1]\n    sys.exit()\n     \nprint 'Server listening'\n\nwhile 1:\n    d = s.recvfrom(1024)\n    data = d[0]\n     \n    if not data: \n        break\n    \n    print data.strip()\n    \ns.close()\n")),(0,r.kt)("h4",{id:"arduino-code"},"Arduino Code"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"networkName")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"networkPswd")," to your Wi-Fi settings.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"udpAddress")," to your PC's IP address and make sure your PC that's running the UDP Server is at the same network as Wio Terminal.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Upload the code to Wio Terminal."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcWiFi.h>\n#include <WiFiUdp.h>\n\n// WiFi network name and password:\nconst char * networkName = "your-ssid";\nconst char * networkPswd = "your-password";\n\n//IP address to send UDP data to:\n// either use the ip address of the server or \n// a network broadcast address\nconst char * udpAddress = "192.168.0.255";\nconst int udpPort = 3333;\n\n//Are we currently connected?\nboolean connected = false;\n\n//The udp library class\nWiFiUDP udp;\n\nvoid setup(){\n  // Initilize hardware serial:\n  Serial.begin(115200);\n  \n  //Connect to the WiFi network\n  connectToWiFi(networkName, networkPswd);\n}\n\nvoid loop(){\n  //only send data when connected\n  if(connected){\n    //Send a packet\n    udp.beginPacket(udpAddress,udpPort);\n    udp.printf("Seconds since boot: %lu", millis()/1000);\n    udp.endPacket();\n  }\n  //Wait for 1 second\n  delay(1000);\n}\n\nvoid connectToWiFi(const char * ssid, const char * pwd){\n  Serial.println("Connecting to WiFi network: " + String(ssid));\n\n  // delete old config\n  WiFi.disconnect(true);\n  //register event handler\n  WiFi.onEvent(WiFiEvent);\n  \n  //Initiate connection\n  WiFi.begin(ssid, pwd);\n\n  Serial.println("Waiting for WIFI connection...");\n}\n\n//wifi event handler\nvoid WiFiEvent(WiFiEvent_t event){\n    switch(event) {\n      case SYSTEM_EVENT_STA_GOT_IP:\n          //When connected set \n          Serial.print("WiFi connected! IP address: ");\n          Serial.println(WiFi.localIP());  \n          //initializes the UDP state\n          //This initializes the transfer buffer\n          udp.begin(WiFi.localIP(),udpPort);\n          connected = true;\n          break;\n      case SYSTEM_EVENT_STA_DISCONNECTED:\n          Serial.println("WiFi lost connection");\n          connected = false;\n          break;\n      default: break;\n    }\n}\n\n')),(0,r.kt)("h3",{id:"wi-fi-ntp-example-code"},"Wi-Fi NTP Example Code"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/wifi-udp-rpc.png"})),(0,r.kt)("p",null,"This example uses UDP to obtain the NTP time and uses the built-in RTC on the SAMD51 core to keep the time updated."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Install the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_RTC"},(0,r.kt)("strong",{parentName:"a"},"Seeed_Arduino_RTC"))," Library.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Install the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ansonhe97/millisDelay"},(0,r.kt)("strong",{parentName:"a"},"millisDelay"))," Library."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcWiFi.h>\n#include <millisDelay.h>\n#include "RTC_SAMD51.h"\n\nconst char ssid[] = "yourNetworkName"; // add your required ssid\nconst char password[] = "yourNetworkPassword"; // add your own netywork password\n\nmillisDelay updateDelay; // the update delay object. used for ntp periodic update.\n\nunsigned int localPort = 2390;      // local port to listen for UDP packets\nchar timeServer[] = "time.nist.gov"; // extenral NTP server e.g. time.nist.gov\n\nconst int NTP_PACKET_SIZE = 48; // NTP time stamp is in the first 48 bytes of the message\nbyte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming and outgoing packets\n\n// declare a time object\nDateTime now;\n\n// define WiFI client\nWiFiClient client;\n\n//The udp library class\nWiFiUDP udp;\n\n// localtime\nunsigned long devicetime;\n\nRTC_SAMD51 rtc;\n\n// for use by the Adafuit RTClib library\nchar daysOfTheWeek[7][12] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };\n\nvoid setup() {\n\n    Serial.begin(115200);\n\n    while (!Serial); // wait for serial port to connect. Needed for native USB\n\n    // setup network before rtc check \n    connectToWiFi(ssid, password);\n\n    // get the time via NTP (udp) call to time server\n    // getNTPtime returns epoch UTC time adjusted for timezone but not daylight savings\n    // time\n    devicetime = getNTPtime();\n\n    // check if rtc present\n    if (devicetime == 0) {\n        Serial.println("Failed to get time from network time server.");\n    }\n\n    if (!rtc.begin()) {\n        Serial.println("Couldn\'t find RTC");\n        while (1) delay(10); // stop operating\n    }\n\n    // get and print the current rtc time\n    now = rtc.now();\n    Serial.print("RTC time is: ");\n    Serial.println(now.timestamp(DateTime::TIMESTAMP_FULL));\n\n    // adjust time using ntp time\n    rtc.adjust(DateTime(devicetime));\n\n    // print boot update details\n    Serial.println("RTC (boot) time updated.");\n    // get and print the adjusted rtc time\n    now = rtc.now();\n    Serial.print("Adjusted RTC (boot) time is: ");\n    Serial.println(now.timestamp(DateTime::TIMESTAMP_FULL));\n\n    // start millisdelays timers as required, adjust to suit requirements\n    updateDelay.start(1 * 60 * 60 * 1000); // update time via ntp every hr\n\n}\n\nvoid loop() {\n\n    if (updateDelay.justFinished()) { // 12 hour loop\n        // repeat timer\n        updateDelay.repeat(); // repeat\n\n        // update rtc time\n        devicetime = getNTPtime();\n        if (devicetime == 0) {\n            Serial.println("Failed to get time from network time server.");\n        }\n        else {\n            rtc.adjust(DateTime(devicetime));\n            Serial.println("");\n            Serial.println("rtc time updated.");\n            // get and print the adjusted rtc time\n            now = rtc.now();\n            Serial.print("Adjusted RTC time is: ");\n            Serial.println(now.timestamp(DateTime::TIMESTAMP_FULL));\n        }\n    }\n}\n\n\nvoid connectToWiFi(const char* ssid, const char* pwd) {\n    Serial.println("Connecting to WiFi network: " + String(ssid));\n\n    // delete old config\n    WiFi.disconnect(true);\n\n    Serial.println("Waiting for WIFI connection...");\n\n    //Initiate connection\n    WiFi.begin(ssid, pwd);\n\n    while (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pwd);\n        delay(500);\n    }\n    Serial.println("Connected.");\n    printWifiStatus();\n\n}\n\nunsigned long getNTPtime() {\n\n    // module returns a unsigned long time valus as secs since Jan 1, 1970 \n    // unix time or 0 if a problem encounted\n\n    //only send data when connected\n    if (WiFi.status() == WL_CONNECTED) {\n        //initializes the UDP state\n        //This initializes the transfer buffer\n        udp.begin(WiFi.localIP(), localPort);\n\n        sendNTPpacket(timeServer); // send an NTP packet to a time server\n        // wait to see if a reply is available\n        delay(1000);\n\n        if (udp.parsePacket()) {\n            Serial.println("udp packet received");\n            Serial.println("");\n            // We\'ve received a packet, read the data from it\n            udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer\n\n            //the timestamp starts at byte 40 of the received packet and is four bytes,\n            // or two words, long. First, extract the two words:\n\n            unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);\n            unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);\n            // combine the four bytes (two words) into a long integer\n            // this is NTP time (seconds since Jan 1 1900):\n            unsigned long secsSince1900 = highWord << 16 | lowWord;\n            // Unix time starts on Jan 1 1970. In seconds, that\'s 2208988800:\n            const unsigned long seventyYears = 2208988800UL;\n            // subtract seventy years:\n            unsigned long epoch = secsSince1900 - seventyYears;\n\n            // adjust time for timezone offset in secs +/- from UTC\n            // WA time offset from UTC is +8 hours (28,800 secs)\n            // + East of GMT\n            // - West of GMT\n            long tzOffset = 28800UL;\n\n            // WA local time \n            unsigned long adjustedTime;\n            return adjustedTime = epoch + tzOffset;\n        }\n        else {\n            // were not able to parse the udp packet successfully\n            // clear down the udp connection\n            udp.stop();\n            return 0; // zero indicates a failure\n        }\n        // not calling ntp time frequently, stop releases resources\n        udp.stop();\n    }\n    else {\n        // network not connected\n        return 0;\n    }\n\n}\n\n// send an NTP request to the time server at the given address\nunsigned long sendNTPpacket(const char* address) {\n    // set all bytes in the buffer to 0\n    for (int i = 0; i < NTP_PACKET_SIZE; ++i) {\n        packetBuffer[i] = 0;\n    }\n    // Initialize values needed to form NTP request\n    // (see URL above for details on the packets)\n    packetBuffer[0] = 0b11100011;   // LI, Version, Mode\n    packetBuffer[1] = 0;     // Stratum, or type of clock\n    packetBuffer[2] = 6;     // Polling Interval\n    packetBuffer[3] = 0xEC;  // Peer Clock Precision\n    // 8 bytes of zero for Root Delay & Root Dispersion\n    packetBuffer[12] = 49;\n    packetBuffer[13] = 0x4E;\n    packetBuffer[14] = 49;\n    packetBuffer[15] = 52;\n\n    // all NTP fields have been given values, now\n    // you can send a packet requesting a timestamp:\n    udp.beginPacket(address, 123); //NTP requests are to port 123\n    udp.write(packetBuffer, NTP_PACKET_SIZE);\n    udp.endPacket();\n}\n\nvoid printWifiStatus() {\n    // print the SSID of the network you\'re attached to:\n    Serial.println("");\n    Serial.print("SSID: ");\n    Serial.println(WiFi.SSID());\n\n    // print your WiFi shield\'s IP address:\n    IPAddress ip = WiFi.localIP();\n    Serial.print("IP Address: ");\n    Serial.println(ip);\n\n    // print the received signal strength:\n    long rssi = WiFi.RSSI();\n    Serial.print("signal strength (RSSI):");\n    Serial.print(rssi);\n    Serial.println(" dBm");\n    Serial.println("");\n}\n')),(0,r.kt)("h2",{id:"configuring-wi-fi-as-access-point-ap-mode--web-server"},"Configuring Wi-Fi as Access Point (AP) Mode / Web Server"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Include ",(0,r.kt)("inlineCode",{parentName:"p"},"rpcWiFi.h"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"WiFiClient.h")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WifiAP.h")," libraries in Arduino.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Configure AP Wi-Fi ",(0,r.kt)("inlineCode",{parentName:"p"},"ssid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"password"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Initialize Wi-Fi Server on port 80:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"WiFiServer server(80);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Initialize AP with the ",(0,r.kt)("inlineCode",{parentName:"li"},"ssid")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"password"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"WiFi.softAP(ssid, password);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start the Web Server:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"server.begin();\n")),(0,r.kt)("h3",{id:"configure-as-ap-mode-simple-web-server-example-code"},"Configure as AP Mode (Simple Web Server) Example Code"),(0,r.kt)("p",null,"This example configures Wio Terminal as a simple web server and allows you to connect to its AP network and control the hardware based on the response on the HTTP."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'/*\n    WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\n\n    Steps:\n    1. Connect to the access point "yourAp"\n    2. Point your web browser to http://<This-AP-IP>/H to turn the LED on or http://<This-AP-IP>/L to turn it off\n       (<This-AP-IP> should be replaced with the IP got in terminal/SerialPort, see Note 1)\n     OR\n     Run raw TCP "GET /H" and "GET /L" on PuTTY terminal with IP address (see Note 1) and 80 as port\n\n    Created for arduino-esp32 on 04 July, 2018\n    by Elochukwu Ifediora (fedy0)\n*/\n\n#include <rpcWiFi.h>\n#include <WiFiClient.h>\n#include <WiFiAP.h>\n\n#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED\n                        // or comment this line out if your dev board has a built-in LED\n\n// Set these to your desired credentials.\nconst char* ssid = "yourAP";\nconst char* password = "yourPassword";\n\nWiFiServer server(80);\n\n\nvoid setup() {\n    pinMode(LED_BUILTIN, OUTPUT);\n\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n    Serial.println();\n    Serial.println("Configuring access point...");\n\n    // You can remove the password parameter if you want the AP to be open.\n    WiFi.softAP(ssid, password);\n    IPAddress myIP = WiFi.softAPIP();\n    /*\n     * Note 1\n     * Record this IP, will used by Client (such as Web Browser)\n     */\n    Serial.print("AP IP address: ");\n    Serial.println(myIP);\n    server.begin();\n\n    Serial.println("Server started");\n}\n\nvoid loop() {\n    WiFiClient client = server.available();   // listen for incoming clients\n\n    if (client) {                             // if you get a client,\n        Serial.println("New Client.");           // print a message out the serial port\n        String currentLine = "";                // make a String to hold incoming data from the client\n        while (client.connected()) {            // loop while the client\'s connected\n            if (client.available()) {             // if there\'s bytes to read from the client,\n                char c = client.read();             // read a byte, then\n                Serial.write(c);                    // print it out the serial monitor\n                if (c == \'\\n\') {                    // if the byte is a newline character\n\n                    // if the current line is blank, you got two newline characters in a row.\n                    // that\'s the end of the client HTTP request, so send a response:\n                    if (currentLine.length() == 0) {\n                        // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\n                        // and a content-type so the client knows what\'s coming, then a blank line:\n                        client.println("HTTP/1.1 200 OK");\n                        client.println("Content-type:text/html");\n                        client.println();\n\n                        // the content of the HTTP response follows the header:\n                        client.print("Click <a href=\\"/H\\">here</a> to turn ON the LED.<br>");\n                        client.print("Click <a href=\\"/L\\">here</a> to turn OFF the LED.<br>");\n\n                        // The HTTP response ends with another blank line:\n                        client.println();\n                        // break out of the while loop:\n                        break;\n                    } else {    // if you got a newline, then clear currentLine:\n                        currentLine = "";\n                    }\n                } else if (c != \'\\r\') {  // if you got anything else but a carriage return character,\n                    currentLine += c;      // add it to the end of the currentLine\n                }\n\n                // Check to see if the client request was "GET /H" or "GET /L":\n                if (currentLine.endsWith("GET /H")) {\n                    digitalWrite(LED_BUILTIN, HIGH);               // GET /H turns the LED on\n                }\n                if (currentLine.endsWith("GET /L")) {\n                    digitalWrite(LED_BUILTIN, LOW);                // GET /L turns the LED off\n                }\n            }\n        }\n        // close the connection:\n        client.stop();\n        Serial.println("Client Disconnected.");\n    }\n}\n')),(0,r.kt)("h2",{id:"faqs"},"FAQs"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Checking the the RTL8720 Firmware Version in the Arduino Code?")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait to open Serial Monitor\n    Serial.printf("RTL8720 Firmware Version: %s", rpc_system_version());\n}\n\nvoid loop() {\n}\n')),(0,r.kt)("h2",{id:"tech-support"},"Tech Support"),(0,r.kt)("p",null," if you have any technical issue.  submit the issue into our ",(0,r.kt)("a",{parentName:"p",href:"http://forum.seeedstudio.com/"},"forum"),". "),(0,r.kt)("div",null,(0,r.kt)("br",null),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}p.isMDXComponent=!0}}]);