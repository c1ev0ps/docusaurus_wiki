"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[36001],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>m});var r=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=r.createContext({}),p=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=p(t.components);return r.createElement(l.Provider,{value:e},t.children)},c="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,a=t.originalType,l=t.parentName,d=s(t,["components","mdxType","originalType","parentName"]),c=p(n),h=i,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||a;return n?r.createElement(m,o(o({ref:e},d),{},{components:n})):r.createElement(m,o({ref:e},d))}));function m(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[c]="string"==typeof t?t:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},71402:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={description:"Grove Beginner Kit for Arduino education pack",title:"Grove Beginner Kit for Arduino education pack",keywords:["Kit with Courses"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"2/14/2023",author:"hushuxu"}},o="Grove Beginner Kit for Arduino Projects",s={unversionedId:"Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-for-Arduino-education-pack",id:"Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-for-Arduino-education-pack",title:"Grove Beginner Kit for Arduino education pack",description:"Grove Beginner Kit for Arduino education pack",source:"@site/docs/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-for-Arduino-education-pack.md",sourceDirName:"Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino",slug:"/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-for-Arduino-education-pack",permalink:"/docusaurus_wiki/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-for-Arduino-education-pack",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-for-Arduino-education-pack.md",tags:[],version:"current",lastUpdatedBy:"hushuxu",lastUpdatedAt:1676332800,formattedLastUpdatedAt:"Feb 14, 2023",frontMatter:{description:"Grove Beginner Kit for Arduino education pack",title:"Grove Beginner Kit for Arduino education pack",keywords:["Kit with Courses"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"2/14/2023",author:"hushuxu"}},sidebar:"ProductSidebar",previous:{title:"Grove Beginner Kit for Arduino",permalink:"/docusaurus_wiki/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-For-Arduino"},next:{title:"Grove Beginner Kit for Arduino Upverter Guide",permalink:"/docusaurus_wiki/Top_Brand/Arduino/Kit with Courses/Grove Beginner Kit for Arduino/Grove-Beginner-Kit-for-Arduino-Upverter-Guide"}},l={},p=[{value:"Project 1: Intrusion Alarm",id:"project-1-intrusion-alarm",level:2},{value:"project 2: Oscillating fan",id:"project-2-oscillating-fan",level:2},{value:"Project 3: Remote Control Oscillating Fan",id:"project-3-remote-control-oscillating-fan",level:2},{value:"Project 4: Smart Humidifier",id:"project-4-smart-humidifier",level:2},{value:"Project 5: Ultrasonic Radar",id:"project-5-ultrasonic-radar",level:2}],d={toc:p};function c(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"grove-beginner-kit-for-arduino-projects"},"Grove Beginner Kit for Arduino Projects"),(0,i.kt)("h2",{id:"project-1-intrusion-alarm"},"Project 1: Intrusion Alarm"),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/intrustion-Alarm/intursion%20Alarm.gif"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Overview")),(0,i.kt)("p",null,"This wiki introduces how to make a intrusion alarm."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Feature")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The PIR motion sensor can detect people if in the area, then alarm triggered.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Component required")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Beginner-Kit-for-Arduino-p-4549.html"},(0,i.kt)("strong",{parentName:"a"},"Grove Beginner Kit")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-mini-PIR-motion-sensor-p-2930.html"},(0,i.kt)("strong",{parentName:"a"},"MINI PIR motion sensor"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("p",null,"Please follow the same color line to connect each sensor on the board, put the PIR motion sensor grove cable to the D2."),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/intrustion-Alarm/Alarm_new.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Assembly instructions")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/intrustion-Alarm/alarm_assembly.png"})),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"The buzzer (D5) and LED (D4) are embedded in the board.\n"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arduino Instructions")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 1"),". Download the ",(0,i.kt)("a",{parentName:"p",href:"https://www.arduino.cc/en/Main/software"},(0,i.kt)("strong",{parentName:"a"},"Aruidno IDE"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 2"),". Follow the connection picture connect all the sensor on the board."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 3"),". Place the Mini PIR motion sensor in the location of the detection."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 4"),". Copy the code stick on the Aruino IDE then upload it."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-CPP"},"#define PIR_MOTION_SENSOR 2//Use pin 2 to receive the signal from the module\n\nint BuzzerPin = 5;     // set D5 as buzzer\nint LED_RAD = 4;       // set D4 as LED\n\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(PIR_MOTION_SENSOR, INPUT);\n  pinMode(BuzzerPin, OUTPUT);\n  pinMode(LED_RAD, OUTPUT);\n}\n\nvoid loop() {\n\n  if (digitalRead(PIR_MOTION_SENSOR)) {\n    analogWrite(BuzzerPin, 100);\n    digitalWrite(LED_RAD, HIGH);\n    delay(3000);\n    analogWrite(BuzzerPin, 0);\n    digitalWrite(LED_RAD, LOW);\n    delay(4000);\n  }\n\n}\n\n")),(0,i.kt)("h2",{id:"project-2-oscillating-fan"},"project 2: Oscillating fan"),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Oscillating-fan/Oscillating-Fan-gif.gif"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Overview")),(0,i.kt)("p",null,"This wiki introduce how to make a Mini fan to plase on your room keep cool. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Feature")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Automatic swing fan")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Component required")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Beginner-Kit-for-Arduino-p-4549.html"},(0,i.kt)("strong",{parentName:"a"},"Grove Beginner Kit")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Mini-Fan-v1-1.html"},(0,i.kt)("strong",{parentName:"a"},"Grove mini fan")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Servo.html"},(0,i.kt)("strong",{parentName:"a"},"Grove-Servo"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("p",null,"Please connect the fan grove cable to D7, Servo grove cable to D3."),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Oscillating-fan/Fan_new.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Assembly instruction")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Oscillating-fan/fan_assembly.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arduino Instructions")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 1"),". Download the ",(0,i.kt)("a",{parentName:"p",href:"https://www.arduino.cc/en/Main/software"},(0,i.kt)("strong",{parentName:"a"},"Aruidno IDE"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 2"),". Copy the Code and stick on the Arduino IDE"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 3"),". Select the current port: Tools -> Port -> COM (number)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 4"),". Upload the code"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"Please set the fan in the safety position.\n"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-CPP"},"#include <Servo.h>\n\nServo myservo;  // create servo object to control a servo\n\nint pos = 0;    // variable to store the servo position\nint fanPin = 7;  // set D6 as control switch \nint fanState = LOW;\n\nvoid setup() {\n    Serial.begin(9600);\n    myservo.attach(3);  // attaches the servo on pin 2 to the servo object\n    pinMode(fanPin, OUTPUT);\n}\n \nvoid loop() {\n\n fanState = HIGH;\n digitalWrite(fanPin, fanState);\n\n   for (pos = 0; pos <= 100; pos += 1) { // goes from 0 degrees to 100 degrees\n    // in steps of 1 degree\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\n    delay(40);                       // waits 15ms for the servo to reach the position\n  }\n  for (pos = 100; pos >= 0; pos -= 1) { // goes from 100 degrees to 0 degrees\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\n    delay(40);                       // waits 15ms for the servo to reach the position\n  }\n}\n")),(0,i.kt)("h2",{id:"project-3-remote-control-oscillating-fan"},"Project 3: Remote Control Oscillating Fan"),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Remote-Control-Oscillating-Fan/Fan_IRcontroler.gif\n"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Overview")),(0,i.kt)("p",null,"This wiki introduces how to make a remote control oscillating fan."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Feature")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The fan power controlled by the controller. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The fan swing way is able to use remote control."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Component required")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Beginner-Kit-for-Arduino-p-4549.html"},(0,i.kt)("strong",{parentName:"a"},"Grove Beginner Kit")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Mini-Fan-v1-1.html"},(0,i.kt)("strong",{parentName:"a"},"Grove mini fan")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Servo.html"},(0,i.kt)("strong",{parentName:"a"},"Grove-Servo")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Infrared-Receiver.html"},(0,i.kt)("strong",{parentName:"a"},"Grove - IR (Infrared) Receiver"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("p",null,"Please follow the same color line to connect each sensor on the board. Please connect the fan grove cable to D7, servo grove cable to D3, IR grove cable to D2."),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Remote-Control-Oscillating-Fan/remote_fan_new.png"})),(0,i.kt)("p",null,"This is controller botton function. "),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:500,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Remote-Control-Oscillating-Fan/remote_controller.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Assembly instruction")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Remote-Control-Oscillating-Fan/remote_fan_assembly.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arduino Instructions")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 1"),". Follow the connection picture connect all the sensor on the board."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 2"),". Download the ",(0,i.kt)("a",{parentName:"p",href:"https://www.arduino.cc/en/Main/software"},(0,i.kt)("strong",{parentName:"a"},"Aruidno IDE"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 3"),". Navigate to ",(0,i.kt)("strong",{parentName:"p"},"Sketch")," -> ",(0,i.kt)("strong",{parentName:"p"},"Include Library")," -> ",(0,i.kt)("strong",{parentName:"p"},"Manage Libraries"),", search ",(0,i.kt)("strong",{parentName:"p"},"IRremote")," then install it. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 4"),". Copy the code stick on the Aruino IDE then upload it."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 5"),". Place the Fan in the safety position, try to press the button make sure it can work safely."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"Refer How to [**install library**](https://wiki.seeedstudio.com/How_to_install_Arduino_Library) to install library for Arduino.\n"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-CPP"},"#include <IRremote.h>\n#include <Servo.h>\n\nServo myservo;  // create servo object to control a servo\nint RECV_PIN = 2; // set pin 2 as IR control\n\nIRrecv irrecv(RECV_PIN);\n\ndecode_results results;\n\nint pos = 90;    // variable to store the servo position\nint fanPin = 7;  // set D6 as control switch\nint fanState = LOW;\nint IO = 0;\n\nvoid setup()\n{\n  Serial.begin(9600);\n  Serial.println(\"Enabling IRin\");  // remind enabling IR\n  irrecv.enableIRIn(); // Start the receiver\n  Serial.println(\"Enabled IRin\");\n  myservo.attach(3);  // attaches the servo on pin 2 to the servo object\n  pinMode(fanPin, OUTPUT);\n\n}\n\n//  power_encode 2155829415     left  2155870215  right  2155821255\n\nvoid loop() {\n  if (irrecv.decode(&results)) { //checking IR signal\n    if (results.value == 2155829415) {    // Power off/on\n      IO++;\n      if (IO % 2 == 0) {\n        fanState = HIGH;\n        digitalWrite(fanPin, fanState);\n        delay(100);\n      }\n      else {\n        fanState = LOW;\n        digitalWrite(fanPin, fanState);\n        delay(100);\n      }\n    }\n\n    if (results.value == 2155821255 ) {    // fan swing to left\n      for (pos; pos <= 89; pos += 1) { // goes from 0 degrees to 90 degrees\n        // in steps of 1 degree\n        myservo.write(pos);              // tell servo to go to position in variable 'pos'\n\n        delay(40);                       // waits 15ms for the servo to reach the position\n        if (irrecv.decode(&results)) {\n          irrecv.resume();\n          if (results.value == 2155870215)\n            break;\n        }\n      }\n    }\n\n    if (results.value == 2155870215 ) {    // fan swing to right\n      for (pos; pos >= 1; pos -= 1) { // goes from 90 degrees to 0 degrees\n        myservo.write(pos);              // tell servo to go to position in variable 'pos'\n        delay(40);                       // waits 15ms for the servo to reach the position\n\n        if (irrecv.decode(&results)) {\n          irrecv.resume();\n          if (results.value == 2155821255)\n            break;\n        }\n      }\n    }\n    Serial.println(pos);\n    Serial.println(results.value, HEX);\n    Serial.println(results.value);\n    irrecv.resume();                    //recive next intrustion\n\n  }\n  delay(100);\n}\n\n")),(0,i.kt)("h2",{id:"project-4-smart-humidifier"},"Project 4: Smart Humidifier"),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Smart-Humidifier/water_atomization_11.gif"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Overview")),(0,i.kt)("p",null,"This wiki introduces how to make water atomization to keep indoor humidity normal."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Feature")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Automatically use the water atomization when the humidity is low.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Display the temperature and humidity in real-time."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Component required")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Beginner-Kit-for-Arduino-p-4549.html"},(0,i.kt)("strong",{parentName:"a"},"Grove Beginner Kit")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Water-Atomization-v1-0.html"},(0,i.kt)("strong",{parentName:"a"},"Grove water atomization"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("p",null,"Please follow the same color line to connect each sensor on the board.\nConnect the Grove water atomization cable to D2. "),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Smart-Humidifier/smart_hum_new.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Assembly instructions")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Smart-Humidifier/Smart_hum_assembly.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arduino Instructions")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 1"),". Follow the connection picture connect all the sensor on the board."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 2")," Download the ",(0,i.kt)("a",{parentName:"p",href:"https://www.arduino.cc/en/Main/software"},(0,i.kt)("strong",{parentName:"a"},"Aruidno IDE"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 3")," Navigate to ",(0,i.kt)("strong",{parentName:"p"},"Sketch")," -> ",(0,i.kt)("strong",{parentName:"p"},"Include Library")," -> ",(0,i.kt)("strong",{parentName:"p"},"Manage Libraries"),", search ",(0,i.kt)("strong",{parentName:"p"},"U8g2")," then install it. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 4")," Download the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Grove_Temperature_And_Humidity_Sensor"},(0,i.kt)("strong",{parentName:"a"},"Grove_Temperature_And_Humidity_Sensor library"))," and install it"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 5"),". Copy the code stick on the Aruino IDE then upload it."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 6"),". Prepare a contain with full water then put the water atomization on the water. "),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"Refer How to [**install library**](https://wiki.seeedstudio.com/How_to_install_Arduino_Library) to install library for Arduino.\n"))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"Prepare some tissue put on the water, let the water atomization keep afloat. The function of tissue is lead water to the transducer and keep upper side of transducer above water.\n"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <Arduino.h>\n#include <U8x8lib.h>\n\n#include "DHT.h"\n#define DHTTYPE DHT11   // DHT 11\n#define DHTPIN 3     // what pin we\'re connected to\nDHT dht(DHTPIN, DHTTYPE);\n\n#include <Wire.h>\n\nU8X8_SSD1306_128X64_NONAME_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);\n\nvoid setup(void) {\n  Serial.begin(115200);\n  u8x8.begin();\n  u8x8.setFlipMode(1);\n  Wire.begin();\n  dht.begin();\n  pinMode(2,INPUT);\n}\n \nvoid loop(void) {\n  float temp_hum_val[2] = {0};\n  int b;\n  int c;\n  if (!dht.readTempAndHumidity(temp_hum_val)) {\n     b = temp_hum_val[0];\n     c = temp_hum_val[1];\n  }\n  else{\n    Serial.println("Failed to get temprature and humidity value.");\n    }\n  u8x8.setFont(u8x8_font_chroma48medium8_r);   // choose a suitable font\n  u8x8.setCursor(0, 0);\n  u8x8.print("Temp: ");  \n  u8x8.setCursor(5, 0);\n  u8x8.print(c);  \n  u8x8.setCursor(8, 0);\n  u8x8.print("*C");  \n  u8x8.setCursor(0, 10);\n  u8x8.print("Hum: ");  \n  u8x8.setCursor(5, 10);\n  u8x8.print(b);  \n  u8x8.setCursor(8, 10);\n  u8x8.print("%");  \n  u8x8.setCursor(0, 20);\n  u8x8.print("atomizer: ");  \n\n  if(b > 70){\n  u8x8.setCursor(9, 20);\n  u8x8.print("OFF");  \n  digitalWrite(2, LOW);    // atomization stopped\n  }\n  if(b <= 70) {\n  u8x8.setCursor(9, 20);\n  u8x8.print("ON "); \n  digitalWrite(2, HIGH);   // atomize \n    }\n  delay(1000);  \n\n}\n')),(0,i.kt)("h2",{id:"project-5-ultrasonic-radar"},"Project 5: Ultrasonic Radar"),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:600,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Ultrasonic-Radar/Radar-gif.gif"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Overview")),(0,i.kt)("p",null,"This wiki introduce how to make a Ultrasonic Radar to detect the object and distance."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Feature")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Detect the object distance")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Scan if exist the object in around"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Component required")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Beginner-Kit-for-Arduino-p-4549.html"},(0,i.kt)("strong",{parentName:"a"},"Grove Beginner Kit")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Servo.html"},(0,i.kt)("strong",{parentName:"a"},"Grove-Servo")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Ultrasonic-Distance-Sensor.html"},(0,i.kt)("strong",{parentName:"a"},"Grove-Ultrasonic distance sensor"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hardware Connection")),(0,i.kt)("p",null,"Please follow the picture, connect the ultrasonic sensor Grove cable to the D2, connect the servo to the D7."),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Ultrasonic-Radar/Radar_new.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Assembly instuction")),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{width:700,src:"https://files.seeedstudio.com/wiki/beginnerKit-5-projects/Ultrasonic-Radar/Radar_assembly.png"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arduino Instructions")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 1"),". Follow the Connection to plug the cable on the port."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 2"),". Download the ",(0,i.kt)("a",{parentName:"p",href:"https://www.arduino.cc/en/Main/software"},(0,i.kt)("strong",{parentName:"a"},"Aruidno IDE"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 3"),". Download the ",(0,i.kt)("a",{parentName:"p",href:"https://processing.org/download/"},(0,i.kt)("strong",{parentName:"a"},"Processing"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 4"),". Download the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_UltrasonicRanger/archive/master.zip"},(0,i.kt)("strong",{parentName:"a"},"UltrasonicRanger"))," Library from Github."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 5"),". Copy the Radar code and stick on the Arduino IDE then upload it."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 6"),". Download the ",(0,i.kt)("a",{parentName:"p",href:"https://processing.org/download/"},(0,i.kt)("strong",{parentName:"a"},"Processing"))," for display the Radar scan map."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 7"),". Copy the Radar-Processing Code and stick on the Processing."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Step 8"),". After the Servo start swing, click play on the Processing software."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"If you do not konw how to intall the library, Click [**here**](https://wiki.seeedstudio.com/Grove-Ultrasonic_Ranger/#software).\n"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Radar code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <Servo.h>\n#include "Ultrasonic.h"\n\nint distance;\nServo myServo;\n\nUltrasonic ultrasonic(2);\n\nvoid setup() {\n    Serial.begin(9600);\n    myServo.attach(7);\n}\nvoid loop() {\n\n    for(int pos = 15; pos <= 165; pos += 1){\n        myServo.write(pos);\n        delay(30);\n        distance = ultrasonic.MeasureInCentimeters();\n        Serial.print(pos); \n        Serial.print(","); \n        Serial.print(distance);\n        Serial.print("."); \n    }\n    \n    for(int pos = 165; pos >= 15; pos -= 1){\n        myServo.write(pos);\n        delay(30);\n        distance = ultrasonic.MeasureInCentimeters();\n        Serial.print(pos);\n        Serial.print(",");\n        Serial.print(distance);\n        Serial.print(".");\n    }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Radar-Processing Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'import processing.serial.*; // imports library for serial communication\nimport java.awt.event.KeyEvent; // imports library for reading the data from the serial port\nimport java.io.IOException;\nSerial myPort; // defines Object Serial\n// defubes variables\nString angle="";\nString distance="";\nString data="";\nString noObject;\nfloat pixsDistance;\nint iAngle, iDistance;\nint index1=0;\nint index2=0;\nPFont orcFont;\nvoid setup() {\n  \n size (1000, 720); // ***CHANGE THIS TO YOUR SCREEN RESOLUTION***\n smooth();\n myPort = new Serial(this,"COM14", 9600); // starts the serial communication\n myPort.bufferUntil(\'.\'); // reads the data from the serial port up to the character \'.\'. So actually it reads this: angle,distance.\n orcFont = loadFont("AgencyFB-Bold-48.vlw");\n}\nvoid draw() {\n  \n  fill(98,245,31);\n  textFont(orcFont);\n  // simulating motion blur and slow fade of the moving line\n  noStroke();\n  fill(0,4); \n  rect(0, 0, width, height-height*0.065); \n  \n  fill(98,245,31); // green color\n  // calls the functions for drawing the radar\n  drawRadar(); \n  drawLine();\n  drawObject();\n  drawText();\n}\nvoid serialEvent (Serial myPort) { // starts reading data from the Serial Port\n  // reads the data from the Serial Port up to the character \'.\' and puts it into the String variable "data".\n  data = myPort.readStringUntil(\'.\');\n  data = data.substring(0,data.length()-1);\n  \n  index1 = data.indexOf(","); // find the character \',\' and puts it into the variable "index1"\n  angle= data.substring(0, index1); // read the data from position "0" to position of the variable index1 or thats the value of the angle the Arduino Board sent into the Serial Port\n  distance= data.substring(index1+1, data.length()); // read the data from position "index1" to the end of the data pr thats the value of the distance\n  \n  // converts the String variables into Integer\n  iAngle = int(angle);\n  iDistance = int(distance);\n}\nvoid drawRadar() {\n  pushMatrix();\n  translate(width/2,height-height*0.074); // moves the starting coordinats to new location\n  noFill();\n  strokeWeight(2);\n  stroke(98,245,31);\n  // draws the arc lines\n  arc(0,0,(width-width*0.0625),(width-width*0.0625),PI,TWO_PI);\n  arc(0,0,(width-width*0.27),(width-width*0.27),PI,TWO_PI);\n  arc(0,0,(width-width*0.479),(width-width*0.479),PI,TWO_PI);\n  arc(0,0,(width-width*0.687),(width-width*0.687),PI,TWO_PI);\n  // draws the angle lines\n  line(-width/2,0,width/2,0);\n  line(0,0,(-width/2)*cos(radians(30)),(-width/2)*sin(radians(30)));\n  line(0,0,(-width/2)*cos(radians(60)),(-width/2)*sin(radians(60)));\n  line(0,0,(-width/2)*cos(radians(90)),(-width/2)*sin(radians(90)));\n  line(0,0,(-width/2)*cos(radians(120)),(-width/2)*sin(radians(120)));\n  line(0,0,(-width/2)*cos(radians(150)),(-width/2)*sin(radians(150)));\n  line((-width/2)*cos(radians(30)),0,width/2,0);\n  popMatrix();\n}\nvoid drawObject() {\n  pushMatrix();\n  translate(width/2,height-height*0.074); // moves the starting coordinats to new location\n  strokeWeight(9);\n  stroke(255,10,10); // red color\n  pixsDistance = iDistance*((height-height*0.1666)*0.025); // covers the distance from the sensor from cm to pixels\n  // limiting the range to 40 cms\n  if(iDistance<40){\n    // draws the object according to the angle and the distance\n  line(pixsDistance*cos(radians(iAngle)),-pixsDistance*sin(radians(iAngle)),(width-width*0.505)*cos(radians(iAngle)),-(width-width*0.505)*sin(radians(iAngle)));\n  }\n  popMatrix();\n}\nvoid drawLine() {\n  pushMatrix();\n  strokeWeight(9);\n  stroke(30,250,60);\n  translate(width/2,height-height*0.074); // moves the starting coordinats to new location\n  line(0,0,(height-height*0.12)*cos(radians(iAngle)),-(height-height*0.12)*sin(radians(iAngle))); // draws the line according to the angle\n  popMatrix();\n}\nvoid drawText() { // draws the texts on the screen\n  \n  pushMatrix();\n  if(iDistance>40) {\n  noObject = "Out of Range";\n  }\n  else {\n  noObject = "In Range";\n  }\n  fill(0,0,0);\n  noStroke();\n  rect(0, height-height*0.0648, width, height);\n  fill(98,245,31);\n  textSize(25);\n  \n  text("10cm",width-width*0.3854,height-height*0.0833);\n  text("20cm",width-width*0.281,height-height*0.0833);\n  text("30cm",width-width*0.177,height-height*0.0833);\n  text("40cm",width-width*0.0729,height-height*0.0833);\n  textSize(40);\n  text("Object: " + noObject, width-width*0.875, height-height*0.0277);\n  text("Angle: " + iAngle +" \xc2\xb0", width-width*0.48, height-height*0.0277);\n  text("Distance: ", width-width*0.26, height-height*0.0277);\n  if(iDistance<40) {\n  text("        " + iDistance +" cm", width-width*0.225, height-height*0.0277);\n  }\n  textSize(25);\n  fill(98,245,60);\n  translate((width-width*0.4994)+width/2*cos(radians(30)),(height-height*0.0907)-width/2*sin(radians(30)));\n  rotate(-radians(-60));\n  text("30\xc2\xb0",0,0);\n  resetMatrix();\n  translate((width-width*0.503)+width/2*cos(radians(60)),(height-height*0.0888)-width/2*sin(radians(60)));\n  rotate(-radians(-30));\n  text("60\xc2\xb0",0,0);\n  resetMatrix();\n  translate((width-width*0.507)+width/2*cos(radians(90)),(height-height*0.0833)-width/2*sin(radians(90)));\n  rotate(radians(0));\n  text("90\xc2\xb0",0,0);\n  resetMatrix();\n  translate(width-width*0.513+width/2*cos(radians(120)),(height-height*0.07129)-width/2*sin(radians(120)));\n  rotate(radians(-30));\n  text("120\xc2\xb0",0,0);\n  resetMatrix();\n  translate((width-width*0.5104)+width/2*cos(radians(150)),(height-height*0.0574)-width/2*sin(radians(150)));\n  rotate(radians(-60));\n  text("150\xc2\xb0",0,0);\n  popMatrix(); \n}\n\n')))}c.isMDXComponent=!0}}]);