"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[57278],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},_=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),_=r,c=u["".concat(s,".").concat(_)]||u[_]||m[_]||i;return n?a.createElement(c,l(l({ref:t},d),{},{components:n})):a.createElement(c,l({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=_;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}_.displayName="MDXCreateElement"},70689:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"Grove-Gesture_v1.0",nointro:null,keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Grove-Gesture_v1.0/",last_update:{date:"01/05/2022",author:"gunengyu"}},l=void 0,o={unversionedId:"Sensor/Grove/Grove_Sensors/Proximity/Grove-Gesture_v1.0",id:"Sensor/Grove/Grove_Sensors/Proximity/Grove-Gesture_v1.0",title:"Grove-Gesture_v1.0",description:"The sensor on Grove - Gesture is PAJ7620U2 that integrates gesture recognition function with general I2C interface into a single chip. It can recognize 9 basic gestures, and these gestures information can be simply accessed via the I2C bus.",source:"@site/docs/Sensor/Grove/Grove_Sensors/Proximity/Grove-Gesture_v1.0.md",sourceDirName:"Sensor/Grove/Grove_Sensors/Proximity",slug:"/Sensor/Grove/Grove_Sensors/Proximity/Grove-Gesture_v1.0",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors/Proximity/Grove-Gesture_v1.0",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Sensor/Grove/Grove_Sensors/Proximity/Grove-Gesture_v1.0.md",tags:[],version:"current",lastUpdatedBy:"gunengyu",lastUpdatedAt:1641340800,formattedLastUpdatedAt:"Jan 5, 2022",frontMatter:{title:"Grove-Gesture_v1.0",nointro:null,keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Grove-Gesture_v1.0/",last_update:{date:"01/05/2022",author:"gunengyu"}},sidebar:"ProductSidebar",previous:{title:"Grove-Adjustable_PIR_Motion_Sensor",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors/Proximity/Grove-Adjustable_PIR_Motion_Sensor"},next:{title:"Grove - Gas Sensor(O\u2082)",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors/Gas/Grove-Gas_Sensor-O2"}},s={},p=[{value:"Features",id:"features",level:2},{value:"Specification",id:"specification",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Play With Arduino",id:"play-with-arduino",level:3},{value:"Hardware",id:"hardware",level:4},{value:"Software",id:"software",level:4},{value:"Play with Codecraft",id:"play-with-codecraft",level:3},{value:"Hardware",id:"hardware-1",level:4},{value:"Software",id:"software-1",level:4},{value:"Play With Raspberry Pi (With Grove Base Hat for Raspberry Pi)",id:"play-with-raspberry-pi-with-grove-base-hat-for-raspberry-pi",level:3},{value:"Hardware",id:"hardware-2",level:4},{value:"Software",id:"software-2",level:4},{value:"Play With Raspberry Pi (with GrovePi_Plus)",id:"play-with-raspberry-pi-with-grovepi_plus",level:3},{value:"Hardware",id:"hardware-3",level:4},{value:"Software",id:"software-3",level:4},{value:"References",id:"references",level:2},{value:"Schematic Online Viewer",id:"schematic-online-viewer",level:2},{value:"Resources",id:"resources",level:2},{value:"Project",id:"project",level:2},{value:"Tech Support",id:"tech-support",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/400px-Gesture_sensor_3.png",alt:null})),(0,r.kt)("p",null,"The sensor on Grove - Gesture is PAJ7620U2 that integrates gesture recognition function with general I2C interface into a single chip. It can recognize 9 basic gestures, and these gestures information can be simply accessed via the I2C bus."),(0,r.kt)("p",null,"Application: You can use Gesture as an input device to control another grove, or a computer, mobile phone, smart car, robot, and more with a simple swipe of your hand."),(0,r.kt)("iframe",{width:800,height:450,src:"https://www.youtube.com/embed/i9hnRPuCx-Q",frameBorder:0,allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),(0,r.kt)("p",{style:{}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/Grove-Gesture-p-2463.html",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/300px-Get_One_Now_Banner-ragular.png"}))),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Built-in proximity detection"),(0,r.kt)("li",{parentName:"ul"},"Various main boards support : Arduino UNO/Seeeduino/Arduino Mega2560"),(0,r.kt)("li",{parentName:"ul"},"9 Basic gestures",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Up"),(0,r.kt)("li",{parentName:"ul"},"Down"),(0,r.kt)("li",{parentName:"ul"},"Left"),(0,r.kt)("li",{parentName:"ul"},"Right"),(0,r.kt)("li",{parentName:"ul"},"Forward"),(0,r.kt)("li",{parentName:"ul"},"Backward"),(0,r.kt)("li",{parentName:"ul"},"Clockwise"),(0,r.kt)("li",{parentName:"ul"},"Count Clockwise"),(0,r.kt)("li",{parentName:"ul"},"Wave")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"More details about Grove modules please refer to [Grove System](https://wiki.seeedstudio.com/Grove_System/)\n"))),(0,r.kt)("h2",{id:"specification"},"Specification"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Spec Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sensor"),(0,r.kt)("td",{parentName:"tr",align:null},"PAJ7620U2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Power supply"),(0,r.kt)("td",{parentName:"tr",align:null},"5V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ambient light immunity"),(0,r.kt)("td",{parentName:"tr",align:null},"< 100k Lux")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Gesture speed in Normal Mode"),(0,r.kt)("td",{parentName:"tr",align:null},"60\xb0/s to 600\xb0/s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Gesture speed in Gaming Mode"),(0,r.kt)("td",{parentName:"tr",align:null},"60\xb0/s to 1200\xb0/s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Interface type\t IIC interface"),(0,r.kt)("td",{parentName:"tr",align:null},"up to 400 kbit/s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Operating Temperature"),(0,r.kt)("td",{parentName:"tr",align:null},"-40\xb0C to +85\xb0C")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Dimensions"),(0,r.kt)("td",{parentName:"tr",align:null},"20 * 20mmv")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Detection range"),(0,r.kt)("td",{parentName:"tr",align:null},"5-10cm")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"I2C Address"),(0,r.kt)("td",{parentName:"tr",align:null},"0x73")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"If you want to use multiplue I2C devices, please refer to [Software I2C](https://wiki.seeedstudio.com/Arduino_Software_I2C_user_guide/).\n"))),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("h3",{id:"play-with-arduino"},"Play With Arduino"),(0,r.kt)("h4",{id:"hardware"},"Hardware"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 1.")," Prepare the below stuffs:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Seeeduino V4.2"),(0,r.kt)("th",{parentName:"tr",align:null},"Base Shield"),(0,r.kt)("th",{parentName:"tr",align:null},"Grove-Gesture v1.0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/seeeduino_v4.2.jpg",alt:"enter image description here"})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/base_shield.jpg",alt:"enter image description here"})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/45d_small.jpg",alt:"enter image description here"}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Seeeduino-V4.2-p-2517.html"},"Get One Now")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Base-Shield-V2-p-1378.html"},"Get One Now")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-Gesture-p-2463.html"},"Get One Now"))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 2.")," Connect Grove-Gesture_v1.0 to port I2C of Grove-Base Shield."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 3.")," Plug Grove - Base Shield into Seeeduino."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 4.")," Connect Seeeduino to PC via a USB cable.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"If we don't have Grove Base Shield, We also can directly connect Grove-Gesture v1.0 to Seeeduino as below.\n"))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Seeeduino"),(0,r.kt)("th",{parentName:"tr",align:null},"Grove-Gesture v1.0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5V"),(0,r.kt)("td",{parentName:"tr",align:null},"VCC")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GND"),(0,r.kt)("td",{parentName:"tr",align:null},"GND")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SDA"),(0,r.kt)("td",{parentName:"tr",align:null},"SDA")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCL"),(0,r.kt)("td",{parentName:"tr",align:null},"SCL")))),(0,r.kt)("p",null,"INT\uff1aGesture detection interrupt flag mask. You can connect INT pad to digit 2 of Arduino by using jumper wire."),(0,r.kt)("p",null,"Below image shows how to plug Grove - Gesture onto the I2C port of Base shield"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/700px-Gesture_install_1.png",alt:null})),(0,r.kt)("p",null,"Then plug Base shield onto Seeeduino"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/seeeduino_connection.jpg",alt:null})),(0,r.kt)("h4",{id:"software"},"Software"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 1.")," Download the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Gesture_PAJ7620"},"library")," from Github."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 2.")," Refer ",(0,r.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/How_to_install_Arduino_Library"},"How to install library")," to install library for Arduino.\nSoftware Installation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 3.")," If you do not know how to upload the code, please check ",(0,r.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/Upload_Code/"},"how to upload code"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 4.")," Start the Arduino IDE, Let's try the up/down demo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 5.")," Copy below code and paste to arduino IDE.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"/*\nThe following simple demo will show you a very easy application: When you move up, the red led will be turned on, otherwise the red led will be turned off.\n*/\n#include <Wire.h>\n#include \"paj7620.h\"\n\nvoid setup()\n{\n  paj7620Init();\n}\n\nvoid loop()\n{\n    uint8_t data = 0;  // Read Bank_0_Reg_0x43/0x44 for gesture result.\n\n    paj7620ReadReg(0x43, 1, &data);  // When different gestures be detected, the variable 'data' will be set to different values by paj7620ReadReg(0x43, 1, &data).\n\n    if (data == GES_UP_FLAG)        // When up gesture be detected,the variable 'data' will be set to GES_UP_FLAG.\n        digitalWrite(4, HIGH);      // turn the LED on (HIGH is the voltage level)\n    if (data == GES_DOWN_FLAG)      // When down gesture be detected,the variable 'data' will be set to GES_DOWN_FLAG.\n        digitalWrite(4, LOW);       // turn the LED off by making the voltage LOW\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 6.")," Select Seeeduino V4 in board manager and COM port."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 7.")," Click upload and put the hand over the Gesture sensor up and down. You will see the led on and off as below.")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/IMG_0029.gif",alt:null})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 8.")," Let's try the 9 gestures by select ",(0,r.kt)("strong",{parentName:"li"},"File->Example->Gesture_PAJ7620->paj7620_9gestures"),", then select Seeeduino v4 as board manager and correct COM port. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include <Wire.h>\n#include "paj7620.h"\n\n/* \nNotice: When you want to recognize the Forward/Backward gestures, your gestures\' reaction time must less than GES_ENTRY_TIME(0.8s). \n        You also can adjust the reaction time according to the actual circumstance.\n*/\n#define GES_REACTION_TIME       500             // You can adjust the reaction time according to the actual circumstance.\n#define GES_ENTRY_TIME          800             // When you want to recognize the Forward/Backward gestures, your gestures\' reaction time must less than GES_ENTRY_TIME(0.8s). \n#define GES_QUIT_TIME           1000\n\nvoid setup()\n{\n    uint8_t error = 0;\n\n    Serial.begin(9600);\n    Serial.println("\\nPAJ7620U2 TEST DEMO: Recognize 9 gestures.");\n\n    error = paj7620Init();          // initialize Paj7620 registers\n    if (error) \n    {\n        Serial.print("INIT ERROR,CODE:");\n        Serial.println(error);\n    }\n    else\n    {\n        Serial.println("INIT OK");\n    }\n    Serial.println("Please input your gestures:\\n");\n}\n\nvoid loop()\n{\n    uint8_t data = 0, data1 = 0, error;\n    \n    error = paj7620ReadReg(0x43, 1, &data);             // Read Bank_0_Reg_0x43/0x44 for gesture result.\n    if (!error) \n    {\n        switch (data)                                   // When different gestures be detected, the variable \'data\' will be set to different values by paj7620ReadReg(0x43, 1, &data).\n        {\n            case GES_RIGHT_FLAG:\n                delay(GES_ENTRY_TIME);\n                paj7620ReadReg(0x43, 1, &data);\n                if(data == GES_FORWARD_FLAG) \n                {\n                    Serial.println("Forward");\n                    delay(GES_QUIT_TIME);\n                }\n                else if(data == GES_BACKWARD_FLAG) \n                {\n                    Serial.println("Backward");\n                    delay(GES_QUIT_TIME);\n                }\n                else\n                {\n                    Serial.println("Right");\n                }          \n                break;\n            case GES_LEFT_FLAG: \n                delay(GES_ENTRY_TIME);\n                paj7620ReadReg(0x43, 1, &data);\n                if(data == GES_FORWARD_FLAG) \n                {\n                    Serial.println("Forward");\n                    delay(GES_QUIT_TIME);\n                }\n                else if(data == GES_BACKWARD_FLAG) \n                {\n                    Serial.println("Backward");\n                    delay(GES_QUIT_TIME);\n                }\n                else\n                {\n                    Serial.println("Left");\n                }          \n                break;\n            case GES_UP_FLAG:\n                delay(GES_ENTRY_TIME);\n                paj7620ReadReg(0x43, 1, &data);\n                if(data == GES_FORWARD_FLAG) \n                {\n                    Serial.println("Forward");\n                    delay(GES_QUIT_TIME);\n                }\n                else if(data == GES_BACKWARD_FLAG) \n                {\n                    Serial.println("Backward");\n                    delay(GES_QUIT_TIME);\n                }\n                else\n                {\n                    Serial.println("Up");\n                }          \n                break;\n            case GES_DOWN_FLAG:\n                delay(GES_ENTRY_TIME);\n                paj7620ReadReg(0x43, 1, &data);\n                if(data == GES_FORWARD_FLAG) \n                {\n                    Serial.println("Forward");\n                    delay(GES_QUIT_TIME);\n                }\n                else if(data == GES_BACKWARD_FLAG) \n                {\n                    Serial.println("Backward");\n                    delay(GES_QUIT_TIME);\n                }\n                else\n                {\n                    Serial.println("Down");\n                }          \n                break;\n            case GES_FORWARD_FLAG:\n                Serial.println("Forward");\n                delay(GES_QUIT_TIME);\n                break;\n            case GES_BACKWARD_FLAG:       \n                Serial.println("Backward");\n                delay(GES_QUIT_TIME);\n                break;\n            case GES_CLOCKWISE_FLAG:\n                Serial.println("Clockwise");\n                break;\n            case GES_COUNT_CLOCKWISE_FLAG:\n                Serial.println("anti-clockwise");\n                break;  \n            default:\n                paj7620ReadReg(0x44, 1, &data1);\n                if (data1 == GES_WAVE_FLAG) \n                {\n                    Serial.println("wave");\n                }\n                break;\n        }\n    }\n    delay(100);\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 9.")," Click upload and open the Serial Monitor port."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 10.")," This example can recognize 9 gestures and output the result, including move up, move down, move left, move right, move forward, move backward, circle-clockwise, circle-counter clockwise, and wave. Let's try and see COM port output as below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"PAJ7620U2 TEST DEMO: Recognize 9 gestures.\nINIT SENSOR...\nAddr0 =20,  Addr1 =76\nwake-up finish.\nSet up gaming mode.\nPaj7620 initialize register finished.\nINIT OK\nPlease input your gestures:\n\nLeft\nLeft\nUp\nRight\nUp\nUp\nDown\nUp\nDown\nDown\nUp\nRight\nLeft\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"When you want to recognize the Forward/Backward gestures, your gestures' reaction time must less than GES_ENTRY_TIME(0.8s). You also can adjust the reaction time according to the actual circumstance.\n"))),(0,r.kt)("h3",{id:"play-with-codecraft"},"Play with Codecraft"),(0,r.kt)("h4",{id:"hardware-1"},"Hardware"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1.")," Connect a Grove - Gesture to I2C port, and connect a Grove - Red LED to port D4 of a Base Shield."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2.")," Plug the Base Shield to your Seeeduino/Arduino."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3.")," Link Seeeduino/Arduino to your PC via an USB cable."),(0,r.kt)("h4",{id:"software-1"},"Software"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1.")," Open ",(0,r.kt)("a",{parentName:"p",href:"https://ide.chmakered.com/"},"Codecraft"),", add Arduino support, and drag a main procedure to working area."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"If this is your first time using Codecraft, see also [Guide for Codecraft using Arduino](https://wiki.seeedstudio.com/Guide_for_Codecraft_using_Arduino/).\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2.")," Drag blocks as picture below or open the cdc file which can be downloaded at the end of this page."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/cc_Gesture.png",alt:"cc"})),(0,r.kt)("p",null,"Upload the program to your Arduino/Seeeduino."),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"When the code finishes uploaded, the LED will lights up when you make an up gesture, and it will be blacks out when you make a down gesture.\n"))),(0,r.kt)("h3",{id:"play-with-raspberry-pi-with-grove-base-hat-for-raspberry-pi"},"Play With Raspberry Pi (With Grove Base Hat for Raspberry Pi)"),(0,r.kt)("h4",{id:"hardware-2"},"Hardware"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 1"),". Things used in this project:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Raspberry pi"),(0,r.kt)("th",{parentName:"tr",align:null},"Grove Base Hat for RasPi"),(0,r.kt)("th",{parentName:"tr",align:null},"Grove - Gesture Sensor"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/rasp.jpg",alt:"enter image description here"})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/Grove_Base_Hat_for_Raspberry_Pi/img/thumbnail.jpg",alt:"enter image description here"})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/45d_small.jpg",alt:"enter image description here"}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Raspberry-Pi-3-Model-B-p-2625.html"},"Get ONE Now")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi-p-3186.html"},"Get ONE Now")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-Gesture-p-2463.html"},"Get ONE Now"))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 2"),". Plug the Grove Base Hat into Raspberry."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 3"),". Connect the gesture sensor to the ",(0,r.kt)("strong",{parentName:"li"},"I^2^C")," port of the Base Hat."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 4"),". Connect the Raspberry Pi to PC through USB cable.")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/Gesture_Hat.jpg",alt:null})),(0,r.kt)("h4",{id:"software-2"},"Software"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 1"),". Follow ",(0,r.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/#installation"},"Setting Software")," to configure the development environment."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 2"),". Download the source file by cloning the grove.py library. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd ~\ngit clone https://github.com/Seeed-Studio/grove.py\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 3"),". Excute below commands to run the code.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd grove.py/grove\npython3 grove_gesture_sensor.py \n\n")),(0,r.kt)("p",null,"Following is the grove_gesture_sensor.py  code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nimport time,sys\nimport RPi.GPIO as GPIO\nfrom grove.i2c import Bus\n\n# use the bus that matches your raspi version\nrev = GPIO.RPI_REVISION\nif rev == 2 or rev == 3:\n    bus = Bus(1)\nelse:\n    bus = Bus(0)\n\nclass gesture:\n    #Registers and variables for the gesture sensor\n    GES_REACTION_TIME       =.500               # You can adjust the reaction time according to the actual circumstance.\n    GES_ENTRY_TIME          =.800               # When you want to recognize the Forward/Backward gestures, your gestures\' reaction time must less than GES_ENTRY_TIME(0.8s). \n    GES_QUIT_TIME           =1.000\n    \n    BANK0 = 0\n    BANK1 = 1\n    \n    PAJ7620_ADDR_BASE =0x00\n\n    #REGISTER BANK SELECT\n    PAJ7620_REGITER_BANK_SEL        =(PAJ7620_ADDR_BASE + 0xEF) #W\n\n    #DEVICE ID\n    PAJ7620_ID  =0x73\n\n    #REGISTER BANK 0\n    PAJ7620_ADDR_SUSPEND_CMD        =(PAJ7620_ADDR_BASE + 0x3)  #W\n    PAJ7620_ADDR_GES_PS_DET_MASK_0  =(PAJ7620_ADDR_BASE + 0x41) #RW\n    PAJ7620_ADDR_GES_PS_DET_MASK_1  =(PAJ7620_ADDR_BASE + 0x42) #RW\n    PAJ7620_ADDR_GES_PS_DET_FLAG_0  =(PAJ7620_ADDR_BASE + 0x43) #R\n    PAJ7620_ADDR_GES_PS_DET_FLAG_1  =(PAJ7620_ADDR_BASE + 0x44) #R\n    PAJ7620_ADDR_STATE_INDICATOR    =(PAJ7620_ADDR_BASE + 0x45) #R\n    PAJ7620_ADDR_PS_HIGH_THRESHOLD  =(PAJ7620_ADDR_BASE + 0x69) #RW\n    PAJ7620_ADDR_PS_LOW_THRESHOLD   =(PAJ7620_ADDR_BASE + 0x6A) #RW\n    PAJ7620_ADDR_PS_APPROACH_STATE  =(PAJ7620_ADDR_BASE + 0x6B) #R\n    PAJ7620_ADDR_PS_RAW_DATA        =(PAJ7620_ADDR_BASE + 0x6C) #R\n                                    \n    #REGISTER BANK 1                \n    PAJ7620_ADDR_PS_GAIN            =(PAJ7620_ADDR_BASE + 0x44) #RW\n    PAJ7620_ADDR_IDLE_S1_STEP_0     =(PAJ7620_ADDR_BASE + 0x67) #RW\n    PAJ7620_ADDR_IDLE_S1_STEP_1     =(PAJ7620_ADDR_BASE + 0x68) #RW\n    PAJ7620_ADDR_IDLE_S2_STEP_0     =(PAJ7620_ADDR_BASE + 0x69) #RW\n    PAJ7620_ADDR_IDLE_S2_STEP_1     =(PAJ7620_ADDR_BASE + 0x6A) #RW\n    PAJ7620_ADDR_OP_TO_S1_STEP_0    =(PAJ7620_ADDR_BASE + 0x6B) #RW\n    PAJ7620_ADDR_OP_TO_S1_STEP_1    =(PAJ7620_ADDR_BASE + 0x6C) #RW\n    PAJ7620_ADDR_OP_TO_S2_STEP_0    =(PAJ7620_ADDR_BASE + 0x6D) #RW\n    PAJ7620_ADDR_OP_TO_S2_STEP_1    =(PAJ7620_ADDR_BASE + 0x6E) #RW\n    PAJ7620_ADDR_OPERATION_ENABLE   =(PAJ7620_ADDR_BASE + 0x72) #RW\n\n    #PAJ7620_REGITER_BANK_SEL\n    PAJ7620_BANK0=0\n    PAJ7620_BANK1=1\n    \n    #PAJ7620_ADDR_SUSPEND_CMD\n    PAJ7620_I2C_WAKEUP  =1\n    PAJ7620_I2C_SUSPEND =0\n    \n    #PAJ7620_ADDR_OPERATION_ENABLE\n    PAJ7620_ENABLE=1\n    PAJ7620_DISABLE=0\n    \n    #ADC, delete\n    REG_ADDR_RESULT = 0x00\n    REG_ADDR_ALERT  = 0x01\n    REG_ADDR_CONFIG = 0x02\n    REG_ADDR_LIMITL = 0x03\n    REG_ADDR_LIMITH = 0x04\n    REG_ADDR_HYST   = 0x05\n    REG_ADDR_CONVL  = 0x06\n    REG_ADDR_CONVH  = 0x07\n\n    GES_RIGHT_FLAG              =1<<0\n    GES_LEFT_FLAG               =1<<1\n    GES_UP_FLAG                 =1<<2\n    GES_DOWN_FLAG               =1<<3\n    GES_FORWARD_FLAG            =1<<4\n    GES_BACKWARD_FLAG           =1<<5\n    GES_CLOCKWISE_FLAG          =1<<6\n    GES_COUNT_CLOCKWISE_FLAG    =1<<7\n    GES_WAVE_FLAG               =1<<0\n    \n    #Gesture output\n    FORWARD         = 1\n    BACKWARD        = 2\n    RIGHT           = 3\n    LEFT            = 4\n    UP              = 5\n    DOWN            = 6\n    CLOCKWISE       = 7\n    ANTI_CLOCKWISE  = 8\n    WAVE            = 9\n    \n    #Initial register state\n    initRegisterArray=( [0xEF,0x00],\n                        [0x32,0x29],\n                        [0x33,0x01],\n                        [0x34,0x00],\n                        [0x35,0x01],\n                        [0x36,0x00],\n                        [0x37,0x07],\n                        [0x38,0x17],\n                        [0x39,0x06],\n                        [0x3A,0x12],\n                        [0x3F,0x00],\n                        [0x40,0x02],\n                        [0x41,0xFF],\n                        [0x42,0x01],\n                        [0x46,0x2D],\n                        [0x47,0x0F],\n                        [0x48,0x3C],\n                        [0x49,0x00],\n                        [0x4A,0x1E],\n                        [0x4B,0x00],\n                        [0x4C,0x20],\n                        [0x4D,0x00],\n                        [0x4E,0x1A],\n                        [0x4F,0x14],\n                        [0x50,0x00],\n                        [0x51,0x10],\n                        [0x52,0x00],\n                        [0x5C,0x02],\n                        [0x5D,0x00],\n                        [0x5E,0x10],\n                        [0x5F,0x3F],\n                        [0x60,0x27],\n                        [0x61,0x28],\n                        [0x62,0x00],\n                        [0x63,0x03],\n                        [0x64,0xF7],\n                        [0x65,0x03],\n                        [0x66,0xD9],\n                        [0x67,0x03],\n                        [0x68,0x01],\n                        [0x69,0xC8],\n                        [0x6A,0x40],\n                        [0x6D,0x04],\n                        [0x6E,0x00],\n                        [0x6F,0x00],\n                        [0x70,0x80],\n                        [0x71,0x00],\n                        [0x72,0x00],\n                        [0x73,0x00],\n                        [0x74,0xF0],\n                        [0x75,0x00],\n                        [0x80,0x42],\n                        [0x81,0x44],\n                        [0x82,0x04],\n                        [0x83,0x20],\n                        [0x84,0x20],\n                        [0x85,0x00],\n                        [0x86,0x10],\n                        [0x87,0x00],\n                        [0x88,0x05],\n                        [0x89,0x18],\n                        [0x8A,0x10],\n                        [0x8B,0x01],\n                        [0x8C,0x37],\n                        [0x8D,0x00],\n                        [0x8E,0xF0],\n                        [0x8F,0x81],\n                        [0x90,0x06],\n                        [0x91,0x06],\n                        [0x92,0x1E],\n                        [0x93,0x0D],\n                        [0x94,0x0A],\n                        [0x95,0x0A],\n                        [0x96,0x0C],\n                        [0x97,0x05],\n                        [0x98,0x0A],\n                        [0x99,0x41],\n                        [0x9A,0x14],\n                        [0x9B,0x0A],\n                        [0x9C,0x3F],\n                        [0x9D,0x33],\n                        [0x9E,0xAE],\n                        [0x9F,0xF9],\n                        [0xA0,0x48],\n                        [0xA1,0x13],\n                        [0xA2,0x10],\n                        [0xA3,0x08],\n                        [0xA4,0x30],\n                        [0xA5,0x19],\n                        [0xA6,0x10],\n                        [0xA7,0x08],\n                        [0xA8,0x24],\n                        [0xA9,0x04],\n                        [0xAA,0x1E],\n                        [0xAB,0x1E],\n                        [0xCC,0x19],\n                        [0xCD,0x0B],\n                        [0xCE,0x13],\n                        [0xCF,0x64],\n                        [0xD0,0x21],\n                        [0xD1,0x0F],\n                        [0xD2,0x88],\n                        [0xE0,0x01],\n                        [0xE1,0x04],\n                        [0xE2,0x41],\n                        [0xE3,0xD6],\n                        [0xE4,0x00],\n                        [0xE5,0x0C],\n                        [0xE6,0x0A],\n                        [0xE7,0x00],\n                        [0xE8,0x00],\n                        [0xE9,0x00],\n                        [0xEE,0x07],\n                        [0xEF,0x01],\n                        [0x00,0x1E],\n                        [0x01,0x1E],\n                        [0x02,0x0F],\n                        [0x03,0x10],\n                        [0x04,0x02],\n                        [0x05,0x00],\n                        [0x06,0xB0],\n                        [0x07,0x04],\n                        [0x08,0x0D],\n                        [0x09,0x0E],\n                        [0x0A,0x9C],\n                        [0x0B,0x04],\n                        [0x0C,0x05],\n                        [0x0D,0x0F],\n                        [0x0E,0x02],\n                        [0x0F,0x12],\n                        [0x10,0x02],\n                        [0x11,0x02],\n                        [0x12,0x00],\n                        [0x13,0x01],\n                        [0x14,0x05],\n                        [0x15,0x07],\n                        [0x16,0x05],\n                        [0x17,0x07],\n                        [0x18,0x01],\n                        [0x19,0x04],\n                        [0x1A,0x05],\n                        [0x1B,0x0C],\n                        [0x1C,0x2A],\n                        [0x1D,0x01],\n                        [0x1E,0x00],\n                        [0x21,0x00],\n                        [0x22,0x00],\n                        [0x23,0x00],\n                        [0x25,0x01],\n                        [0x26,0x00],\n                        [0x27,0x39],\n                        [0x28,0x7F],\n                        [0x29,0x08],\n                        [0x30,0x03],\n                        [0x31,0x00],\n                        [0x32,0x1A],\n                        [0x33,0x1A],\n                        [0x34,0x07],\n                        [0x35,0x07],\n                        [0x36,0x01],\n                        [0x37,0xFF],\n                        [0x38,0x36],\n                        [0x39,0x07],\n                        [0x3A,0x00],\n                        [0x3E,0xFF],\n                        [0x3F,0x00],\n                        [0x40,0x77],\n                        [0x41,0x40],\n                        [0x42,0x00],\n                        [0x43,0x30],\n                        [0x44,0xA0],\n                        [0x45,0x5C],\n                        [0x46,0x00],\n                        [0x47,0x00],\n                        [0x48,0x58],\n                        [0x4A,0x1E],\n                        [0x4B,0x1E],\n                        [0x4C,0x00],\n                        [0x4D,0x00],\n                        [0x4E,0xA0],\n                        [0x4F,0x80],\n                        [0x50,0x00],\n                        [0x51,0x00],\n                        [0x52,0x00],\n                        [0x53,0x00],\n                        [0x54,0x00],\n                        [0x57,0x80],\n                        [0x59,0x10],\n                        [0x5A,0x08],\n                        [0x5B,0x94],\n                        [0x5C,0xE8],\n                        [0x5D,0x08],\n                        [0x5E,0x3D],\n                        [0x5F,0x99],\n                        [0x60,0x45],\n                        [0x61,0x40],\n                        [0x63,0x2D],\n                        [0x64,0x02],\n                        [0x65,0x96],\n                        [0x66,0x00],\n                        [0x67,0x97],\n                        [0x68,0x01],\n                        [0x69,0xCD],\n                        [0x6A,0x01],\n                        [0x6B,0xB0],\n                        [0x6C,0x04],\n                        [0x6D,0x2C],\n                        [0x6E,0x01],\n                        [0x6F,0x32],\n                        [0x71,0x00],\n                        [0x72,0x01],\n                        [0x73,0x35],\n                        [0x74,0x00],\n                        [0x75,0x33],\n                        [0x76,0x31],\n                        [0x77,0x01],\n                        [0x7C,0x84],\n                        [0x7D,0x03],\n                        [0x7E,0x01])\n\n    #Enable debug message\n    debug=0\n    \n    #Initialize the sensors\n    def init(self):\n        time.sleep(.001)\n        self.paj7620SelectBank(self.BANK0)\n        self.paj7620SelectBank(self.BANK0)\n        \n        data0 = self.paj7620ReadReg(0, 1)[0]\n        data1 = self.paj7620ReadReg(1, 1)[0]\n        if self.debug:\n            print("data0:",data0,"data1:",data1)\n        if data0 != 0x20  :#or data1 <> 0x76:\n            print("Error with sensor")\n            #return 0xff\n        if data0 == 0x20:\n            print("wake-up finish.")\n            \n        for i in range(len(self.initRegisterArray)):\n            self.paj7620WriteReg(self.initRegisterArray[i][0],self.initRegisterArray[i][1])\n        \n        self.paj7620SelectBank(self.BANK0)\n        \n        print("Paj7620 initialize register finished.")\n        \n    #Write a byte to a register on the Gesture sensor\n    def paj7620WriteReg(self,addr,cmd):\n        bus.write_word_data(self.PAJ7620_ID, addr, cmd)\n        \n    #Select a register bank on the Gesture Sensor\n    def paj7620SelectBank(self,bank):\n        if bank==self.BANK0:\n            self.paj7620WriteReg(self.PAJ7620_REGITER_BANK_SEL, self.PAJ7620_BANK0)\n            \n    #Read a block of bytes of length "qty" starting at address "addr" from the Gesture sensor\n    def paj7620ReadReg(self,addr,qty):\n        return bus.read_i2c_block_data(self.PAJ7620_ID, addr,qty)\n    \n    #Print the values from the gesture sensor\n    def print_gesture(self):\n        data=self.paj7620ReadReg(0x43,1)[0]\n        if data==self.GES_RIGHT_FLAG:\n            time.sleep(self.GES_ENTRY_TIME)\n            data=self.paj7620ReadReg(0x43, 1)[0]\n            if data == self.GES_FORWARD_FLAG:\n                print("Forward")\n                time.sleep(self.GES_QUIT_TIME)\n            elif data == self.GES_BACKWARD_FLAG:\n                print("Backward")\n                time.sleep(self.GES_QUIT_TIME)\n            else:\n                print("Right")\n                \n        elif data==self.GES_LEFT_FLAG:\n            time.sleep(self.GES_ENTRY_TIME)\n            data=self.paj7620ReadReg(0x43, 1)[0]\n            if data == self.GES_FORWARD_FLAG:\n                print("Forward")\n                time.sleep(self.GES_QUIT_TIME)\n            elif data == self.GES_BACKWARD_FLAG:\n                print("Backward")\n                time.sleep(self.GES_QUIT_TIME)\n            else:\n                print("Left")       \n        \n        elif data==self.GES_UP_FLAG:\n            time.sleep(self.GES_ENTRY_TIME)\n            data=self.paj7620ReadReg(0x43, 1)[0]\n            if data == self.GES_FORWARD_FLAG:\n                print("Forward")\n                time.sleep(self.GES_QUIT_TIME)\n            elif data == self.GES_BACKWARD_FLAG:\n                print("Backward")\n                time.sleep(self.GES_QUIT_TIME)\n            else:\n                print("Up")     \n                \n        elif data==self.GES_DOWN_FLAG:\n            time.sleep(self.GES_ENTRY_TIME)\n            data=self.paj7620ReadReg(0x43, 1)[0]\n            if data == self.GES_FORWARD_FLAG:\n                print("Forward")\n                time.sleep(self.GES_QUIT_TIME)\n            elif data == self.GES_BACKWARD_FLAG:\n                print("Backward")\n                time.sleep(self.GES_QUIT_TIME)\n            else:\n                print("Down")\n        \n        elif data==self.GES_FORWARD_FLAG:\n            print("Forward")\n            time.sleep(self.GES_QUIT_TIME)\n            \n        elif data==self.GES_BACKWARD_FLAG:\n            print("Backward")\n            time.sleep(self.GES_QUIT_TIME)\n            \n        elif data==self.GES_CLOCKWISE_FLAG:\n            print("Clockwise")\n    \n        elif data==self.GES_COUNT_CLOCKWISE_FLAG:\n            print("anti-clockwise")\n            \n        else:\n            data1=self.paj7620ReadReg(0x44, 1)[0]\n            if (data1 == self.GES_WAVE_FLAG):\n                print("wave")\n    \n    #Return a vlaue from the gestire sensor which can be used in a program\n    #   0:nothing\n    #   1:Forward\n    #   2:Backward\n    #   3:Right\n    #   4:Left\n    #   5:Up\n    #   6:Down\n    #   7:Clockwise\n    #   8:anti-clockwise\n    #   9:wave\n    def return_gesture(self):\n\n        data=self.paj7620ReadReg(0x43,1)[0]\n        if data==self.GES_RIGHT_FLAG:\n            time.sleep(self.GES_ENTRY_TIME)\n            data=self.paj7620ReadReg(0x43, 1)[0]\n            if data == self.GES_FORWARD_FLAG:\n                return 1\n                time.sleep(self.GES_QUIT_TIME)\n            elif data == self.GES_BACKWARD_FLAG:\n                return 2\n                time.sleep(self.GES_QUIT_TIME)\n            else:\n                return 3\n                \n        elif data==self.GES_LEFT_FLAG:\n            time.sleep(self.GES_ENTRY_TIME)\n            data=self.paj7620ReadReg(0x43, 1)[0]\n            if data == self.GES_FORWARD_FLAG:\n                return 1\n                time.sleep(self.GES_QUIT_TIME)\n            elif data == self.GES_BACKWARD_FLAG:\n                return 2\n                time.sleep(self.GES_QUIT_TIME)\n            else:\n                return 4    \n        \n        elif data==self.GES_UP_FLAG:\n            time.sleep(self.GES_ENTRY_TIME)\n            data=self.paj7620ReadReg(0x43, 1)[0]\n            if data == self.GES_FORWARD_FLAG:\n                return 1\n                time.sleep(self.GES_QUIT_TIME)\n            elif data == self.GES_BACKWARD_FLAG:\n                return 2\n                time.sleep(self.GES_QUIT_TIME)\n            else:\n                return 5        \n                \n        elif data==self.GES_DOWN_FLAG:\n            time.sleep(self.GES_ENTRY_TIME)\n            data=self.paj7620ReadReg(0x43, 1)[0]\n            if data == self.GES_FORWARD_FLAG:\n                return 1\n                time.sleep(self.GES_QUIT_TIME)\n            elif data == self.GES_BACKWARD_FLAG:\n                return 2\n                time.sleep(self.GES_QUIT_TIME)\n            else:\n                return 6\n        \n        elif data==self.GES_FORWARD_FLAG:\n            return 1\n            time.sleep(self.GES_QUIT_TIME)\n            \n        elif data==self.GES_BACKWARD_FLAG:\n            return 2\n            time.sleep(self.GES_QUIT_TIME)\n            \n        elif data==self.GES_CLOCKWISE_FLAG:\n            return 7\n\n        elif data==self.GES_COUNT_CLOCKWISE_FLAG:\n            return 8\n            \n        else:\n            data1=self.paj7620ReadReg(0x44, 1)[0]\n            if (data1 == self.GES_WAVE_FLAG):\n                return 9\n        return 0\n        \nif __name__ == "__main__":\n    g=gesture()\n    g.init()\n    while True:\n        g.print_gesture()\n        time.sleep(.1)\n        # print g.return_gesture()\n        # time.sleep(.1)\n        \n')),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"If everything goes well, you will be able to see the following result\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\npi@raspberrypi:~/grove.py/grove $ python3 grove_gesture_sensor.py \nwake-up finish.\nPaj7620 initialize register finished.\nLeft\nForward\nLeft\nBackward\nRight\nUp\nDown\n^CTraceback (most recent call last):\n  File "grove_gesture_sensor.py", line 555, in <module>\n    time.sleep(.1)\nKeyboardInterrupt\n\n\n')),(0,r.kt)("p",null,"You can quit this program by simply press ++ctrl+c++."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"    If you use the I2C tool to scan the I2C address of the grove module, you may find two or more address. 0x04 is the adrress of the *Grove Base Hat for Raspberry Pi*.\n"))),(0,r.kt)("h3",{id:"play-with-raspberry-pi-with-grovepi_plus"},"Play With Raspberry Pi (with GrovePi_Plus)"),(0,r.kt)("h4",{id:"hardware-3"},"Hardware"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 1.")," Prepare the below stuffs:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Raspberry pi"),(0,r.kt)("th",{parentName:"tr",align:null},"GrovePi_Plus"),(0,r.kt)("th",{parentName:"tr",align:null},"Grove-Gesture_v1.0"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/rasp.jpg",alt:"enter image description here"})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/Grovepi%2B.jpg",alt:"enter image description here"})),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/45d_small.jpg",alt:"enter image description here"}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Raspberry-Pi-3-Model-B-p-2625.html"},"Get One Now")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/GrovePi%2B-p-2241.html"},"Get One Now")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-Gesture-p-2463.html"},"Get One Now"))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 2.")," Plug the GrovePi_Plus into Raspberry."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 3.")," Connect Grove-Gesture_v1.0 to ",(0,r.kt)("strong",{parentName:"li"},"I2C")," port of GrovePi_Plus."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 4.")," Connect the Raspberry to PC through USB cable.")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/rasp_connection.jpg",alt:"enter image description here"})),(0,r.kt)("h4",{id:"software-3"},"Software"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 1.")," Follow ",(0,r.kt)("a",{parentName:"li",href:"https://www.dexterindustries.com/GrovePi/get-started-with-the-grovepi/setting-software/"},"Setting Software")," to configure the development environment."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 2.")," Git clone the Github repository.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~\ngit clone https://github.com/DexterInd/GrovePi.git\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 3.")," Excute below commands to use this sensor")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/GrovePi/Software/Python/grove_gesture_sensor\npython3 gesture_value.py  \n")),(0,r.kt)("p",null,"Here is the code of gesture_value.py"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Python"},'#!/usr/bin/env python\n#\n# GrovePi Example for using the Grove - Gesture Sensor v1.0(https://www.seeedstudio.com/depot/Grove-Gesture-p-2463.html)\n#       \n# This example returns a value when a user does an action over the sensor\n#\n# The GrovePi connects the Raspberry Pi and Grove sensors.  You can learn more about GrovePi here:  http://www.dexterindustries.com/GrovePi\n#\n# Have a question about this example?  Ask on the forums here:  http://forum.dexterindustries.com/c/grovepi\n#\n\'\'\'\n## License\nThe MIT License (MIT)\nGrovePi for the Raspberry Pi: an open source platform for connecting Grove Sensors to the Raspberry Pi.\nCopyright (C) 2017  Dexter Industries\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\'\'\'\n\nimport grove_gesture_sensor\nimport time\n\ng=grove_gesture_sensor.gesture()\ng.init()\nwhile True:\n    gest=g.return_gesture()\n    #Match the gesture\n    if gest==g.FORWARD:\n        print("FORWARD")\n    elif gest==g.BACKWARD:\n        print("BACKWARD")\n    elif gest==g.RIGHT:\n        print("RIGHT")\n    elif gest==g.LEFT:\n        print("LEFT")\n    elif gest==g.UP:\n        print("UP")\n    elif gest==g.DOWN:\n        print("DOWN")\n    elif gest==g.CLOCKWISE:\n        print("CLOCKWISE")\n    elif gest==g.ANTI_CLOCKWISE:\n        print("ANTI_CLOCKWISE")\n    elif gest==g.WAVE:\n        print("WAVE")\n    elif gest==0:\n        print("-")\n    else:\n        print("Error")\n    time.sleep(.1)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Step 4.")," Here is the screen output.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"pi@raspberrypi:~/Dexter/GrovePi/Software/Python/grove_gesture_sensor $ python3 gesture_value.py \nwake-up finish.\nPaj7620 initialize register finished.\n\n-\n-\nDOWN\n-\n-\nLEFT\n-\n-\n-\n-\nUP\n-\n-\n-\n-\nRIGHT\n-\n-\nUP\n-\n-\nCLOCKWISE\n-\n-\nCLOCKWISE\n")),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("p",null,"We define some register data of gesture, refer to the following table."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Gesture"),(0,r.kt)("th",{parentName:"tr",align:null},"Register Data"),(0,r.kt)("th",{parentName:"tr",align:null},"Register Address"),(0,r.kt)("th",{parentName:"tr",align:null},"If Yes"),(0,r.kt)("th",{parentName:"tr",align:null},"If Not"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Up"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_UP_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x43"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Down"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_DOWN_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x43"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Left"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_LEFT_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x43"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Right"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_RIGHT_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x43"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Forward"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_FORWARD_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x43"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Backward"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_BACKWARD_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x43"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Clockwise"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_CLOCKWISE_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x43"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Count Clockwise"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_COUNT_CLOCKWISE_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x43"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Wave"),(0,r.kt)("td",{parentName:"tr",align:null},"data==GES_WAVE_FLAG"),(0,r.kt)("td",{parentName:"tr",align:null},"0x44"),(0,r.kt)("td",{parentName:"tr",align:null},"Gesture detected"),(0,r.kt)("td",{parentName:"tr",align:null},"No gesture detected")))),(0,r.kt)("h2",{id:"schematic-online-viewer"},"Schematic Online Viewer"),(0,r.kt)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/res/Grove_-_Gesture_v1.0_sch_pcb.zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[ZIP]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/res/Grove_-_Gesture_v1.0_sch_pcb.zip"},"Grove - Gesture_v1.0 sch pcb.zip")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[Datasheet]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/res/PAJ7620U2_Datasheet_V0.8_20140611.pdf"},"PAJ7620U2_Datasheet_V0.8_20140611.pdf")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[Library]")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Gesture_PAJ7620"},"Library Grove - Guesture")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[Codecraft]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/res/Grove_Gesture_CDC_File.zip"},"CDC File"))),(0,r.kt)("h2",{id:"project"},"Project"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Upcycling Workshop at Seeed x.factory ","[Episode 1]"),": Last weekend, we had an amazing upcycling hacking workshop with 20 makers, designers, and engineers from the community gathering at x.factory (I even listed it as my favorite workshop!). "),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://blog.hackster.io/upcycling-workshop-at-seeed-x-factory-episode-1-4f2d5a61f5ad"},(0,r.kt)("img",{parentName:"a",src:"https://files.seeedstudio.com/wiki/Grove_Gesture_V_1.0/img/hacker.io.gif",alt:null}))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Jesty - Control your PC with Gestures"),": Control a PC with a gesture sensor, associating a key or a mouse click to each gesture."),(0,r.kt)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/Momy93/jesty-control-your-pc-with-gestures-5d4a3e/embed",width:"350"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PHPoC - Control Pan-Tilt via Hand Gesture"),": An interesting way to control your robot: via hand gesture"),(0,r.kt)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/Homer/phpoc-control-pan-tilt-via-hand-gesture-1daacc/embed",width:"350"}),(0,r.kt)("h2",{id:"tech-support"},"Tech Support"),(0,r.kt)("p",null," if you have any technical issue.  submit the issue into our ",(0,r.kt)("a",{parentName:"p",href:"http://forum.seeedstudio.com/"},"forum"),". "),(0,r.kt)("div",null,(0,r.kt)("br",null),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}u.isMDXComponent=!0}}]);