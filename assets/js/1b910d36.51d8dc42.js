"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[28838],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,c=u["".concat(l,".").concat(h)]||u[h]||m[h]||i;return n?a.createElement(c,o(o({ref:t},p),{},{components:n})):a.createElement(c,o({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},44348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={description:"mmWave Human Static Presence Module Lite",title:"mmWave Human Static Presence Module Lite",keywords:["mmWave_radar_sensor"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/12/2023",author:"jianjing Huang"}},o="24GHz mmWave Sensor - Human Static Presence Module Lite (MR24HPC1)",s={unversionedId:"Sensor/mmWave_radar_sensor/Radar_MR24HPC1",id:"Sensor/mmWave_radar_sensor/Radar_MR24HPC1",title:"mmWave Human Static Presence Module Lite",description:"mmWave Human Static Presence Module Lite",source:"@site/docs/Sensor/mmWave_radar_sensor/Radar_MR24HPC1.md",sourceDirName:"Sensor/mmWave_radar_sensor",slug:"/Sensor/mmWave_radar_sensor/Radar_MR24HPC1",permalink:"/docusaurus_wiki/Sensor/mmWave_radar_sensor/Radar_MR24HPC1",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Sensor/mmWave_radar_sensor/Radar_MR24HPC1.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1673481600,formattedLastUpdatedAt:"Jan 12, 2023",frontMatter:{description:"mmWave Human Static Presence Module Lite",title:"mmWave Human Static Presence Module Lite",keywords:["mmWave_radar_sensor"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/12/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"Grove - Button",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Accessories/Switch&Button/Grove-Button"},next:{title:"mmWave Fall Detection Sensor",permalink:"/docusaurus_wiki/Sensor/mmWave_radar_sensor/Radar_MR24FDB1"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Application",id:"application",level:3},{value:"Features",id:"features",level:3},{value:"Hardware Overview",id:"hardware-overview",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Use of the upper computer",id:"use-of-the-upper-computer",level:3},{value:"Sensor development with Arduino",id:"sensor-development-with-arduino",level:2},{value:"Arduino Library Overview",id:"arduino-library-overview",level:3},{value:"Function",id:"function",level:4},{value:"Default Variables",id:"default-variables",level:4},{value:"Installation",id:"installation",level:3},{value:"Arduino Example",id:"arduino-example",level:2},{value:"Materials Required",id:"materials-required",level:3},{value:"Demo1: Serial port printing of raw data frames from Sensor output",id:"demo1-serial-port-printing-of-raw-data-frames-from-sensor-output",level:3},{value:"Demo2: Serial port printing of parsed human presence information",id:"demo2-serial-port-printing-of-parsed-human-presence-information",level:3},{value:'<span id="jump1">Demo3: Send data to Sensor</span>',id:"demo3-send-data-to-sensor",level:3},{value:"Demo4: Reset Sensor",id:"demo4-reset-sensor",level:3},{value:"Demo5: Using Arduino/Seeeduino",id:"demo5-using-arduinoseeeduino",level:3},{value:"Demo6: Direct connection to PC for data",id:"demo6-direct-connection-to-pc-for-data",level:3},{value:"Demo7: MR24HPBC1 &amp; XIAO ESP32C3 &amp; ESPHome &amp; Home Assistant",id:"demo7-mr24hpbc1--xiao-esp32c3--esphome--home-assistant",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Resources",id:"resources",level:2},{value:"Tech Support",id:"tech-support",level:2}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"24ghz-mmwave-sensor---human-static-presence-module-lite-mr24hpc1"},"24GHz mmWave Sensor - Human Static Presence Module Lite (MR24HPC1)"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{500}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/0.jpg"})),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/24GHz-mmWave-Sensor-Human-Static-Presence-Module-Lite-p-5524.html",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/get_one_now.png",style:{width:800,height:"auto"}}))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"24GHz mmWave Sensor - Human Static Presence Module Lite is an antenna-integrated, health-friendly mmwave radar sensor that applies FMCW ranging technology, with operation in 24GHz, for implementation of human presence, independently of environmental influences. This is also a personalized radar that users can configure underlying parameters of it to determine detected functions."),(0,r.kt)("h3",{id:"application"},"Application"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Automatically outdoor lighting"),(0,r.kt)("li",{parentName:"ul"},"Automaed door opening"),(0,r.kt)("li",{parentName:"ul"},"Whole house monitor"),(0,r.kt)("li",{parentName:"ul"},"Intelligent home appliances (TV, bath bully, security, etc.)"),(0,r.kt)("li",{parentName:"ul"},"Office energy (air conditioning, lighting)"),(0,r.kt)("li",{parentName:"ul"},"Sleep monitoring curve"),(0,r.kt)("li",{parentName:"ul"},"Home security"),(0,r.kt)("li",{parentName:"ul"},"IPC trigger")),(0,r.kt)("h3",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Human presence mmwave radar: Apply FMCW ranging technology, with operation in 24GHz and 5 meters detection range, for detecting human behavior in the sensing area"),(0,r.kt)("li",{parentName:"ul"},"Personalized radar detection: Provide configurable detection range, motion trigger, state change time, as well as visual debugging software to meet the requirements of various scenarios"),(0,r.kt)("li",{parentName:"ul"},"Health-friendly working status: Output power as low as harmless to the human body"),(0,r.kt)("li",{parentName:"ul"},"High immunity against interferences: Output data independently of environmental influences like temperature, humidity, noise, airflow, dust, light"),(0,r.kt)("li",{parentName:"ul"},"Arduino support")),(0,r.kt)("h3",{id:"hardware-overview"},"Hardware Overview"),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{500}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/13.jpg"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The 5V pin is the power supply interface for the radar and RX and TX are the data transmission interfaces for the radar. RX means serial receive and TX means serial transmit."),(0,r.kt)("li",{parentName:"ol"},"The human presence status output interface. You can use the level of these two pins to determine the current human movement in the environment.\nS1 output: high level - occupied, low level - unoccupied.\nS2 output: high level - active, low level - stationary."),(0,r.kt)("li",{parentName:"ol"},"Flash firmware pinout."),(0,r.kt)("li",{parentName:"ol"},"Overhead input/output pins.")),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("h3",{id:"use-of-the-upper-computer"},"Use of the upper computer"),(0,r.kt)("p",null,"Connect the radar directly to the computer's usb port via a ",(0,r.kt)("strong",{parentName:"p"},"UART to USB")," device. The wiring is shown in the table below."),(0,r.kt)("table",{align:"center"},(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",{colSpan:4},(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{800}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/10.jpg"})))),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"Radar Sensor"),(0,r.kt)("td",{align:"center"}),(0,r.kt)("td",{align:"center"},"UART to USB")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"5V"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"5V")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"GND"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"GND")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"RX"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"TX")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"TX"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"RX")))),(0,r.kt)("p",null,"In addition to the serial software mentioned above, you can also use the ",(0,r.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/Human-Radar-Open-Protocol_2.0.exe"},"upper computer software")," designed for radar directly."),(0,r.kt)("p",null,"The following ten sections explain the role of each part of the software."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{800}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/7.png"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Port"),(0,r.kt)("p",{parentName:"li"},"Select the port to which the radar is connected to the computer. It is usually necessary to ",(0,r.kt)("strong",{parentName:"p"},"Refresh")," the port by clicking the Refresh button before selecting it. Once selected please click on the ",(0,r.kt)("strong",{parentName:"p"},"Open")," button.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Baud rate"),(0,r.kt)("p",{parentName:"li"},"The MR24HPC1 radar needs to be set at a baud rate of 115200.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Motion Energy"),(0,r.kt)("p",{parentName:"li"},"This value is equivalent to the ",(0,r.kt)("strong",{parentName:"p"},"dynamic value"),". The variation in this value represents the constant motion noise in the environment. The Motion Energy is low when there is no one in the space, and the overall Motion Energy gets higher as the motion increases in magnitude and distance.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Exit Energy"),(0,r.kt)("p",{parentName:"li"},"This value is equivalent to the ",(0,r.kt)("strong",{parentName:"p"},"static value"),". The variation in this value represents the constant statics noise in the environment. Exit Energy are low when the space is unoccupied, and overall Exit Energy fluctuate at higher values when there is a stationary person in the space (slight movement of the chest breathing).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Distance"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Stationary distance"),": The straight line distance between the environment and the radar in the presence of a slightly moving area. When there is someone stationary at a location in space, the straight line distance from the radar is output in real time.\n",(0,r.kt)("strong",{parentName:"p"},"Movement distance"),": The straight-line distance between a moving position in the environment and the radar. When there is a person in motion at a location in space, the straight line distance from the radar is output in real time for that location. the straight-line distance from the radar."))),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{800}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/9.png"})),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Graphics Settings"),(0,r.kt)("p",{parentName:"li"},"Used to clearly determine the relationship between real-time waveforms and thresholds relationship. Based on the real time curve changes, it is possible to observe the change in floor noise in different states of the space, and based on the change in floor noise it is possible to set the threshold for the presence of the human body and make a simple judgement of the presence/absence/activity of the stationary state."))),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{800}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/8.png"})),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Inquiry"),(0,r.kt)("p",{parentName:"li"},"Search for the current parameter settings. For the meaning of the individual parameter values, please refer to the user manual for details for reasons of space.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Settings"),(0,r.kt)("p",{parentName:"li"},"Set the threshold values for each parameter.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Status Display"),(0,r.kt)("p",{parentName:"li"},"This window shows the current distance, speed and movement status in real time, among other values.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Send & Reply"),(0,r.kt)("p",{parentName:"li"},"The data frames sent and received."))),(0,r.kt)("h2",{id:"sensor-development-with-arduino"},"Sensor development with Arduino"),(0,r.kt)("h3",{id:"arduino-library-overview"},"Arduino Library Overview"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If this is your first time using Arduino, we highly recommend you to refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Getting_Started_with_Arduino/"},"Getting Started with Arduino"),".")),(0,r.kt)("p",null,"The library code used in this example can be downloaded by clicking the icon below."),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://github.com/limengdu/Seeed_24GHz_Human_Static_Presence_Module_Lite",target:"_blank"},(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{300}",src:"https://files.seeedstudio.com/wiki/seeed_logo/DOWNLOAD.png"})))),(0,r.kt)("h4",{id:"function"},"Function"),(0,r.kt)("p",null,"Before we get started developing a sketch, let's look at the available functions of the library."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"void recvRadarBytes()")," \u2014\u2014 This function collects the data frames reported by the Sensor via the UART according to the frame headers and frame tails in the Sensor data protocol. Used in conjunction with the ",(0,r.kt)("inlineCode",{parentName:"p"},"showData()")," function, the collected data information can be printed out via the serial port.",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Input parameters:")," None",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Return value:")," None")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"void showData();")," \u2014\u2014 This function serves to print out the complete data frame reported by the Sensor at once via the serial port and needs to be used in conjunction with the ",(0,r.kt)("inlineCode",{parentName:"p"},"recvRadarBytes()")," function.",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Input parameters:")," None",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Return value:")," None")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"void HumanStatic_func(bool bodysign /*=false*/)")," \u2014\u2014 This function is responsible for parsing the data frames of the Sensor and outputting the relevant data on the state of the human presence.",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Input parameters:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"bodysign")," \u2014\u2014 This parameter is a switch that controls whether or not to output Human Movement Parameters. If ",(0,r.kt)("strong",{parentName:"p"},"true"),", the output will contain a large amount of human sign parameter data, which may affect your experience of viewing the data. By default this parameter is ",(0,r.kt)("strong",{parentName:"p"},"false")," and no information on the body sign parameters is displayed.",(0,r.kt)("br",null)))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("span",{id:"jump2"},"Return value:"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int radarStatus")," \u2014\u2014 The value returned indicates which status class the parsed data frame belongs to. The specific categories can be found in the ",(0,r.kt)("strong",{parentName:"p"},"Default Variables")," section.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int bodysign_val")," \u2014\u2014 The value returned represents the value of the Human Movement Parameter. This value is only valid with the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"bodysign=true"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int static_val")," \u2014\u2014 This value is equivalent to the ",(0,r.kt)("strong",{parentName:"p"},"static value"),". The variation in this value represents the constant statics noise in the environment. Exit Energy are low when the space is unoccupied, and overall Exit Energy fluctuate at higher values when there is a stationary person in the space (slight movement of the chest breathing). This value is only valid if the Open Underlying Message is on.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int dynamic_val")," \u2014\u2014 The variation in this value represents the constant motion noise in the environment. The Motion Energy is low when there is no one in the space, and the overall Motion Energy gets higher as the motion increases in magnitude and distance. This value is only valid if the open underlying message is on.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int dis_static")," \u2014\u2014 The straight line distance between the environment and the Sensor in the presence of a slightly moving area. When there is someone stationary at a location in space, the straight line distance from the Sensor is output in real time. This value is only valid if the Open Underlying Message is on.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int dis_move")," \u2014\u2014 The straight-line distance between a moving position in the environment and the Sensor. When there is a person in motion at a location in space, the straight line distance from the Sensor is output in real time for that location. the straight-line distance from the Sensor. This value is only valid if the Open Underlying Message is on.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int speed")," \u2014\u2014 This value indicates the speed of movement of the moving object. The value is for reference only. This value is only valid if the Open Underlying Message is on.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"void checkSetMode_func(const unsigned char* buff, int len, bool cyclic /*= false*/)")," \u2014\u2014 This function can be used to send data frames to the Sensor. The data frames sent and the data frames returned are printed out via the serial port.\n",(0,r.kt)("strong",{parentName:"p"},"Input parameters:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"buff")," \u2014\u2014 The data frame you want to send to the Sensor.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"len")," \u2014\u2014 The length of the data frame you want to send to the Sensor.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"cyclic")," \u2014\u2014 Cyclic send switch. The default is false, which can be set to ",(0,r.kt)("strong",{parentName:"p"},"true")," if you wish to send this data frame cyclically."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Return value:")," None")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"void reset_func()")," \u2014\u2014 The function serves to reset the Sensor.\n",(0,r.kt)("strong",{parentName:"p"},"Input parameters:")," None\n",(0,r.kt)("strong",{parentName:"p"},"Return value:")," None"))),(0,r.kt)("h4",{id:"default-variables"},"Default Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#define MESSAGE_HEAD1 0x53       //Data frame header1\n#define MESSAGE_HEAD2 0x59       //Data frame header2\n\n#define MESSAGE_END1  0x54       //End1 of data frame\n#define MESSAGE_END2  0x43       //End2 of data frame\n\n#define HUMANSTATUS   0x80       //Human Presence Information\n#define HUMANEXIST    0x01       //Presence of the human body\n#define HUMANMOVE     0x02       //Human movement information\n#define HUMANSIGN     0x03       //Body Signs Parameters\n#define HUMANDIRECT   0x0B       //Human movement trends\n\n#define SOMEBODY      0x01       //Somebody move\n#define NOBODY        0x00       //No one here\n\n#define NONE          0x00\n#define SOMEBODY_STOP 0x01       //Somebody stop\n#define SOMEBODY_MOVE 0x02       //Somebody move\n\n#define CA_CLOSE      0x01       //Someone approaches\n#define CA_AWAY       0x02       //Some people stay away\n\n\n#define DETAILSTATUS  0x08       //Underlying parameters of the human state\n#define DETAILINFO    0x01       //Detailed data on the state of human movement\n#define DETAILDIRECT  0x06       //Human movement trends\n#define DETAILSIGN    0x07       //Body Signs Parameters\n\n//Return status, Use in arduino\n#define SOMEONE       0x01       //There are people\n#define NOONE         0x02       //No one\n#define NOTHING       0x03       //No message\n#define SOMEONE_STOP  0x04       //Somebody stop\n#define SOMEONE_MOVE  0x05       //Somebody move\n#define HUMANPARA     0x06       //Body Signs Parameters\n#define SOMEONE_CLOSE 0x07       //Someone approaches\n#define SOMEONE_AWAY  0x08       //Some people stay away\n#define DETAILMESSAGE 0x09       //Underlying parameters of the human state\n\n#define reset_frame_len 10       //Reset data frame length\n\n//Reset data frame\nconst unsigned char reset_frame[10] = {0x53, 0x59, 0x01, 0x02, 0x00, 0x01, 0x0F, 0xBF, 0x54, 0x43};\n")),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1.")," You need to Install an Arduino Software."),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.arduino.cc/en/Main/Software",target:"_blank"},(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/Seeeduino_Stalker_V3_1/images/Download_IDE.png"})))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2.")," Launch the Arduino application."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{700}",src:"https://files.seeedstudio.com/wiki/seeed_logo/arduino.jpg"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3.")," Select your development board model and add it to the Arduino IDE."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you want to use ",(0,r.kt)("strong",{parentName:"p"},"Seeeduino V4.2")," for the later routines, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Seeed_Arduino_Boards/"},"this tutorial")," to finish adding.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you want to use ",(0,r.kt)("strong",{parentName:"p"},"Seeeduino XIAO")," for the later routines, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Seeeduino-XIAO/#software"},"this tutorial")," to finish adding.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you want to use ",(0,r.kt)("strong",{parentName:"p"},"XIAO RP2040")," for the later routines, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/XIAO-RP2040-with-Arduino/#software-setup"},"this tutorial")," to finish adding.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you want to use ",(0,r.kt)("strong",{parentName:"p"},"XIAO nRF52840")," for the later routines, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/XIAO_BLE/#software-setup"},"this tutorial")," to finish adding.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you want to use ",(0,r.kt)("strong",{parentName:"p"},"XIAO ESP32C3")," for the later routines, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/#software-setup"},"this tutorial")," to finish adding."))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"For ",(0,r.kt)("strong",{parentName:"p"},"XIAO nRF52840"),", please select ",(0,r.kt)("strong",{parentName:"p"},"Seeed nRF52 mbed-enabled Boards"),", otherwise an error may be reported when running programs."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'<div align="center"><img width ="{700}" src="https://files.seeedstudio.com/wiki/XIAO-BLE/SeeednRFmbed.png"/></div>\n'))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 4.")," Install the Arduino code library."),(0,r.kt)("p",null,"Start by getting the code base from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/limengdu/Seeed_24GHz_Human_Static_Presence_Module_Lite"},"GitHub")," and downloading it to your local computer."),(0,r.kt)("p",null,"Since you have downloaded the zip Library, open your Arduino IDE, click on ",(0,r.kt)("strong",{parentName:"p"},"Sketch > Include Library > Add .ZIP Library"),". Choose the zip file you just downloaded\uff0cand if the library install correct, you will see ",(0,r.kt)("strong",{parentName:"p"},"Library added to your libraries")," in the notice window. Which means the library is installed successfully."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/Get_Started_With_Arduino/img/Add_Zip.png"})),(0,r.kt)("h2",{id:"arduino-example"},"Arduino Example"),(0,r.kt)("p",null,"Now that we have our library installed and we understand the basic functions, let's run some examples for our XIAO nRF52840 Sense to see how it behaves."),(0,r.kt)("h3",{id:"materials-required"},"Materials Required"),(0,r.kt)("p",null,"Before completing the following examples, you will need to prepare the following materials."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:"center"}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{210}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/0.jpg"}))),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{210}",src:"https://files.seeedstudio.com/wiki/XIAO-BLE/102010469_Front-14.jpg"}))),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{150}",src:"https://files.seeedstudio.com/wiki/60GHzradar/dupont.jpg"})))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/24GHz-mmWave-Sensor-Human-Static-Presence-Module-Lite-p-5524.html"},(0,r.kt)("strong",{parentName:"a"},"MR24HPC1"))),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://www.seeedstudio.com/Seeed-XIAO-BLE-Sense-nRF52840-p-5253.html?queryID=4bbd8c09f20216aa26f6b5a9040504d0&objectID=5253&indexName=bazaar_retailer_products"},(0,r.kt)("strong",{parentName:"a"},"Seeed XIAO BLE nRF52840 Sense"))),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"td"},"2mm to 2.54mm Pitch Ribbon Cable"))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1.")," Connect the device to the computer through the main board. The wiring diagram is shown in the table below."),(0,r.kt)("table",{align:"center"},(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",{colSpan:4},(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{800}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/11.jpg"})))),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"MR24HPC1"),(0,r.kt)("td",{align:"center"}),(0,r.kt)("td",{align:"center"},"Main Board")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"5V"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"5V")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"GND"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"GND")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"RX"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"D6")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"TX"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"D7")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2.")," In the menu bar in the upper left corner of the Arduino IDE, select ",(0,r.kt)("strong",{parentName:"p"},"tool"),", choose the type of development board you are using, and select the corresponding serial port."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you are using ",(0,r.kt)("strong",{parentName:"p"},"MacOS"),", the serial port name of the device will often start with ",(0,r.kt)("strong",{parentName:"p"},"/dev/cu.usbmodem xxx"),", ending with the name of the device. If you are using ",(0,r.kt)("strong",{parentName:"p"},"Windows"),", the device's serial port name will often begin with ",(0,r.kt)("strong",{parentName:"p"},"COM"),", again ending with the device's name.")),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/60GHzradar/3.png"})),(0,r.kt)("p",null,"In this example, we will demonstrate how the Sensor works with our popular product XIAO nRF52840 Sense."),(0,r.kt)("h3",{id:"demo1-serial-port-printing-of-raw-data-frames-from-sensor-output"},"Demo1: Serial port printing of raw data frames from Sensor output"),(0,r.kt)("p",null,"This example will guide you through the process of printing out the raw data reported by the Sensor via the serial port."),(0,r.kt)("p",null,"The following example program is in the examples folder of the library called ",(0,r.kt)("strong",{parentName:"p"},"MR24HPCB1_rawdata_print"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include "Arduino.h"\n#include <humanstaticLite.h>\n\n//#include <SoftwareSerial.h>\n// Choose any two pins that can be used with SoftwareSerial to RX & TX\n//#define RX_Pin A2\n//#define TX_Pin A3\n\n//SoftwareSerial mySerial = SoftwareSerial(RX_Pin, TX_Pin);\n\n// we\'ll be using software serial\n//HumanStaticLite radar = HumanStaticLite(&mySerial);\n\n// can also try hardware serial with\nHumanStaticLite radar = HumanStaticLite(&Serial1);\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial1.begin(115200);\n\n  //  mySerial.begin(115200);\n\n  while(!Serial);   //When the serial port is opened, the program starts to execute.\n\n  Serial.println("Readly");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  radar.recvRadarBytes();           //Receive radar data and start processing\n  radar.showData();                 //Serial port prints a set of received data frames\n  delay(200);                       //Add time delay to avoid program jam\n}\n')),(0,r.kt)("p",null,"In this program, we are using the XIAO nRF52840's hardware ",(0,r.kt)("strong",{parentName:"p"},"Serial1")," port to connect to the Sensor and use the hardware ",(0,r.kt)("strong",{parentName:"p"},"Serial")," port Serial to output data, so we need to initialise this serial port separately in the initialisation function ",(0,r.kt)("inlineCode",{parentName:"p"},"Setup()"),"."),(0,r.kt)("p",null,"In the main ",(0,r.kt)("inlineCode",{parentName:"p"},"loop()")," function we use the function ",(0,r.kt)("inlineCode",{parentName:"p"},"recvRadarBytes()")," to receive data frames from the Sensor and then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showData()")," function to print out the received data frames via the serial port."),(0,r.kt)("p",null,"In this program, it is important to note that there is an interval between the reception and output of every two data frames to avoid a jam on the main board. This time should be no less than ",(0,r.kt)("strong",{parentName:"p"},"150ms"),"."),(0,r.kt)("p",null,"This means that there is no way for the main board to receive all the data frames reported by the Sensor, but as the number of frames reported by the Sensor is very large and frequent, this does not affect the accuracy of using the Sensor to determine the environment."),(0,r.kt)("p",null,"Upload program. Opening your serial monitor to a baud rate of 115200 should show the result. The output should look something like the below image."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/1.png"})),(0,r.kt)("h3",{id:"demo2-serial-port-printing-of-parsed-human-presence-information"},"Demo2: Serial port printing of parsed human presence information"),(0,r.kt)("p",null,"In this example, we will use the functions in the library to parse the received data frames and print out all the feature data reported by the Sensor active via the serial port."),(0,r.kt)("p",null,"The following example program is in the examples folder of the library called ",(0,r.kt)("strong",{parentName:"p"},"MR24HPCB1_parsed_rawdata"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include "Arduino.h"\n#include <humanstaticLite.h>\n\n//#include <SoftwareSerial.h>\n// Choose any two pins that can be used with SoftwareSerial to RX & TX\n//#define RX_Pin A2\n//#define TX_Pin A3\n\n//SoftwareSerial mySerial = SoftwareSerial(RX_Pin, TX_Pin);\n\n// we\'ll be using software serial\n//HumanStaticLite radar = HumanStaticLite(&mySerial);\n\n// can also try hardware serial with\nHumanStaticLite radar = HumanStaticLite(&Serial1);\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial1.begin(115200);\n\n  //  mySerial.begin(115200);\n\n  while(!Serial);   //When the serial port is opened, the program starts to execute.\n\n  Serial.println("Readly");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  radar.HumanStatic_func(true);    //Turn on printing of human movement sign parameters\n  if(radar.radarStatus != 0x00){\n    switch(radar.radarStatus){\n      Serial.println(radar.radarStatus);\n      case SOMEONE:\n        Serial.println("Someone is here.");\n        Serial.println("---------------------------------");\n        break;\n      case NOONE:\n        Serial.println("Nobody here.");\n        Serial.println("---------------------------------");\n        break;\n      case NOTHING:\n        Serial.println("No human activity messages.");\n        Serial.println("---------------------------------");\n        break;\n      case SOMEONE_STOP:\n        Serial.println("Someone stop");\n        Serial.println("---------------------------------");\n        break;\n      case SOMEONE_MOVE:\n        Serial.println("Someone moving");\n        Serial.println("---------------------------------");\n        break;\n      case HUMANPARA:\n        Serial.print("The parameters of human body signs are: ");\n        Serial.println(radar.bodysign_val, DEC);\n        Serial.println("---------------------------------");\n        break;\n      case SOMEONE_CLOSE:\n        Serial.println("Someone is closing");\n        Serial.println("---------------------------------");\n        break;\n      case SOMEONE_AWAY:\n        Serial.println("Someone is staying away");\n        Serial.println("---------------------------------");\n        break;\n      case DETAILMESSAGE:\n        Serial.print("Spatial static values: ");\n        Serial.println(radar.static_val, DEC);\n        Serial.print("Distance to stationary object: ");\n        Serial.println(radar.dynamic_val, DEC);\n        Serial.print("Spatial dynamic values: ");\n        Serial.println(radar.dis_static, DEC);\n        Serial.print("Distance from the movement object: ");\n        Serial.println(radar.dis_move, DEC);\n        Serial.print("Speed of moving object: ");\n        Serial.println(radar.speed, DEC);\n        Serial.println("---------------------------------");\n        break;\n    }\n  }\n  delay(200);\n}\n')),(0,r.kt)("p",null,"To implement the data parsing function, we first need to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"HumanStatic_func()")," function. The parameter passed in can be ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," to control whether the display of the Human Movement Parameters is enabled or not."),(0,r.kt)("p",null,"If you choose to turn it on, i.e. pass in the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", you may get the following message for the serial port."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/2.png"})),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Human Movement Parameters: human movement amplitude values. The Human Movement Parameters is ",(0,r.kt)("strong",{parentName:"p"},"0")," when no one is in the space, ",(0,r.kt)("strong",{parentName:"p"},"1-5")," when someone is present and stationary, and ",(0,r.kt)("strong",{parentName:"p"},"2-100")," when the body is in motion (the greater the motion amplitude the closer the body motion parameter is).\nThis means that if you feel that the results of the Sensor recognition do not meet your expectations, you can output information about the presence of the human body by customising the judgement of the Human Movement Parameters.")),(0,r.kt)("p",null,"If you want to stop the crazy output of the Human Movement Parameters on the serial port, enter the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," and you will then be able to see clean body status information on the serial port."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/3.png"})),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You may not see content printed on the serial monitor for a longer period of time, this may be normal. The algorithm built into the Sensor is such that information is only output when the motion state of the monitored object changes. If you have been stationary after the upload procedure, you may wish to get up and move around and observe the effect.")),(0,r.kt)("p",null,"There is also the possibility that the data you received differs from the information in the data shown in the two images above. Then you may have switched on the Open Underlying Message output switch."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/4.png"})),(0,r.kt)("p",null,"For more information on how to switch on and off Open Underlying Message, please refer to the relevant section of ",(0,r.kt)("a",{parentName:"p",href:"#jump1"},(0,r.kt)("strong",{parentName:"a"},"Demo3")),". In short, the opening of Open Underlying Message means that more detailed data is exported."),(0,r.kt)("p",null,"For the meaning of the data of the Open Underlying Message, please consult the ",(0,r.kt)("a",{parentName:"p",href:"#jump2"},(0,r.kt)("strong",{parentName:"a"},"Function"))," section or user manual of this Sensor for space reasons."),(0,r.kt)("h3",{id:"demo3-send-data-to-sensor"},(0,r.kt)("span",{id:"jump1"},"Demo3: Send data to Sensor")),(0,r.kt)("p",null,"The MR24HPC1 offers a wealth of mode setting functions. This example will explain the implementation of the switch Open Underlying Message as an example of how to send data frames."),(0,r.kt)("p",null,"The following example program is in the examples folder of the library called ",(0,r.kt)("strong",{parentName:"p"},"MR24HPCB1_open_underlyingMes"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include "Arduino.h"\n#include <humanstaticLite.h>\n\n//#include <SoftwareSerial.h>\n// Choose any two pins that can be used with SoftwareSerial to RX & TX\n//#define RX_Pin A2\n//#define TX_Pin A3\n\n//SoftwareSerial mySerial = SoftwareSerial(RX_Pin, TX_Pin);\n\n// we\'ll be using software serial\n//HumanStaticLite radar = HumanStaticLite(&mySerial);\n\n// can also try hardware serial with\nHumanStaticLite radar = HumanStaticLite(&Serial1);\n\nconst unsigned char close_buff[10] = {0x53, 0x59, 0x08, 0x00, 0x00, 0x01, 0x00, 0xB5, 0x54, 0x43};  //switch off Open Underlying Message\nconst unsigned char open_buff[10] = {0x53, 0x59, 0x08, 0x00, 0x00, 0x01, 0x01, 0xB6, 0x54, 0x43};   //switch on Open Underlying Message\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial1.begin(115200);\n\n  //  mySerial.begin(115200);\n\n  while(!Serial);   //When the serial port is opened, the program starts to execute.\n\n  Serial.println("Readly");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  radar.checkSetMode_func(open_buff, 10, false);\n  delay(50);   //Do not set the delay time too long, as this may affect the reception of the data frames returned by the radar.\n}\n')),(0,r.kt)("p",null,"Before sending data to the Sensor, we need to consult the user manual to obtain the complete data frames to be sent according to our needs and define an array in the program to hold the data frames to be sent."),(0,r.kt)("p",null,"In this example, we have created two arrays of data frames according to the user manual. Their function is to turn on or off the Open Underlying Message function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"const unsigned char close_buff[10] = {0x53, 0x59, 0x08, 0x00, 0x00, 0x01, 0x00, 0xB5, 0x54, 0x43};  //switch off Open Underlying Message\nconst unsigned char open_buff[10] = {0x53, 0x59, 0x08, 0x00, 0x00, 0x01, 0x01, 0xB6, 0x54, 0x43};   //switch on Open Underlying Message\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},'Regarding the calculation of the check digit "sum".')),(0,r.kt)("p",{parentName:"admonition"},"All data frames have a checksum bit to ensure that the data is sent or received accurately. The checksum bit is usually in the penultimate bit of the data frame. It is calculated by adding up all the bits preceding the check bit and taking the lower two bits in hexadecimal.\nLet's take the example of a data frame that queries the device ID."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{800}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/6.png"})),(0,r.kt)("p",{parentName:"admonition"},"It can be seen that the checksum bit is in the penultimate bit of the entire data frame. Then we start by adding all the previous hexadecimal numbers."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"0x53 + 0x59 + 0x02 + 0xA2 + 0x00 + 0x01 + 0x0F = 0x015F")),(0,r.kt)("p",{parentName:"admonition"},"Then we need to take the lower two digits of it, which would be ",(0,r.kt)("strong",{parentName:"p"},"5F"),", so the checksum of this data frame is ",(0,r.kt)("strong",{parentName:"p"},"5F"),". If we want to look up the ID of the Sensor, then you can define the following array."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"const unsigned char DevID_buff[10] = {0x53, 0x59, 0x02, 0xA1, 0x00, 0x01, 0x0F, 0x5F, 0x54, 0x43};"))),(0,r.kt)("p",null,"Then we send the data frame by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkSetMode_func()")," function. The parameters passed in are an array of data frames, the length of the array and a boolean value for whether to send it cyclically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"radar.checkSetMode_func(open_buff, 10, false);\n")),(0,r.kt)("p",null,"Upload program. Opening your serial monitor to a baud rate of 115200 should show the result. The output should look something like the below image."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/5.png"})),(0,r.kt)("p",null,"At this point please check the data frames returned and if they match the data frames returned as described in the user manual, then the setup was successful."),(0,r.kt)("p",null,"Normally, our commands do not need to be repeated to the Sensor, but as the Sensor replies with messages so fast that we cannot be sure that we will receive the exact data message returned by the Sensor. There are two solutions to this problem."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Re-upload the above procedure several times."),(0,r.kt)("li",{parentName:"ul"},"Set the third parameter of the ",(0,r.kt)("inlineCode",{parentName:"li"},"checkSetMode_func()")," function (cyclic sending) to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),". Please note, however, that repeatedly sending data frames of the setting type ",(0,r.kt)("strong",{parentName:"li"},"may cause the Sensor to jam"),", so please use this function with caution. If the Sensor is stuck, disconnect the 5V supply pin from the Sensor and wait a few moments for the function to resume.")),(0,r.kt)("h3",{id:"demo4-reset-sensor"},"Demo4: Reset Sensor"),(0,r.kt)("p",null,"There may be times when you have problems with your Sensor detecting anomalies or when you want to clear all settings on your Sensor, then you can reset your Sensor according to this example."),(0,r.kt)("p",null,"The following example program is in the examples folder of the library called ",(0,r.kt)("strong",{parentName:"p"},"MR24HPCB1_reset_radar"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include "Arduino.h"\n#include <humanstaticLite.h>\n\n//#include <SoftwareSerial.h>\n// Choose any two pins that can be used with SoftwareSerial to RX & TX\n//#define RX_Pin A2\n//#define TX_Pin A3\n\n//SoftwareSerial mySerial = SoftwareSerial(RX_Pin, TX_Pin);\n\n// we\'ll be using software serial\n//HumanStaticLite radar = HumanStaticLite(&mySerial);\n\n// can also try hardware serial with\nHumanStaticLite radar = HumanStaticLite(&Serial1);\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial1.begin(115200);\n\n  //  mySerial.begin(115200);\n\n  while(!Serial);   //When the serial port is opened, the program starts to execute.\n\n  Serial.println("Readly");\n\n  radar.reset_func();\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n')),(0,r.kt)("p",null,"Resetting the Sensor is very simple, you just need to call ",(0,r.kt)("inlineCode",{parentName:"p"},"reset_func()"),". The reset only needs to be ",(0,r.kt)("strong",{parentName:"p"},"executed once"),", so we use it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Setup()")," function."),(0,r.kt)("h3",{id:"demo5-using-arduinoseeeduino"},"Demo5: Using Arduino/Seeeduino"),(0,r.kt)("p",null,"Our library is Arduino compatible and you can also choose the Arduino you have on hand to develop your Sensor project."),(0,r.kt)("p",null,"The MR24HPC1 Sensor communicates using the UART serial port, you just need to connect the Sensor to your Arduino as wired below."),(0,r.kt)("table",{align:"center"},(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"MR24HPC1"),(0,r.kt)("td",{align:"center"}),(0,r.kt)("td",{align:"center"},"MCU")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"5V"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"5V")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"GND"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"GND")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"RX"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"soft serial port TX")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"TX"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"soft serial port RX")))),(0,r.kt)("p",null,"All the functions are applied in the same way as in Demo1 to Demo4 above, so we will not repeat them in this example. In this example, we will give you an overview of how to use the Arduino's soft serial port to get data information from the Sensor."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For notes on the Arduino soft serial port, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.arduino.cc/learn/built-in-libraries/software-serial"},"official Arduino documentation"),".")),(0,r.kt)("p",null,"To avoid data confusion caused by using Serial for both output and data transmission, on the Arduino side we usually use a soft serial port."),(0,r.kt)("p",null,"The import of the soft serial port library and the definition of the RX and TX pins need to be done earlier in the program. The following program defines the ",(0,r.kt)("strong",{parentName:"p"},"A2")," and ",(0,r.kt)("strong",{parentName:"p"},"A3")," pins as the ",(0,r.kt)("strong",{parentName:"p"},"RX")," and ",(0,r.kt)("strong",{parentName:"p"},"TX")," pins of the soft serial port."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"#include <SoftwareSerial.h>\n//Choose any two pins that can be used with SoftwareSerial to RX & TX\n#define RX_Pin A2\n#define TX_Pin A3\n\nSoftwareSerial mySerial = SoftwareSerial(RX_Pin, TX_Pin);\n\n//we'll be using software serial\nHumanStaticLite radar = HumanStaticLite(&mySerial);\n")),(0,r.kt)("p",null,"Also, don't forget to set the baud rate for the soft serial port in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Setup()")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n\n  mySerial.begin(115200);\n\n  while(!Serial);   //When the serial port is opened, the program starts to execute.\n\n  Serial.println("Readly");\n}\n')),(0,r.kt)("p",null,"Using ",(0,r.kt)("strong",{parentName:"p"},"Demo1")," as an example, if you want to use the Arduino to print the reported data frames from the Sensor, then the complete program is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include "Arduino.h"\n#include <humanstaticLite.h>\n\n#include <SoftwareSerial.h>\n// Choose any two pins that can be used with SoftwareSerial to RX & TX\n#define RX_Pin A2\n#define TX_Pin A3\n\nSoftwareSerial mySerial = SoftwareSerial(RX_Pin, TX_Pin);\n\n// we\'ll be using software serial\nHumanStaticLite radar = HumanStaticLite(&mySerial);\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n\n  mySerial.begin(115200);\n\n  while(!Serial);   //When the serial port is opened, the program starts to execute.\n\n  Serial.println("Readly");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  radar.recvRadarBytes();           //Receive radar data and start processing\n  radar.showData();                 //Serial port prints a set of received data frames\n  delay(200);                       //Add time delay to avoid program jam\n}\n')),(0,r.kt)("h3",{id:"demo6-direct-connection-to-pc-for-data"},"Demo6: Direct connection to PC for data"),(0,r.kt)("p",null,"You can refer to this routine if you want to use an upper computer designed for Sensor, or if you want to use the serial software to get a complete data frame."),(0,r.kt)("p",null,"Connect the Sensor directly to the computer's usb port via a ",(0,r.kt)("strong",{parentName:"p"},"UART to USB")," device. The wiring is shown in the table below."),(0,r.kt)("table",{align:"center"},(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",{colSpan:4},(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{800}",src:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/10.jpg"})))),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"Radar Sensor"),(0,r.kt)("td",{align:"center"}),(0,r.kt)("td",{align:"center"},"UART to USB")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"5V"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"5V")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"GND"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"GND")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"RX"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"TX")),(0,r.kt)("tr",null,(0,r.kt)("td",{align:"center"},"TX"),(0,r.kt)("td",{align:"center"},"--\x3e"),(0,r.kt)("td",{align:"center"},"RX")))),(0,r.kt)("p",null,"Use a software like serial debugging assistant to select the serial port where the Sensor is located."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{200}",src:"https://files.seeedstudio.com/wiki/60GHzradar/37.png"})),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"MR24HPC1 Sensor needs 5V power supply, otherwise the Sensor may not work properly.")),(0,r.kt)("p",null,"After a successful connection, you will see the Sensor sending a steady stream of messages."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/60GHzradar/39.png"})),(0,r.kt)("p",null,"At the same time, you can also send data frames to the Sensor via the software's send function."),(0,r.kt)("div",{align:"center"},(0,r.kt)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/60GHzradar/40.png"})),(0,r.kt)("h3",{id:"demo7-mr24hpbc1--xiao-esp32c3--esphome--home-assistant"},"Demo7: MR24HPBC1 & XIAO ESP32C3 & ESPHome & Home Assistant"),(0,r.kt)("p",null,"We have created a tutorial for connecting to ESPHome and Home Assistant for this radar and the XIAO ESP32C3, if you are interested, you can refer to the tutorial here."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/h68k-ha-esphome/"},"LinkStar Home Assistant"))),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FAQ1: Can this Sensor detect more than one person at a time in the same environment?")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A: Not available. This Sensor can only be used on a single living object. If more than one person or animal is in the monitoring range, this will have an effect on the results of the monitoring.")),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/mmWave-radar/24GHz_mmWave_Sensor-Human_Static_Presence_Module_Lite_Datasheet.pdf"},"Datasheet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/mmWave-radar/24GHz_mmWave_Sensor-Human_Static_Presence_Module_Lite_User_Manual.pdf"},"User Manual")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[EXE]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Radar_MR24HPCB1/Human-Radar-Open-Protocol_2.0.exe"},"upper computer software"))),(0,r.kt)("h2",{id:"tech-support"},"Tech Support"),(0,r.kt)("p",null,"Please do not hesitate to submit the issue into our ",(0,r.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,r.kt)("div",null,(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}u.isMDXComponent=!0}}]);