"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[25851],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(r),c=i,k=m["".concat(l,".").concat(c)]||m[c]||d[c]||o;return r?n.createElement(k,a(a({ref:t},p),{},{components:r})):n.createElement(k,a({ref:t},p))}));function k(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},16262:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(87462),i=(r(67294),r(3905));const o={title:"Grove - 315MHz RF Kit",nointro:null,keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Grove-315MHz_RF_Kit/",last_update:{date:"01/06/2022",author:"gunengyu"}},a=void 0,s={unversionedId:"Sensor/Grove/Grove_Sensors_Network/RF/Grove-315MHz_RF_Kit",id:"Sensor/Grove/Grove_Sensors_Network/RF/Grove-315MHz_RF_Kit",title:"Grove - 315MHz RF Kit",description:"This kit is used for one way wireless communication at a frequency of 315MHz and includes a transmitter module and a receiver module. The twig configuration of this kit allows for around 40 meters of transmitting distance indoors, or around 100 meters outside. The 315 MHz frequency is suitable for use without a license in the United States. For use in Europe, please see the 433 MHz version of this product.",source:"@site/docs/Sensor/Grove/Grove_Sensors_Network/RF/Grove-315MHz_RF_Kit.md",sourceDirName:"Sensor/Grove/Grove_Sensors_Network/RF",slug:"/Sensor/Grove/Grove_Sensors_Network/RF/Grove-315MHz_RF_Kit",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors_Network/RF/Grove-315MHz_RF_Kit",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Sensor/Grove/Grove_Sensors_Network/RF/Grove-315MHz_RF_Kit.md",tags:[],version:"current",lastUpdatedBy:"gunengyu",lastUpdatedAt:1641427200,formattedLastUpdatedAt:"Jan 6, 2022",frontMatter:{title:"Grove - 315MHz RF Kit",nointro:null,keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Grove-315MHz_RF_Kit/",last_update:{date:"01/06/2022",author:"gunengyu"}},sidebar:"ProductSidebar",previous:{title:"Grove - 125KHz RFID Reader",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors_Network/RF/Grove-125KHz_RFID_Reader"},next:{title:"Grove - 433MHz Simple RF Link Kit",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors_Network/RF/Grove-433MHz_Simple_RF_Link_Kit"}},l={},u=[{value:"Features",id:"features",level:2},{value:"Application Ideas",id:"application-ideas",level:2},{value:"Mechanical Dimensions",id:"mechanical-dimensions",level:2},{value:"Platforms Supported",id:"platforms-supported",level:2},{value:"Usage",id:"usage",level:2},{value:"Hardware Installation",id:"hardware-installation",level:3},{value:"Programming",id:"programming",level:3},{value:"Resources",id:"resources",level:2},{value:"Tech Support",id:"tech-support",level:2}],p={toc:u};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-315MHz_RF_Kit/img/315MHz-Simple-RF-Link-Kit.jpg",alt:null})),(0,i.kt)("p",null,"This kit is used for one way wireless communication at a frequency of 315MHz and includes a transmitter module and a receiver module. The twig configuration of this kit allows for around 40 meters of transmitting distance indoors, or around 100 meters outside. The 315 MHz frequency is suitable for use without a license in the United States. For use in Europe, please see the 433 MHz version of this product."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-315MHz-Simple-RF-Link-Kit-p-1061.html"},(0,i.kt)("img",{parentName:"a",src:"https://files.seeedstudio.com/wiki/common/Get_One_Now_Banner.png",alt:null}))),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"GROVE compatible interface."),(0,i.kt)("li",{parentName:"ul"},"Uses ASK (Amplitude Shift Keying) Modulation."),(0,i.kt)("li",{parentName:"ul"},"One way communication.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"More details about Grove modules please refer to [Grove System](https://wiki.seeedstudio.com/Grove_System/)\n"))),(0,i.kt)("h2",{id:"application-ideas"},"Application Ideas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Remote control"),(0,i.kt)("li",{parentName:"ul"},"Remote automation"),(0,i.kt)("li",{parentName:"ul"},"Alarm")),(0,i.kt)("h2",{id:"mechanical-dimensions"},"Mechanical Dimensions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Receiver: 24mm by 42mm"),(0,i.kt)("li",{parentName:"ul"},"Transmitter: 20mm by 24mm")),(0,i.kt)("h2",{id:"platforms-supported"},"Platforms Supported"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Arduino"),(0,i.kt)("th",{parentName:"tr",align:null},"Raspberry Pi"),(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/arduino_logo.jpg",alt:null})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/raspberry_pi_logo_n.jpg",alt:null})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/bbg_logo_n.jpg",alt:null})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/wio_logo_n.jpg",alt:null})),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/linkit_logo_n.jpg",alt:null}))))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"The platforms mentioned above as supported is/are an indication of the module's software or theoritical compatibility. We only provide software library or code examples for Arduino platform in most cases. It is not possible to provide software library / demo code for all possible MCU platforms. Hence, users have to write their own software library.\n"))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"The transmitter and receiver modules both rely on a single wire for communication. Though using the UART supplied by the arduino platform can work, it is recommended, instead, to use the VirtualWire library which uses Amplitude Shift Keying for modulation which provides better communication."),(0,i.kt)("p",null,"Both the transmitter and receiver modules require three wires: Vcc, Ground, and signal. Pin 2 of both parts of the kit are not connected."),(0,i.kt)("h3",{id:"hardware-installation"},"Hardware Installation"),(0,i.kt)("p",null,"Connect the Transmitter module to Digital I/O 2 of the Grove-Base Shield V2 on the arduino being used for transmission."),(0,i.kt)("p",null,"Connect the Transmitter module to Digital I/O 2 of the Grove-Base Shield V2 on the receiving arduino."),(0,i.kt)("h3",{id:"programming"},"Programming"),(0,i.kt)("p",null,"Sample code for Transmitter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#include <VirtualWire.h>\n\xa0\nint RF_TX_PIN = 2;\n\xa0\nvoid setup()\n{\n  vw_set_tx_pin(RF_TX_PIN); // Setup transmit pin\n  vw_setup(2000); // Transmission speed in bits per second.\n}\n\xa0\nvoid loop()\n{\n  const char *msg = \"hello\";\n  vw_send((uint8_t *)msg, strlen(msg));  // Send 'hello' every 400ms.\n  delay(400);\n\xa0\n}\n")),(0,i.kt)("p",null,"Sample code for Receiver:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#include <VirtualWire.h>\n\xa0\nint RF_RX_PIN = 2;\n\xa0\nvoid setup()\n{\n  Serial.begin(9600);\n  Serial.println("setup");\n  vw_set_rx_pin(RF_RX_PIN);  // Setup receive pin.\n  vw_setup(2000); // Transmission speed in bits per second.\n  vw_rx_start(); // Start the PLL receiver.\n}\n\xa0\nvoid loop()\n{\n  uint8_t buf[VW_MAX_MESSAGE_LEN];\n  uint8_t buflen = VW_MAX_MESSAGE_LEN;\n  if(vw_get_message(buf, &buflen)) // non-blocking I/O\n  {\n    int i;\n    // Message with a good checksum received, dump HEX\n    Serial.print("Got: ");\n    for(i = 0; i < buflen; ++i)\n    {\n      Serial.print(buf[i], HEX);\n      Serial.print(" ");\n    }\n    Serial.println("");\n  }\n}\n')),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Demo code: ",(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove-315MHz_RF_Kit/res/433MHz_demo.zip",title:"File:433MHz demo.zip"},"433MHz demo.zip")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.airspayce.com/mikem/arduino/VirtualWire/VirtualWire-1.27.zip"},"VirtualWire 1.27")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.open.com.au/mikem/arduino/VirtualWire.pdf"},"VirtualWire Documentation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove-315MHz_RF_Kit/res/1110010P1.pdf"},"TI:LM358PSR"))),(0,i.kt)("h2",{id:"tech-support"},"Tech Support"),(0,i.kt)("p",null," if you have any technical issue.  submit the issue into our ",(0,i.kt)("a",{parentName:"p",href:"http://forum.seeedstudio.com/"},"forum"),"."),(0,i.kt)("div",null,(0,i.kt)("br",null),(0,i.kt)("p",{style:{textAlign:"center"}},(0,i.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,i.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}m.isMDXComponent=!0}}]);