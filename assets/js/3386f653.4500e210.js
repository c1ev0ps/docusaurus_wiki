"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[17228],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,k=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},74528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={description:"ReSpeaker USB Mic Array",title:"ReSpeaker USB Mic Array",keywords:["reSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/12/2023",author:"jianjing Huang"}},l=void 0,o={unversionedId:"Seeed_Elderly/reSpeaker/ReSpeaker-USB-Mic-Array",id:"Seeed_Elderly/reSpeaker/ReSpeaker-USB-Mic-Array",title:"ReSpeaker USB Mic Array",description:"ReSpeaker USB Mic Array",source:"@site/docs/Seeed_Elderly/reSpeaker/ReSpeaker-USB-Mic-Array.md",sourceDirName:"Seeed_Elderly/reSpeaker",slug:"/Seeed_Elderly/reSpeaker/ReSpeaker-USB-Mic-Array",permalink:"/docusaurus_wiki/Seeed_Elderly/reSpeaker/ReSpeaker-USB-Mic-Array",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Seeed_Elderly/reSpeaker/ReSpeaker-USB-Mic-Array.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1673481600,formattedLastUpdatedAt:"Jan 12, 2023",frontMatter:{description:"ReSpeaker USB Mic Array",title:"ReSpeaker USB Mic Array",keywords:["reSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/12/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"ReSpeaker Core v2.0",permalink:"/docusaurus_wiki/Seeed_Elderly/reSpeaker/ReSpeaker_Core_v2.0"},next:{title:"RePhone Introduction",permalink:"/docusaurus_wiki/Seeed_Elderly/rePhone/"}},p={},s=[{value:"Features",id:"features",level:2},{value:"Specification",id:"specification",level:2},{value:"Hardware Overview",id:"hardware-overview",level:2},{value:"Applications",id:"applications",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Update Firmware",id:"update-firmware",level:3},{value:"Out of Box Demo",id:"out-of-box-demo",level:3},{value:"Install DFU and LED Control Driver",id:"install-dfu-and-led-control-driver",level:3},{value:"Tuning",id:"tuning",level:3},{value:"Control the LEDs",id:"control-the-leds",level:3},{value:"DOA (Direction of Arrival)",id:"doa-direction-of-arrival",level:3},{value:"VAD (Voice Activity Detection)",id:"vad-voice-activity-detection",level:3},{value:"Extract Voice",id:"extract-voice",level:3},{value:"Realtime Sound Source Localization and Tracking",id:"realtime-sound-source-localization-and-tracking",level:3},{value:"FAQ",id:"faq",level:2},{value:"Resource",id:"resource",level:2},{value:"Tech Support",id:"tech-support",level:2}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker-USB-Mics/img/Bazaar/ReSpeaker-USB-Mics-box-preview.jpg",alt:null})),(0,r.kt)("p",null,"An out-of-the-box voice pick-up device is the voice of the customer."),(0,r.kt)("p",null,"During the past year, ",(0,r.kt)("a",{parentName:"p",href:"https://www.seeedstudio.com/ReSpeaker-Mic-Array-v2-0.html"},"Respeaker Mic Array V2.0"),"  has been sold out for more than 10K units in the format of the development board. Customers keep requesting a complete device with an enclosure, which is challenging for them to design it, considering the acoustic principles."),(0,r.kt)("p",null,"And here Seeed provides the answer with ReSpeaker USB Mic Array:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An out-of-box device with a well-designed acoustic structure brings the flexibility for the customer to build in their solution."),(0,r.kt)("li",{parentName:"ul"},"Mold injected enclosure available, saves the time to go to the market and the mold cost.")),(0,r.kt)("p",null,"The difference between the PCBA inside ReSpeaker USB Mic Array and Respeaker Mic Array V2.0:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Optimized power circuit"),(0,r.kt)("li",{parentName:"ul"},"Move the audio jack and micro USB port to the backside.")),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/ReSpeaker-USB-Mic-Array-p-4247.html",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/300px-Get_One_Now_Banner-ragular.png"}))),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Far-field voice capture"),(0,r.kt)("li",{parentName:"ul"},"Support USB Audio Class 1.0 (UAC 1.0)"),(0,r.kt)("li",{parentName:"ul"},"Four microphones array"),(0,r.kt)("li",{parentName:"ul"},"12 programmable RGB LED indicators"),(0,r.kt)("li",{parentName:"ul"},"Speech algorithms and features",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Voice Activity Detection"),(0,r.kt)("li",{parentName:"ul"},"Direction of Arrival"),(0,r.kt)("li",{parentName:"ul"},"Beamforming"),(0,r.kt)("li",{parentName:"ul"},"Noise Suppression"),(0,r.kt)("li",{parentName:"ul"},"De-reverberation"),(0,r.kt)("li",{parentName:"ul"},"Acoustic Echo Cancellation")))),(0,r.kt)("h2",{id:"specification"},"Specification"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"XVF-3000 from XMOS"),(0,r.kt)("li",{parentName:"ul"},"4 high performance digital microphones"),(0,r.kt)("li",{parentName:"ul"},"Supports Far-field Voice Capture"),(0,r.kt)("li",{parentName:"ul"},"Speech algorithm on-chip"),(0,r.kt)("li",{parentName:"ul"},"12 programmable RGB LED indicators  "),(0,r.kt)("li",{parentName:"ul"},"Microphones: ST MP34DT01TR-M  "),(0,r.kt)("li",{parentName:"ul"},"Sensitivity: -26 dBFS (Omnidirectional)  "),(0,r.kt)("li",{parentName:"ul"},"Acoustic overload point: 120 dBSPL  "),(0,r.kt)("li",{parentName:"ul"},"SNR: 61 dB  "),(0,r.kt)("li",{parentName:"ul"},"Power Supply: 5V DC from Micro USB"),(0,r.kt)("li",{parentName:"ul"},"Dimensions: 70mm (Diameter)  "),(0,r.kt)("li",{parentName:"ul"},"3.5mm Audio jack output socket"),(0,r.kt)("li",{parentName:"ul"},"Power consumption: 5V, 180mA with led on and 170mA with led off"),(0,r.kt)("li",{parentName:"ul"},"Max Sample Rate: 16Khz")),(0,r.kt)("h2",{id:"hardware-overview"},"Hardware Overview"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker-Mic-Array-v2.1/img/hardware_overview.jpg",alt:null})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{face:"",size:"3",font:!0,color:"ff0000"},"\u2460")," XMOS XVF-3000:"),"\nIt integrates advanced DSP algorithms that include Acoustic Echo Cancellation (AEC), beamforming, dereverberation, noise suppression and gain control.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{face:"",size:"3",font:!0,color:"ff0000"},"\u2461")," Digital Microphone:"),"\nThe MP34DT01-M is an ultra-compact, lowpower, omnidirectional, digital MEMS microphone built with a capacitive sensing element and an IC interface.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{face:"",size:"3",font:!0,color:"ff0000"},"\u2462")," RGB LED:"),"\nThree-color RGB LED.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{face:"",size:"3",font:!0,color:"ff0000"},"\u2463")," USB Port:"),"\nProvide the power and control the mic array.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{face:"",size:"3",font:!0,color:"ff0000"},"\u2464")," 3.5mm Headphone jack:"),"\nOutput audio, We can plug active speakers or Headphones into this port.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{face:"",size:"3",font:!0,color:"ff0000"},"\u2465")," WM8960:"),"\nThe WM8960 is a low power stereo codec featuring Class D speaker drivers to provide 1 W per channel into 8 W loads."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"System Diagram"),"\n",(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/img/system_diag.png",alt:null})),(0,r.kt)("h2",{id:"applications"},"Applications"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"USB Voice Capture"),(0,r.kt)("li",{parentName:"ul"},"Smart Speaker"),(0,r.kt)("li",{parentName:"ul"},"Intelligent Voice Assistant Systems"),(0,r.kt)("li",{parentName:"ul"},"Voice Recorders"),(0,r.kt)("li",{parentName:"ul"},"Voice Conferencing System"),(0,r.kt)("li",{parentName:"ul"},"Meeting Communicating Equipment"),(0,r.kt)("li",{parentName:"ul"},"Voice Interacting Robot"),(0,r.kt)("li",{parentName:"ul"},"Car Voice Assistant"),(0,r.kt)("li",{parentName:"ul"},"Other Voice Interface Scenarios")),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"ReSpeaker USB Mic Array is compatiable with Windows, Mac, Linux systems andriod. The below scripts are tested on Python2.7.")),(0,r.kt)("h3",{id:"update-firmware"},"Update Firmware"),(0,r.kt)("p",null,"Here is the table for the differences."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Firmware"),(0,r.kt)("th",{parentName:"tr",align:null},"Channels"),(0,r.kt)("th",{parentName:"tr",align:null},"Note"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1_channel_firmware.bin"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"processed audio for ASR")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6_channels_firmware.bin"),(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"channel 0: processed audio for ASR, channel 1-4: 4 microphones' raw data, channel 5: playback\uff08factory firmware\uff09")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Linux:"),"  The Mic array supports the USB DFU. We develop a python script dfu.py to update the firmware through USB."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"sudo apt-get update\nsudo pip install pyusb click\ngit clone https://github.com/respeaker/usb_4_mic_array.git\ncd usb_4_mic_array\nsudo python dfu.py --download 6_channels_firmware.bin  # The 6 channels version \n\n# if you want to use 1 channel,then the command should be like:\n\nsudo python dfu.py --download 1_channel_firmware.bin\n\n")),(0,r.kt)("p",null,"Here is the firmware downloading result.\n",(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/img/Download_firmware.png",alt:null})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Windows/Mac:")," We do not suggest use Windows/Mac and Linux vitual machine to update the firmware."),(0,r.kt)("h3",{id:"out-of-box-demo"},"Out of Box Demo"),(0,r.kt)("p",null,"Here is the Acoustic Echo Cancellation example with 6 channels firmware."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 1. Connect the USB cable to PC and audio jack to speaker.")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker-USB-Mics/img/Bazaar/_DAS5930.jpg",alt:null})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 2. Select the mic array v2.1 as output device in PC side."),(0,r.kt)("li",{parentName:"ul"},"Step 3. Start the audacity to record."),(0,r.kt)("li",{parentName:"ul"},"Step 4. Play music at PC side first and then we talk."),(0,r.kt)("li",{parentName:"ul"},"Step 5. We will see the audacity screen as below, Please click ",(0,r.kt)("strong",{parentName:"li"},"Solo")," to hear each channel audio.")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/img/Audacity.png",alt:null})),(0,r.kt)("p",null,"Channel0 Audio(processed by algorithms):"),(0,r.kt)("audio",{controls:"controls"},(0,r.kt)("source",{type:"audio/wav",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/channel0_asr.wav"}),(0,r.kt)("source",{type:"audio/ogg",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/channel0_asr.ogg"})),(0,r.kt)("p",null,"Channel1 Audio(Mic1 raw data):"),(0,r.kt)("audio",{controls:"controls"},(0,r.kt)("source",{type:"audio/wav",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/channel1_raw.wav"}),(0,r.kt)("source",{type:"audio/ogg",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/channel1_raw.ogg"})),(0,r.kt)("p",null,"Channel5 Audio(Playback data):"),(0,r.kt)("audio",{controls:"controls"},(0,r.kt)("source",{type:"audio/wav",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/channel5_playback.wav"}),(0,r.kt)("source",{type:"audio/ogg",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/channel5_playback.ogg"})),(0,r.kt)("p",null,"Here is the video about the DOA and AEC."),(0,r.kt)("iframe",{width:"800",height:"450",src:"https://www.youtube.com/embed/gGVQ-9f7azs",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,r.kt)("h3",{id:"install-dfu-and-led-control-driver"},"Install DFU and LED Control Driver"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Windows:")," Audio recording and playback works well by default. Libusb-win32 driver is only required to control LEDs an DSP parameters on Windows. We use ",(0,r.kt)("a",{parentName:"li",href:"http://zadig.akeo.ie/"},"a handy tool - Zadig")," to install the libusb-win32 driver for both ",(0,r.kt)("inlineCode",{parentName:"li"},"SEEED DFU")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"SEEED Control")," (ReSpeaker Mic Array has 2 devices on Windows Device Manager).")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/img/usb_4mic_array_driver.png",alt:null})),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"Please make sure that libusb-win32 is selected, not WinUSB or libusbK.\n"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MAC:")," No driver is required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Linux:")," No driver is required.")),(0,r.kt)("h3",{id:"tuning"},"Tuning"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Linux/Mac/Windows:")," We can configure some parameters of built-in algorithms."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get the full list parameters, for more info, please refer to FAQ.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/respeaker/usb_4_mic_array.git\ncd usb_4_mic_array\npython tuning.py -p\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example#1, we can turn off Automatic Gain Control (AGC):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo python tuning.py AGCONOFF 0\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example#2, We can check the DOA angle.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pi@raspberrypi:~/usb_4_mic_array $ sudo python tuning.py DOAANGLE\nDOAANGLE: 180\n")),(0,r.kt)("h3",{id:"control-the-leds"},"Control the LEDs"),(0,r.kt)("p",null,"We can control the ReSpeaker USB Mic Array's LEDs through USB. The USB device has a Vendor Specific Class Interface which can be used to send data through USB Control Transfer. We refer ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pyusb/pyusb"},"pyusb python library")," and come out the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/respeaker/pixel_ring/blob/master/pixel_ring/usb_pixel_ring_v2.py"},"usb_pixel_ring python library"),"."),(0,r.kt)("p",null,"The LED control command is sent by pyusb's usb.core.Device.ctrl_transfer(), its parameters as below\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ctrl_transfer(usb.util.CTRL_OUT | usb.util.CTRL_TYPE_VENDOR | usb.util.CTRL_RECIPIENT_DEVICE, 0, command, 0x1C, data, TIMEOUT)\n\n")),(0,r.kt)("p",null,"Here are the usb_pixel_ring APIs."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Command"),(0,r.kt)("th",{parentName:"tr",align:null},"Data"),(0,r.kt)("th",{parentName:"tr",align:null},"API"),(0,r.kt)("th",{parentName:"tr",align:null},"Note"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"[0]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.trace()"),(0,r.kt)("td",{parentName:"tr",align:null},"trace mode, LEDs changing depends on VAD",(0,r.kt)("em",{parentName:"td"},"and DOA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"[red, green, blue, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.mono()"),(0,r.kt)("td",{parentName:"tr",align:null},"mono mode, set all RGB LED to a single color, for example Red(0xFF0000), Green(0x00FF00)\uff0c Blue(0x0000FF)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"[0]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.listen()"),(0,r.kt)("td",{parentName:"tr",align:null},"listen mode, similar with trace mode, but not turn LEDs off")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"[0]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.speak()"),(0,r.kt)("td",{parentName:"tr",align:null},"wait mode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"[0]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.think()"),(0,r.kt)("td",{parentName:"tr",align:null},"speak mode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"[0]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.spin()"),(0,r.kt)("td",{parentName:"tr",align:null},"spin mode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"[r, g, b, 0]"," * 12"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.customize()"),(0,r.kt)("td",{parentName:"tr",align:null},"custom mode, set each LED to its own color")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0x20"),(0,r.kt)("td",{parentName:"tr",align:null},"[brightness]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.set_brightness()"),(0,r.kt)("td",{parentName:"tr",align:null},"set brightness, range: 0x00~0x1F")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0x21"),(0,r.kt)("td",{parentName:"tr",align:null},"[r1, g1, b1, 0, r2, g2, b2, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.set_color_palette()"),(0,r.kt)("td",{parentName:"tr",align:null},"set color palette, for example, pixel_ring.set_color_palette(0xff0000, 0x00ff00) together with pixel_ring.think()")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0x22"),(0,r.kt)("td",{parentName:"tr",align:null},"[vad_led]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.set_vad_led()"),(0,r.kt)("td",{parentName:"tr",align:null},"set center LED: 0 - off, 1 - on, else - depends on VAD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0x23"),(0,r.kt)("td",{parentName:"tr",align:null},"[volume]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.set_volume()"),(0,r.kt)("td",{parentName:"tr",align:null},"show volume, range: 0 ~ 12")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0x24"),(0,r.kt)("td",{parentName:"tr",align:null},"[pattern]"),(0,r.kt)("td",{parentName:"tr",align:null},"pixel_ring.change_pattern()"),(0,r.kt)("td",{parentName:"tr",align:null},"set pattern, 0 - Google Home pattern, others - Echo pattern")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Linux:")," Here is the example to control the leds. Please follow below commands to run the demo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"git clone https://github.com/respeaker/pixel_ring.git\ncd pixel_ring\nsudo python setup.py install\nsudo python examples/usb_mic_array.py\n")),(0,r.kt)("p",null,"Here is the code of the usb_mic_array.py."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import time\nfrom pixel_ring import pixel_ring\n\n\nif __name__ == '__main__':\n    while True:\n\n        try:\n            pixel_ring.wakeup()\n            time.sleep(3)\n            pixel_ring.think()\n            time.sleep(3)\n            pixel_ring.speak()\n            time.sleep(6)\n            pixel_ring.off()\n            time.sleep(3)\n        except KeyboardInterrupt:\n            break\n\n\n    pixel_ring.off()\n    time.sleep(1)\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Windows/Mac:")," Here is the example to control the leds."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 1. Download pixel_ring.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"git clone https://github.com/respeaker/pixel_ring.git\ncd pixel_ring/pixel_ring\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 2. Create a ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/led_control.py"},"led_control.py")," with below code and run 'python led_control.py'")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Python"},"from usb_pixel_ring_v2 import PixelRing\nimport usb.core\nimport usb.util\nimport time\n\ndev = usb.core.find(idVendor=0x2886, idProduct=0x0018)\nprint dev\nif dev:\n    pixel_ring = PixelRing(dev)\n\n    while True:\n        try:\n            pixel_ring.wakeup(180)\n            time.sleep(3)\n            pixel_ring.listen()\n            time.sleep(3)\n            pixel_ring.think()\n            time.sleep(3)\n            pixel_ring.set_volume(8)\n            time.sleep(3)\n            pixel_ring.off()\n            time.sleep(3)\n        except KeyboardInterrupt:\n            break\n\n    pixel_ring.off()\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'If you see "None" printed on screen, please reinstall the libusb-win32 driver.\n'))),(0,r.kt)("h3",{id:"doa-direction-of-arrival"},"DOA (Direction of Arrival)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Windows/Mac/Linux:")," Here is the example to view the DOA. The Green LED is the indicator of the voice direction. For the angle, please refer to hardware overview.  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 1. Download the usb_4_mic_array.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"git clone https://github.com/respeaker/usb_4_mic_array.git\ncd usb_4_mic_array\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 2. Create a ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/DOA.py"},"DOA.py")," with below code under usb_4_mic_array folder and run 'sudo python DOA.py'")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"from tuning import Tuning\nimport usb.core\nimport usb.util\nimport time\n\ndev = usb.core.find(idVendor=0x2886, idProduct=0x0018)\n\nif dev:\n    Mic_tuning = Tuning(dev)\n    print Mic_tuning.direction\n    while True:\n        try:\n            print Mic_tuning.direction\n            time.sleep(1)\n        except KeyboardInterrupt:\n            break\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 3. We will see the DOA as below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pi@raspberrypi:~/usb_4_mic_array $ sudo python doa.py \n184\n183\n175\n105\n104\n104\n103\n")),(0,r.kt)("h3",{id:"vad-voice-activity-detection"},"VAD (Voice Activity Detection)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Windows/Mac/Linux:")," Here is the example to view the VAD. The Red LED is the indicator of the VAD."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 1. Download the usb_4_mic_array.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"git clone https://github.com/respeaker/usb_4_mic_array.git\ncd usb_4_mic_array\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 2. Create a ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/VAD.py"},"VAD.py")," with below code under usb_4_mic_array folder and run 'sudo python VAD.py'")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"from tuning import Tuning\nimport usb.core\nimport usb.util\nimport time\n\ndev = usb.core.find(idVendor=0x2886, idProduct=0x0018)\n#print dev\nif dev:\n    Mic_tuning = Tuning(dev)\n    print Mic_tuning.is_voice()\n    while True:\n        try:\n            print Mic_tuning.is_voice()\n            time.sleep(1)\n        except KeyboardInterrupt:\n            break\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 3. We will see the DOA as below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pi@raspberrypi:~/usb_4_mic_array $ sudo python VAD.py \n0\n0\n0\n1\n0\n1\n0\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For the threshold of VAD, we also can use the GAMMAVAD_SR to set. Please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/ReSpeaker_Mic_Array_v2.0/#tuning"},"Tuning")," for more detail.")),(0,r.kt)("h3",{id:"extract-voice"},"Extract Voice"),(0,r.kt)("p",null,"We use ",(0,r.kt)("a",{parentName:"p",href:"https://people.csail.mit.edu/hubert/pyaudio/"},"PyAudio python library")," to extract voice through USB."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Linux:"),"  We can use below commands to record or play the voice."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Python"},"arecord -D plughw:1,0 -f cd test.wav # record, please use the arecord -l to check the card and hardware first\naplay -D plughw:1,0 -f cd test.wav # play, please use the aplay -l to check the card and hardware first\narecord -D plughw:1,0 -f cd |aplay -D plughw:1,0 -f cd # record and play at the same time\n")),(0,r.kt)("p",null,"We also can use python script to extract voice."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 1, We need to run the following script to get the device index number of Mic Array:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Python"},"sudo pip install pyaudio\ncd ~\nnano get_index.py\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 2, copy below code and paste on ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/get_index.py"},"get_index.py"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Python"},"import pyaudio\n\np = pyaudio.PyAudio()\ninfo = p.get_host_api_info_by_index(0)\nnumdevices = info.get('deviceCount')\n\nfor i in range(0, numdevices):\n        if (p.get_device_info_by_host_api_device_index(0, i).get('maxInputChannels')) > 0:\n            print \"Input Device id \", i, \" - \", p.get_device_info_by_host_api_device_index(0, i).get('name')\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Step 3, press Ctrl + X to exit and press Y to save.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Step 4, run 'sudo python get_index.py' and we will see the device ID as below."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input Device id  2  -  ReSpeaker 4 Mic Array (UAC1.0): USB Audio (hw:1,0)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 5, change ",(0,r.kt)("inlineCode",{parentName:"li"},"RESPEAKER_INDEX = 2")," to index number. Run python script ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/record.py"},"record.py")," to record a speech.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Python"},'import pyaudio\nimport wave\n\nRESPEAKER_RATE = 16000\nRESPEAKER_CHANNELS = 6 # change base on firmwares, 1_channel_firmware.bin as 1 or 6_channels_firmware.bin as 6\nRESPEAKER_WIDTH = 2\n# run getDeviceInfo.py to get index\nRESPEAKER_INDEX = 2  # refer to input device id\nCHUNK = 1024\nRECORD_SECONDS = 5\nWAVE_OUTPUT_FILENAME = "output.wav"\n\np = pyaudio.PyAudio()\n\nstream = p.open(\n            rate=RESPEAKER_RATE,\n            format=p.get_format_from_width(RESPEAKER_WIDTH),\n            channels=RESPEAKER_CHANNELS,\n            input=True,\n            input_device_index=RESPEAKER_INDEX,)\n\nprint("* recording")\n\nframes = []\n\nfor i in range(0, int(RESPEAKER_RATE / CHUNK * RECORD_SECONDS)):\n    data = stream.read(CHUNK)\n    frames.append(data)\n\nprint("* done recording")\n\nstream.stop_stream()\nstream.close()\np.terminate()\n\nwf = wave.open(WAVE_OUTPUT_FILENAME, \'wb\')\nwf.setnchannels(RESPEAKER_CHANNELS)\nwf.setsampwidth(p.get_sample_size(p.get_format_from_width(RESPEAKER_WIDTH)))\nwf.setframerate(RESPEAKER_RATE)\nwf.writeframes(b\'\'.join(frames))\nwf.close()\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 6. If you want to extract channel 0 data from 6 channels, please follow below code. For other channel X, please change ","[0::6]"," to ","[X::6]",".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import pyaudio\nimport wave\nimport numpy as np\n\nRESPEAKER_RATE = 16000\nRESPEAKER_CHANNELS = 6 # change base on firmwares, 1_channel_firmware.bin as 1 or 6_channels_firmware.bin as 6\nRESPEAKER_WIDTH = 2\n# run getDeviceInfo.py to get index\nRESPEAKER_INDEX = 3  # refer to input device id\nCHUNK = 1024\nRECORD_SECONDS = 3\nWAVE_OUTPUT_FILENAME = "output.wav"\n\np = pyaudio.PyAudio()\n\nstream = p.open(\n            rate=RESPEAKER_RATE,\n            format=p.get_format_from_width(RESPEAKER_WIDTH),\n            channels=RESPEAKER_CHANNELS,\n            input=True,\n            input_device_index=RESPEAKER_INDEX,)\n\nprint("* recording")\n\nframes = [] \n\nfor i in range(0, int(RESPEAKER_RATE / CHUNK * RECORD_SECONDS)):\n    data = stream.read(CHUNK)\n    # extract channel 0 data from 6 channels, if you want to extract channel 1, please change to [1::6]\n    a = np.fromstring(data,dtype=np.int16)[0::6]\n    frames.append(a.tostring())\n\nprint("* done recording")\n\nstream.stop_stream()\nstream.close()\np.terminate()\n\nwf = wave.open(WAVE_OUTPUT_FILENAME, \'wb\')\nwf.setnchannels(1)\nwf.setsampwidth(p.get_sample_size(p.get_format_from_width(RESPEAKER_WIDTH)))\nwf.setframerate(RESPEAKER_RATE)\nwf.writeframes(b\'\'.join(frames))\nwf.close()\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Windows:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 1. We run below command to install pyaudio.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," pip install pyaudio\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 2. Use ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/get_index.py"},"get_index.py")," to get device index.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"C:\\Users\\XXX\\Desktop>python get_index.py\nInput Device id  0  -  Microsoft Sound Mapper - Input\nInput Device id  1  -  ReSpeaker 4 Mic Array (UAC1.0)\nInput Device id  2  -  Internal Microphone (Conexant I)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 3. Modify the device index and channels of ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/record.py"},"record.py")," and then extract voice.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"C:\\Users\\XXX\\Desktop>python record.py\n* recording\n* done recording\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},'If we see "Error: %1 is not a valid Win32 application.", please install Python Win32 version.\n'))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For MAC:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 1. We run below command to install pyaudio.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," pip install pyaudio\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 2. Use ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/get_index.py"},"get_index.py")," to get device index.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MacBook-Air:Desktop XXX$ python get_index.py \nInput Device id  0  -  Built-in Microphone\nInput Device id  2  -  ReSpeaker 4 Mic Array (UAC1.0)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 3. Modify the device index and channels of ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/record.py"},"record.py")," and then extract voice.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MacBook-Air:Desktop XXX$ python record.py \n2018-03-24 14:53:02.400 Python[2360:16629] 14:53:02.399 WARNING:  140: This application, or a library it uses, is using the deprecated Carbon Component Manager for hosting Audio Units. Support for this will be removed in a future release. Also, this makes the host incompatible with version 3 audio units. Please transition to the API's in AudioComponent.h.\n* recording\n* done recording\n")),(0,r.kt)("h3",{id:"realtime-sound-source-localization-and-tracking"},"Realtime Sound Source Localization and Tracking"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/introlab/odas"},"ODAS")," stands for Open embeddeD Audition System. This is a library dedicated to perform sound source localization, tracking, separation and post-filtering. Let's have a fun with it."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Linux:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Step 1. Get ODAS and build it.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo apt-get install libfftw3-dev libconfig-dev libasound2-dev libgconf-2-4\ngit clone https://github.com/introlab/odas.git\nmkdir odas/build\ncd odas/build\ncmake ..\nmake\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Step 2. Get ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/introlab/odas_web/releases"},"ODAS Studio"),"  and open it.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Step 3. The odascore will be at ",(0,r.kt)("strong",{parentName:"p"},"odas/bin/odaslive"),", the ",(0,r.kt)("strong",{parentName:"p"},"config file")," is ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/respeaker/usb_4_mic_array/master/odas.cfg"},"odas.cfg"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Step 4. Upgrade mic array with 6_channels_firmware.bin which includes 4 channels raw audio data."))),(0,r.kt)("iframe",{width:"800",height:"500",src:"https://www.youtube.com/embed/K5gZabfaaPI",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:!0}),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q1: Parameters of built-in algorithms")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pi@raspberrypi:~/usb_4_mic_array $ python tuning.py -p\nname   type max min r/w info\n-------------------------------\nAECFREEZEONOFF   int 1 0 rw Adaptive Echo Canceler updates inhibit.\n                                                            0 = Adaptation enabled\n                                                            1 = Freeze adaptation, filter only\nAECNORM          float 16 0.25 rw Limit on norm of AEC filter coefficients\nAECPATHCHANGE    int 1 0 ro AEC Path Change Detection.\n                                                            0 = false (no path change detected)\n                                                            1 = true (path change detected)\nAECSILENCELEVEL  float 1 1e-09 rw Threshold for signal detection in AEC [-inf .. 0] dBov (Default: -80dBov = 10log10(1x10-8))\nAECSILENCEMODE   int 1 0 ro AEC far-end silence detection status. \n                                                            0 = false (signal detected) \n                                                            1 = true (silence detected)\nAGCDESIREDLEVEL  float 0.99 1e-08 rw Target power level of the output signal. \n                                                            [\u2212inf .. 0] dBov (default: \u221223dBov = 10log10(0.005))\nAGCGAIN          float 1000 1 rw Current AGC gain factor. \n                                                            [0 .. 60] dB (default: 0.0dB = 20log10(1.0))\nAGCMAXGAIN       float 1000 1 rw Maximum AGC gain factor. \n                                                            [0 .. 60] dB (default 30dB = 20log10(31.6))\nAGCONOFF         int 1 0 rw Automatic Gain Control. \n                                                            0 = OFF \n                                                            1 = ON\nAGCTIME          float 1 0.1 rw Ramps-up / down time-constant in seconds.\nCNIONOFF         int 1 0 rw Comfort Noise Insertion.\n                                                            0 = OFF\n                                                            1 = ON\nDOAANGLE         int 359 0 ro DOA angle. Current value. Orientation depends on build configuration.\nECHOONOFF        int 1 0 rw Echo suppression.\n                                                            0 = OFF\n                                                            1 = ON\nFREEZEONOFF      int 1 0 rw Adaptive beamformer updates.\n                                                            0 = Adaptation enabled\n                                                            1 = Freeze adaptation, filter only\nFSBPATHCHANGE    int 1 0 ro FSB Path Change Detection.\n                                                            0 = false (no path change detected)\n                                                            1 = true (path change detected)\nFSBUPDATED       int 1 0 ro FSB Update Decision.\n                                                            0 = false (FSB was not updated)\n                                                            1 = true (FSB was updated)\nGAMMAVAD_SR      float 1000 0 rw Set the threshold for voice activity detection.\n                                                            [\u2212inf .. 60] dB (default: 3.5dB 20log10(1.5))\nGAMMA_E          float 3 0 rw Over-subtraction factor of echo (direct and early components). min .. max attenuation\nGAMMA_ENL        float 5 0 rw Over-subtraction factor of non-linear echo. min .. max attenuation\nGAMMA_ETAIL      float 3 0 rw Over-subtraction factor of echo (tail components). min .. max attenuation\nGAMMA_NN         float 3 0 rw Over-subtraction factor of non- stationary noise. min .. max attenuation\nGAMMA_NN_SR      float 3 0 rw Over-subtraction factor of non-stationary noise for ASR. \n                                                            [0.0 .. 3.0] (default: 1.1)\nGAMMA_NS         float 3 0 rw Over-subtraction factor of stationary noise. min .. max attenuation\nGAMMA_NS_SR      float 3 0 rw Over-subtraction factor of stationary noise for ASR. \n                                                            [0.0 .. 3.0] (default: 1.0)\nHPFONOFF         int 3 0 rw High-pass Filter on microphone signals.\n                                                            0 = OFF\n                                                            1 = ON - 70 Hz cut-off\n                                                            2 = ON - 125 Hz cut-off\n                                                            3 = ON - 180 Hz cut-off\nMIN_NN           float 1 0 rw Gain-floor for non-stationary noise suppression.\n                                                            [\u2212inf .. 0] dB (default: \u221210dB = 20log10(0.3))\nMIN_NN_SR        float 1 0 rw Gain-floor for non-stationary noise suppression for ASR.\n                                                            [\u2212inf .. 0] dB (default: \u221210dB = 20log10(0.3))\nMIN_NS           float 1 0 rw Gain-floor for stationary noise suppression.\n                                                            [\u2212inf .. 0] dB (default: \u221216dB = 20log10(0.15))\nMIN_NS_SR        float 1 0 rw Gain-floor for stationary noise suppression for ASR.\n                                                            [\u2212inf .. 0] dB (default: \u221216dB = 20log10(0.15))\nNLAEC_MODE       int 2 0 rw Non-Linear AEC training mode.\n                                                            0 = OFF\n                                                            1 = ON - phase 1\n                                                            2 = ON - phase 2\nNLATTENONOFF     int 1 0 rw Non-Linear echo attenuation.\n                                                            0 = OFF\n                                                            1 = ON\nNONSTATNOISEONOFF int 1 0 rw Non-stationary noise suppression.\n                                                            0 = OFF\n                                                            1 = ON\nNONSTATNOISEONOFF_SR int 1 0 rw Non-stationary noise suppression for ASR.\n                                                            0 = OFF\n                                                            1 = ON\nRT60             float 0.9 0.25 ro Current RT60 estimate in seconds\nRT60ONOFF        int 1 0 rw RT60 Estimation for AES. 0 = OFF 1 = ON\nSPEECHDETECTED   int 1 0 ro Speech detection status.\n                                                            0 = false (no speech detected)\n                                                            1 = true (speech detected)\nSTATNOISEONOFF   int 1 0 rw Stationary noise suppression.\n                                                            0 = OFF\n                                                            1 = ON\nSTATNOISEONOFF_SR int 1 0 rw Stationary noise suppression for ASR.\n                                                            0 = OFF\n                                                            1 = ON\nTRANSIENTONOFF   int 1 0 rw Transient echo suppression.\n                                                            0 = OFF\n                                                            1 = ON\nVOICEACTIVITY    int 1 0 ro VAD voice activity status.\n                                                            0 = false (no voice activity)\n                                                            1 = true (voice activity)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q2: ImportError: No module named usb.core")),(0,r.kt)("p",null,"A2: Run sudo pip install pyusb to install the pyusb."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'pi@raspberrypi:~/usb_4_mic_array $ sudo python tuning.py DOAANGLE\nTraceback (most recent call last):\n  File "tuning.py", line 5, in <module>\n    import usb.core\nImportError: No module named usb.core\npi@raspberrypi:~/usb_4_mic_array $ sudo pip install pyusb\nCollecting pyusb\n  Downloading pyusb-1.0.2.tar.gz (54kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 61kB 101kB/s \nBuilding wheels for collected packages: pyusb\n  Running setup.py bdist_wheel for pyusb ... done\n  Stored in directory: /root/.cache/pip/wheels/8b/7f/fe/baf08bc0dac02ba17f3c9120f5dd1cf74aec4c54463bc85cf9\nSuccessfully built pyusb\nInstalling collected packages: pyusb\nSuccessfully installed pyusb-1.0.2\npi@raspberrypi:~/usb_4_mic_array $ sudo python tuning.py DOAANGLE\nDOAANGLE: 180\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q3: Do you have the example for Raspberry alexa application?")),(0,r.kt)("p",null,"A3: Yes, we can connect the mic array v2.0 to raspberry usb port and follow ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alexa/avs-device-sdk/wiki/Raspberry-Pi-Quick-Start-Guide-with-Script"},"Raspberry Pi Quick Start Guide with Script")," to do the voice interaction with alexa."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q4: Do you have the example for Mic array v2.1 with ROS system?")),(0,r.kt)("p",null,"A4: Yes, thanks for Yuki sharing the package for integrating ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/furushchev/respeaker_ros"},"ReSpeaker USB Mic Array with ROS (Robot Operating System) Middleware"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q5: How to enable 3.5mm audio port to receive the signal as well as usb port?")),(0,r.kt)("p",null,"A5: Please download the ",(0,r.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/i2s_i1o2.bin"},"new firmware")," and burn the XMOS by following ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/ReSpeaker_Mic_Array_v2.0/#update-firmware"},"How to update firmware"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},'Q6: #include "portaudio.h" Error when run "sudo pip install pyaudio".')),(0,r.kt)("p",null,"A6: Please run below command to solve the issue."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo apt-get install portaudio19-dev\n")),(0,r.kt)("h2",{id:"resource"},"Resource"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker-USB-Mics/res/dimension.pdf"},"ReSpeaker USB Mic Array Dimension")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[DWG]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker-USB-Mics/res/case.dwg"},"ReSpeaker USB Mic Array Case 3D Model")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/XVF3000-3100-product-brief_1.4.pdf"},"XVF3000 Product Brief")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"[PDF]")," ",(0,r.kt)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/ReSpeaker_Mic_Array_V2/res/XVF3000-3100-TQ128-Datasheet_1.0.pdf"},"XVF3000 Datasheet"))),(0,r.kt)("h2",{id:"tech-support"},"Tech Support"),(0,r.kt)("p",null,"Please submit any technical issue into our ",(0,r.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,r.kt)("div",null,(0,r.kt)("br",null),(0,r.kt)("p",{style:{textAlign:"center"}},(0,r.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,r.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"})))))}d.isMDXComponent=!0}}]);