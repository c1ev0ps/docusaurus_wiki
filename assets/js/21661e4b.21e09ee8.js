"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[31192],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(r),c=o,h=m["".concat(l,".").concat(c)]||m[c]||d[c]||a;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},94193:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={description:"Grove-Temperature_Sensor",title:"Grove-Temperature_Sensor",keywords:["Grove"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/3/2023",author:"jianjing Huang"}},i=void 0,s={unversionedId:"Sensor/Grove/Grove_Sensors/Temperature/Grove-Temperature_Sensor",id:"Sensor/Grove/Grove_Sensors/Temperature/Grove-Temperature_Sensor",title:"Grove-Temperature_Sensor",description:"Grove-Temperature_Sensor",source:"@site/docs/Sensor/Grove/Grove_Sensors/Temperature/Grove-Temperature_Sensor.md",sourceDirName:"Sensor/Grove/Grove_Sensors/Temperature",slug:"/Sensor/Grove/Grove_Sensors/Temperature/Grove-Temperature_Sensor",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors/Temperature/Grove-Temperature_Sensor",draft:!1,editUrl:"https://github.com/c1ev0ps/docusaurus_wiki/edit/main/docs/Sensor/Grove/Grove_Sensors/Temperature/Grove-Temperature_Sensor.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1672704e3,formattedLastUpdatedAt:"Jan 3, 2023",frontMatter:{description:"Grove-Temperature_Sensor",title:"Grove-Temperature_Sensor",keywords:["Grove"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S.png",last_update:{date:"1/3/2023",author:"jianjing Huang"}},sidebar:"ProductSidebar",previous:{title:"Grove - Infrared Temperature Sensor Array(AMG8833)",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors/Temperature/Grove-Infrared_Temperature_Sensor_Array-AMG8833"},next:{title:"Grove - Temperature Sensor V1.2",permalink:"/docusaurus_wiki/Sensor/Grove/Grove_Sensors/Temperature/Grove-Temperature_Sensor_V1.2"}},l={},p=[{value:"Specifications",id:"specifications",level:2},{value:"Demonstration",id:"demonstration",level:2},{value:"With Arduino",id:"with-arduino",level:3},{value:"With Raspberry Pi",id:"with-grovepi",level:3},{value:"With Beaglebone Green",id:"with-beaglebone-green",level:3},{value:"Schematic Online Viewer",id:"schematic-online-viewer",level:2},{value:"Resource",id:"resource",level:2},{value:"Projects",id:"projects",level:2},{value:"Tech Support",id:"tech-support",level:2}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{width:"{1000}",src:"https://files.seeedstudio.com/wiki/Grove-Temperature_Sensor/img/Temperature1.jpg"})),(0,o.kt)("p",null,"The Grove - Temperature Sensor uses a ",(0,o.kt)("a",{parentName:"p",href:"http://www.legacydistribution.co.uk/downloads/NTC-thermistors/TTC03.pdf"},"Thermistor")," to detect the ambient temperature. The resistance of a thermistor will increase when the ambient temperature decreases. It's this characteristic that we use to calculate the ambient temperature. The detectable range of this sensor is -40 - 125\xbaC, and the accuracy is \xb11.5\xbaC."),(0,o.kt)("p",{style:{textAlign:"center"}},(0,o.kt)("a",{href:"https://www.seeedstudio.com/Grove-Temperature-Sensor-p-774.html",target:"_blank"},(0,o.kt)("img",{src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/300px-Get_One_Now_Banner-ragular.png"}))),(0,o.kt)("h2",{id:"specifications"},"Specifications"),(0,o.kt)("hr",null),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Voltage: 3.3 ~ 5V")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Max power rating at 25\u2103: 300mW")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Zero power resistance: 10 K\u03a9")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Operating temperature range: -40 ~ +125 \u2103"))),(0,o.kt)("h2",{id:"demonstration"},"Demonstration"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"with-arduino"},"With Arduino"),(0,o.kt)("p",null,"Here is an example to show you how to read temperature information from the sensor."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Connect the module to the Analog port 0 of Grove - Basic Shield using the 4-pin grove cable.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Plug the Grove - Basic Shield into Arduino.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Connect Arduino to PC by using a USB cable."))),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{width:"{1000}",src:"https://files.seeedstudio.com/wiki/Grove-Temperature_Sensor/img/Tempreture_Sensor_Connector.jpg"})),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Upload Code below. Please click ",(0,o.kt)("a",{parentName:"li",href:"/Top_Brand/Arduino/Tutorials/Arduino_Basic_Usage/Upload_Code/"},"here")," if you do not know how to upload.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'/*\n/* Grove - Temperature Sensor demo v1.0\n*  This sensor detects the environment temperature,\n*  Connect the signal of this sensor to A0, use the\n*  Serial monitor to get the result.\n*  By: https://www.seeedstudio.com\n*/\n#include <math.h>\nint a;\nfloat temperature;\nint B=3975;                  //B value of the thermistor\nfloat resistance;\n\nvoid setup()\n{\n    Serial.begin(9600);\n}\n\nvoid loop()\n{\n    a=analogRead(0);\n    resistance=(float)(1023-a)*10000/a; //get the resistance of the sensor;\n    temperature=1/(log(resistance/10000)/B+1/298.15)-273.15;//convert to temperature via datasheet&nbsp;;\n    delay(1000);\n    Serial.print("Current temperature is ");\n    Serial.println(temperature);\n}\n')),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"You can check the readings via the Serial Monitor. The default unit is Celsius degree.")),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{width:"{1000}",src:"https://files.seeedstudio.com/wiki/Grove-Temperature_Sensor/img/Temperature_Sensor_Score.jpg"})),(0,o.kt)("p",null,"As a reference, the following is the resistance curve of TTC3A103*39H, the thermistor we used on this sensor. The higher the temperature goes, the smaller the resistance becomes."),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{width:"{1000}",src:"https://files.seeedstudio.com/wiki/Grove-Temperature_Sensor/img/Twig-Temperature-Sensor-value.jpg"})),(0,o.kt)("h3",{id:"with-grovepi"},"With ",(0,o.kt)("a",{parentName:"h3",href:"/Top_Brand/Raspberry_Pi/Pi_HAT/GrovePi_Plus/",title:"GrovePi+"},"Raspberry Pi")),(0,o.kt)("p",null,"1.You should have got a raspberry pi and a grovepi or grovepi+."),(0,o.kt)("p",null,"2.You should have completed configuring the development enviroment, otherwise follow ",(0,o.kt)("a",{parentName:"p",href:"/Top_Brand/Raspberry_Pi/Pi_HAT/GrovePi_Plus/#Introducing_the_GrovePi.2B"},"here"),"."),(0,o.kt)("p",null,"3.Connection"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Plug the sensor to grovepi socket D3 by using a grove cable.")),(0,o.kt)("p",null,"4.Navigate to the demos' directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd yourpath/GrovePi/Software/Python/\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To see the code")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'nano grove_temperature_sensor.py   # "Ctrl+x" to exit #\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import time\nimport grovepi\n\n# Connect the Grove Temperature Sensor to analog port A0\n# SIG,NC,VCC,GND\nsensor = 0\n\nwhile True:\ntry:\ntemp = grovepi.temp(sensor,\'1.1\')\nprint "temp =", temp\ntime.sleep(.5)\n\nexcept KeyboardInterrupt:\nbreak\nexcept IOError:\nprint "Error"\n')),(0,o.kt)("p",null,"5.Run the demo."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo python grove_temperature_sensor.py\n")),(0,o.kt)("h3",{id:"with-beaglebone-green"},"With Beaglebone Green"),(0,o.kt)("p",null,"To begin editing programs that live on BBG, you can use the Cloud9 IDE."),(0,o.kt)("p",null,"As a simple exercise to become familiar with Cloud9 IDE, creating a simple application to blink one of the 4 user programmable LEDs on the BeagleBone is a good start."),(0,o.kt)("p",null,"If this is your first time to use Cloud9 IDE, please follow this ",(0,o.kt)("a",{parentName:"p",href:"/Edge/Beagle_Bone/BeagleBone_Green/#getting-started"},(0,o.kt)("strong",{parentName:"a"},"link")),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step1:"),' Click the "+" in the top-right to create a new file.'),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{width:"{1000}",src:"https://files.seeedstudio.com/wiki/Grove-Temperature_Sensor/img/C9-create-tab.png"})),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{width:"{1000}",src:"https://files.seeedstudio.com/wiki/Grove-Temperature_Sensor/img/C9_newfile.jpg"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step2:")," Copy and paste the following code into the new tab"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"from Adafruit_I2C import Adafruit_I2C\nimport time\n\nADDR_ADC121 = 0x50\n\nREG_ADDR_RESULT = 0x00\nREG_ADDR_ALERT = 0x01\nREG_ADDR_CONFIG = 0x02\nREG_ADDR_LIMITL = 0x03\nREG_ADDR_LIMITH = 0x04\nREG_ADDR_HYST = 0x05\nREG_ADDR_CONVL = 0x06\nREG_ADDR_CONVH = 0x07\n\ni2c = Adafruit_I2C(ADDR_ADC121)\n\nclass I2cAdc:\ndef __init__(self):\ni2c.write8(REG_ADDR_CONFIG, 0x20)\n\ndef read_adc(self):\n\"Read ADC data 0-4095.\"\ndata_list = i2c.readList(REG_ADDR_RESULT, 2)\n        #print 'data list', data_list\ndata = ((data_list[0] & 0x0f) << 8 | data_list[1]) & 0xfff\nreturn data\n\nif __name__ == '__main__':\n    # Connect the Grove - I2C ADC to I2C Grove port of Beaglebone Green.\nadc = I2cAdc()\nwhile True:\nprint 'sensor value ', adc.read_adc()\ntime.sleep(.2)\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step3:"),' Save the file by clicking the disk icon with a name "grove_i2c_adc.py".'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step4:")," Create a new file Copy the following code into the new tab and save it with the .py extension."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"import time\nimport math\nimport grove_i2c_adc\nimport Adafruit_BBIO.GPIO as GPIO\n\nBUZZER = \"P9_22\"            # GPIO P9_22\nGPIO.setup(BUZZER, GPIO.OUT)\n\n# The threshold to turn the buzzer on 28 Celsius\nTHRESHOLD_TEMPERATURE = 28\n\nadc = grove_i2c_adc.I2cAdc()\n\n#   The argument in the read_temperature() method defines which Grove board(Grove Temperature Sensor) version you have connected.\n#   Defaults to 'v1.2'. eg.\n#       temp = read_temperature('v1.0')          # B value = 3975\n#       temp = read_temperature('v1.1')          # B value = 4250\n#       temp = read_temperature('v1.2')          # B value = 4250\ndef read_temperature(model = 'v1.2'):\n\"Read temperature values in Celsius from Grove Temperature Sensor\"\n    # each of the sensor revisions use different thermistors, each with their own B value constant\nif model == 'v1.2':\nbValue = 4250  # sensor v1.2 uses thermistor ??? (assuming NCP18WF104F03RC until SeeedStudio clarifies)\nelif model == 'v1.1':\nbValue = 4250  # sensor v1.1 uses thermistor NCP18WF104F03RC\nelse:\nbValue = 3975  # sensor v1.0 uses thermistor TTC3A103*39H\n\ntotal_value = 0\nfor index in range(20):\nsensor_value = adc.read_adc()\ntotal_value += sensor_value\ntime.sleep(0.05)\naverage_value = float(total_value / 20)\n\n    # Transform the ADC data into the data of Arduino platform.\nsensor_value_tmp = (float)(average_value / 4095 * 2.95 * 2 / 3.3 * 1023)\nresistance = (float)(1023 - sensor_value_tmp) * 10000 / sensor_value_tmp\ntemperature = round((float)(1 / (math.log(resistance / 10000) / bValue + 1 / 298.15) - 273.15), 2)\nreturn temperature\n\n# Function: If the temperature sensor senses the temperature that is up to the threshold you set in the code, the buzzer is ringing for 1s.\n# Hardware: Grove - I2C ADC, Grove - Temperature Sensor, Grove - Buzzer\n# Note: Use P9_22(UART2_RXD) as GPIO.\n# Connect the Grove Buzzer to UART Grove port of Beaglebone Green.\n# Connect the Grove - I2C ADC to I2C Grove port of Beaglebone Green, and then connect the Grove - Temperature Sensor to Grove - I2C ADC.\nif __name__ == '__main__':\n\nwhile True:\ntry:\n            # Read temperature values in Celsius from Grove Temperature Sensor\ntemperature = read_temperature('v1.2')\n\n            # When the temperature reached predetermined value, buzzer is ringing.\n\nprint \"temperature = \", temperature\n\nexcept IOError:\nprint \"Error\"\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step5:")," Connect Grove Temperature to Grove I2C ADC which is connected to Grove I2C socket on BBG."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step6:")," Run the code.\nYou'll find that the terminal outputs Temperature value every 2 seconds."),(0,o.kt)("h2",{id:"schematic-online-viewer"},"Schematic Online Viewer"),(0,o.kt)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Grove-Temperature_Sensor/res/Grove-Temperature_Sensor-Analog-v1.0_Source_File.zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,o.kt)("h2",{id:"resource"},"Resource"),(0,o.kt)("hr",null),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Grove-Temperature_Sensor/res/Grove-Temperature_Sensor-Analog-v1.0_Source_File.zip"},"Grove - Temperature Sensor v1.0 Eagle File"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Grove_Temperature_Sensor"},"Demo code on github")))),(0,o.kt)("h2",{id:"projects"},"Projects"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"The Environment Cube! Know the Land Beneath You using Sigfox"),": A cube with all the necessary sensors, suitable for a wide range of applications like agriculture, monitoring, ,etc."),(0,o.kt)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/dhairya-parikh/the-environment-cube-know-the-land-beneath-you-using-sigfox-952f29/embed",width:"350"}),(0,o.kt)("h2",{id:"tech-support"},"Tech Support"),(0,o.kt)("p",null,"Please submit any technical issue into our ",(0,o.kt)("a",{parentName:"p",href:"https://forum.seeedstudio.com/"},"forum"),"."),(0,o.kt)("br",null),(0,o.kt)("p",{style:{textAlign:"center"}},(0,o.kt)("a",{href:"https://www.seeedstudio.com/act-4.html?utm_source=wiki&utm_medium=wikibanner&utm_campaign=newproducts",target:"_blank"},(0,o.kt)("img",{src:"https://files.seeedstudio.com/wiki/Wiki_Banner/new_product.jpg"}))))}m.isMDXComponent=!0}}]);